<<<<<<< HEAD   (e87b6e fix: 修复asan检测出的内存泄露问题.)
{"Filepath":"iconengineplugins/builtinengine/dbuiltiniconengine.h","Functions":[{"Uniquefunname":" DBuiltinIconEngine(const DBuiltinIconEngine \u0026 other)","Funname":"DBuiltinIconEngine","Returntype":"","Args":"const DBuiltinIconEngine \u0026 other"},{"Uniquefunname":"public DBuiltinIconEngine(const QString \u0026 iconName)","Funname":"DBuiltinIconEngine","Returntype":"public","Args":"const QString \u0026 iconName"},{"Uniquefunname":"QSize actualSize(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"actualSize","Returntype":"QSize","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QIconEngine * clone()","Funname":"clone","Returntype":"QIconEngine *","Args":""},{"Uniquefunname":"void ensureLoaded()","Funname":"ensureLoaded","Returntype":"void","Args":""},{"Uniquefunname":"private hasIcon()","Funname":"hasIcon","Returntype":"private","Args":""},{"Uniquefunname":"QString iconName()","Funname":"iconName","Returntype":"QString","Args":""},{"Uniquefunname":"QString key()","Funname":"key","Returntype":"QString","Args":""},{"Uniquefunname":"QThemeIconInfo loadIcon(const QString \u0026 iconName,uint key)","Funname":"loadIcon","Returntype":"QThemeIconInfo","Args":"const QString \u0026 iconName,uint key"},{"Uniquefunname":"void paint(QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state)","Funname":"paint","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QPixmap pixmap(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"pixmap","Returntype":"QPixmap","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"bool read(QDataStream \u0026 in)","Funname":"read","Returntype":"bool","Args":"QDataStream \u0026 in"},{"Uniquefunname":"void virtual_hook(int id,void * data)","Funname":"virtual_hook","Returntype":"void","Args":"int id,void * data"},{"Uniquefunname":"bool write(QDataStream \u0026 out)","Funname":"write","Returntype":"bool","Args":"QDataStream \u0026 out"},{"Uniquefunname":" ~DBuiltinIconEngine()","Funname":"~DBuiltinIconEngine","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DBUILTINICONENGINE_H"]}]}
{"Filepath":"iconengineplugins/svgiconengine/qsvgiconengine.h","Functions":[{"Uniquefunname":"public QSvgIconEngine()","Funname":"QSvgIconEngine","Returntype":"public","Args":""},{"Uniquefunname":" QSvgIconEngine(const QSvgIconEngine \u0026 other)","Funname":"QSvgIconEngine","Returntype":"","Args":"const QSvgIconEngine \u0026 other"},{"Uniquefunname":"QSize actualSize(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"actualSize","Returntype":"QSize","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"void addFile(const QString \u0026 fileName,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"addFile","Returntype":"void","Args":"const QString \u0026 fileName,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"void addPixmap(const QPixmap \u0026 pixmap,QIcon::Mode mode,QIcon::State state)","Funname":"addPixmap","Returntype":"void","Args":"const QPixmap \u0026 pixmap,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QIconEngine * clone()","Funname":"clone","Returntype":"QIconEngine *","Args":""},{"Uniquefunname":"QString key()","Funname":"key","Returntype":"QString","Args":""},{"Uniquefunname":"void paint(QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state)","Funname":"paint","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QPixmap pixmap(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"pixmap","Returntype":"QPixmap","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"bool read(QDataStream \u0026 in)","Funname":"read","Returntype":"bool","Args":"QDataStream \u0026 in"},{"Uniquefunname":"bool write(QDataStream \u0026 out)","Funname":"write","Returntype":"bool","Args":"QDataStream \u0026 out"},{"Uniquefunname":" ~QSvgIconEngine()","Funname":"~QSvgIconEngine","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["QSVGICONENGINE_H"]}]}
{"Filepath":"iconengineplugins/xdgiconproxyengine/xdgiconproxyengine.h","Functions":[{"Uniquefunname":"public XdgIconProxyEngine(XdgIconLoaderEngine * proxy)","Funname":"XdgIconProxyEngine","Returntype":"public","Args":"XdgIconLoaderEngine * proxy"},{"Uniquefunname":"QSize actualSize(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"actualSize","Returntype":"QSize","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"void addFile(const QString \u0026 fileName,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"addFile","Returntype":"void","Args":"const QString \u0026 fileName,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"void addPixmap(const QPixmap \u0026 pixmap,QIcon::Mode mode,QIcon::State state)","Funname":"addPixmap","Returntype":"void","Args":"const QPixmap \u0026 pixmap,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QIconEngine * clone()","Funname":"clone","Returntype":"QIconEngine *","Args":""},{"Uniquefunname":"quint64 entryCacheKey(const ScalableEntry * color_entry,const QIcon::Mode mode,const QIcon::State state)","Funname":"entryCacheKey","Returntype":"quint64","Args":"const ScalableEntry * color_entry,const QIcon::Mode mode,const QIcon::State state"},{"Uniquefunname":"QPixmap followColorPixmap(ScalableEntry * color_entry,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"followColorPixmap","Returntype":"QPixmap","Args":"ScalableEntry * color_entry,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QString key()","Funname":"key","Returntype":"QString","Args":""},{"Uniquefunname":"void paint(QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state)","Funname":"paint","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QPixmap pixmap(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"pixmap","Returntype":"QPixmap","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QPixmap pixmapByEntry(QIconLoaderEngineEntry * entry,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"pixmapByEntry","Returntype":"QPixmap","Args":"QIconLoaderEngineEntry * entry,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"bool read(QDataStream \u0026 in)","Funname":"read","Returntype":"bool","Args":"QDataStream \u0026 in"},{"Uniquefunname":"void virtual_hook(int id,void * data)","Funname":"virtual_hook","Returntype":"void","Args":"int id,void * data"},{"Uniquefunname":"bool write(QDataStream \u0026 out)","Funname":"write","Returntype":"bool","Args":"QDataStream \u0026 out"},{"Uniquefunname":"virtual ~XdgIconProxyEngine()","Funname":"~XdgIconProxyEngine","Returntype":"virtual","Args":""}],"Records":[{"Name":"macro","Fields":["XDGICONPROXYENGINE_H","private"]}]}
{"Filepath":"imageformatplugins/svg/qsvgiohandler.h","Functions":[{"Uniquefunname":"public QSvgIOHandler()","Funname":"QSvgIOHandler","Returntype":"public","Args":""},{"Uniquefunname":"bool canRead(QIODevice * device)","Funname":"canRead","Returntype":"bool","Args":"QIODevice * device"},{"Uniquefunname":"virtual bool canRead()","Funname":"canRead","Returntype":"virtual bool","Args":""},{"Uniquefunname":"virtual QByteArray name()","Funname":"name","Returntype":"virtual QByteArray","Args":""},{"Uniquefunname":"virtual QVariant option(ImageOption option)","Funname":"option","Returntype":"virtual QVariant","Args":"ImageOption option"},{"Uniquefunname":"virtual bool read(QImage * image)","Funname":"read","Returntype":"virtual bool","Args":"QImage * image"},{"Uniquefunname":"virtual void setOption(ImageOption option,const QVariant \u0026 value)","Funname":"setOption","Returntype":"virtual void","Args":"ImageOption option,const QVariant \u0026 value"},{"Uniquefunname":"virtual bool supportsOption(ImageOption option)","Funname":"supportsOption","Returntype":"virtual bool","Args":"ImageOption option"},{"Uniquefunname":" ~QSvgIOHandler()","Funname":"~QSvgIOHandler","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["QSVGIOHANDLER_H"]}]}
{"Filepath":"platformthemeplugin/diconengine.h","Functions":[{"Uniquefunname":"public DIconEngine(const QString \u0026 iconName)","Funname":"DIconEngine","Returntype":"public","Args":"const QString \u0026 iconName"},{"Uniquefunname":"QSize actualSize(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"actualSize","Returntype":"QSize","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QIconEngine * clone()","Funname":"clone","Returntype":"QIconEngine *","Args":""},{"Uniquefunname":"QString iconName()","Funname":"iconName","Returntype":"QString","Args":""},{"Uniquefunname":"QString key()","Funname":"key","Returntype":"QString","Args":""},{"Uniquefunname":"void paint(QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state)","Funname":"paint","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QPixmap pixmap(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"pixmap","Returntype":"QPixmap","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":" ~DIconEngine()","Funname":"~DIconEngine","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DICONENGINE_H"]}]}
{"Filepath":"platformthemeplugin/diconproxyengine.h","Functions":[{"Uniquefunname":"public DIconProxyEngine(const QIcon \u0026 proxyIcon)","Funname":"DIconProxyEngine","Returntype":"public","Args":"const QIcon \u0026 proxyIcon"},{"Uniquefunname":"QSize actualSize(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"actualSize","Returntype":"QSize","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QIconEngine * clone()","Funname":"clone","Returntype":"QIconEngine *","Args":""},{"Uniquefunname":"void paint(QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state)","Funname":"paint","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QPixmap pixmap(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"pixmap","Returntype":"QPixmap","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"bool read(QDataStream \u0026 in)","Funname":"read","Returntype":"bool","Args":"QDataStream \u0026 in"},{"Uniquefunname":"bool write(QDataStream \u0026 out)","Funname":"write","Returntype":"bool","Args":"QDataStream \u0026 out"}],"Records":[{"Name":"macro","Fields":["DICONPROXYENGINE_H"]}]}
{"Filepath":"platformthemeplugin/dthemesettings.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(QString iconThemeName READ iconThemeName NOTIFY iconThemeNameChanged)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"QString iconThemeName READ iconThemeName NOTIFY iconThemeNameChanged"},{"Uniquefunname":"bool autoScaleWindow()","Funname":"autoScaleWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void autoScaleWindowChanged(bool autoScaleWindow)","Funname":"autoScaleWindowChanged","Returntype":"void","Args":"bool autoScaleWindow"},{"Uniquefunname":"bool contains(const QString \u0026 key)","Funname":"contains","Returntype":"bool","Args":"const QString \u0026 key"},{"Uniquefunname":"QString fallbackIconThemeName()","Funname":"fallbackIconThemeName","Returntype":"QString","Args":""},{"Uniquefunname":"void fallbackIconThemeNameChanged(QString fallbackIconThemeName)","Funname":"fallbackIconThemeNameChanged","Returntype":"void","Args":"QString fallbackIconThemeName"},{"Uniquefunname":"QString iconThemeName()","Funname":"iconThemeName","Returntype":"QString","Args":""},{"Uniquefunname":"void iconThemeNameChanged(QString iconThemeName)","Funname":"iconThemeNameChanged","Returntype":"void","Args":"QString iconThemeName"},{"Uniquefunname":"bool isSetFallbackIconThemeName()","Funname":"isSetFallbackIconThemeName","Returntype":"bool","Args":""},{"Uniquefunname":"bool isSetIconThemeName()","Funname":"isSetIconThemeName","Returntype":"bool","Args":""},{"Uniquefunname":"bool isSetStyleNames()","Funname":"isSetStyleNames","Returntype":"bool","Args":""},{"Uniquefunname":"bool isSetSystemFixedFont()","Funname":"isSetSystemFixedFont","Returntype":"bool","Args":""},{"Uniquefunname":"bool isSetSystemFont()","Funname":"isSetSystemFont","Returntype":"bool","Args":""},{"Uniquefunname":"bool isSetSystemFontPixelSize()","Funname":"isSetSystemFontPixelSize","Returntype":"bool","Args":""},{"Uniquefunname":"QSettings * makeSettings()","Funname":"makeSettings","Returntype":"QSettings *","Args":""},{"Uniquefunname":"void onConfigChanged()","Funname":"onConfigChanged","Returntype":"void","Args":""},{"Uniquefunname":"qreal scaleFactor()","Funname":"scaleFactor","Returntype":"qreal","Args":""},{"Uniquefunname":"void scaleFactorChanged(const qreal \u0026 scaleFactor)","Funname":"scaleFactorChanged","Returntype":"void","Args":"const qreal \u0026 scaleFactor"},{"Uniquefunname":"QPair\u003cqreal,qreal\u003e scaleLogicalDpi()","Funname":"scaleLogicalDpi","Returntype":"QPair\u003cqreal,qreal\u003e","Args":""},{"Uniquefunname":"void scaleLogicalDpiChanged(const QPair\u003cqreal,qreal\u003e scaleLogicalDpi)","Funname":"scaleLogicalDpiChanged","Returntype":"void","Args":"const QPair\u003cqreal,qreal\u003e scaleLogicalDpi"},{"Uniquefunname":"QByteArray screenScaleFactors()","Funname":"screenScaleFactors","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void screenScaleFactorsChanged(const QByteArray \u0026 screenScaleFactors)","Funname":"screenScaleFactorsChanged","Returntype":"void","Args":"const QByteArray \u0026 screenScaleFactors"},{"Uniquefunname":"QStringList styleNames()","Funname":"styleNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"void styleNamesChanged(QStringList styleNames)","Funname":"styleNamesChanged","Returntype":"void","Args":"QStringList styleNames"},{"Uniquefunname":"QString systemFixedFont()","Funname":"systemFixedFont","Returntype":"QString","Args":""},{"Uniquefunname":"void systemFixedFontChanged(QString systemFixedFont)","Funname":"systemFixedFontChanged","Returntype":"void","Args":"QString systemFixedFont"},{"Uniquefunname":"QString systemFont()","Funname":"systemFont","Returntype":"QString","Args":""},{"Uniquefunname":"void systemFontChanged(QString systemFont)","Funname":"systemFontChanged","Returntype":"void","Args":"QString systemFont"},{"Uniquefunname":"qreal systemFontPointSize()","Funname":"systemFontPointSize","Returntype":"qreal","Args":""},{"Uniquefunname":"void systemFontPointSizeChanged(qreal systemFontPointSize)","Funname":"systemFontPointSizeChanged","Returntype":"void","Args":"qreal systemFontPointSize"},{"Uniquefunname":"int touchFlickBeginMoveDelay()","Funname":"touchFlickBeginMoveDelay","Returntype":"int","Args":""},{"Uniquefunname":"void touchFlickBeginMoveDelayChanged(int touchFlickBeginMoveDelay)","Funname":"touchFlickBeginMoveDelayChanged","Returntype":"void","Args":"int touchFlickBeginMoveDelay"},{"Uniquefunname":"signals valueChanged(const QString \u0026 key,const QVariant \u0026 oldValue,const QVariant \u0026 newValue)","Funname":"valueChanged","Returntype":"signals","Args":"const QString \u0026 key,const QVariant \u0026 oldValue,const QVariant \u0026 newValue"}],"Records":[{"Name":"macro","Fields":["DTHEMESETTINGS_H"]}]}
{"Filepath":"platformthemeplugin/qdeepinfiledialoghelper.h","Functions":[{"Uniquefunname":" QDeepinFileDialogHelper()","Funname":"QDeepinFileDialogHelper","Returntype":"","Args":""},{"Uniquefunname":"void applyOptions()","Funname":"applyOptions","Returntype":"void","Args":""},{"Uniquefunname":"bool defaultNameFilterDisables()","Funname":"defaultNameFilterDisables","Returntype":"bool","Args":""},{"Uniquefunname":"QUrl directory()","Funname":"directory","Returntype":"QUrl","Args":""},{"Uniquefunname":"void ensureDialog()","Funname":"ensureDialog","Returntype":"void","Args":""},{"Uniquefunname":"void exec()","Funname":"exec","Returntype":"void","Args":""},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"bool iAmFileDialogDBusServer()","Funname":"iAmFileDialogDBusServer","Returntype":"bool","Args":""},{"Uniquefunname":"void initDBusFileDialogManager()","Funname":"initDBusFileDialogManager","Returntype":"void","Args":""},{"Uniquefunname":"void selectFile(const QUrl \u0026 fileUrl)","Funname":"selectFile","Returntype":"void","Args":"const QUrl \u0026 fileUrl"},{"Uniquefunname":"void selectNameFilter(const QString \u0026 filter)","Funname":"selectNameFilter","Returntype":"void","Args":"const QString \u0026 filter"},{"Uniquefunname":"QList\u003cQUrl\u003e selectedFiles()","Funname":"selectedFiles","Returntype":"QList\u003cQUrl\u003e","Args":""},{"Uniquefunname":"QString selectedNameFilter()","Funname":"selectedNameFilter","Returntype":"QString","Args":""},{"Uniquefunname":"void setDirectory(const QUrl \u0026 directory)","Funname":"setDirectory","Returntype":"void","Args":"const QUrl \u0026 directory"},{"Uniquefunname":"void setFilter()","Funname":"setFilter","Returntype":"void","Args":""},{"Uniquefunname":"bool show(Qt::WindowFlags flags,Qt::WindowModality modality,QWindow * parent)","Funname":"show","Returntype":"bool","Args":"Qt::WindowFlags flags,Qt::WindowModality modality,QWindow * parent"},{"Uniquefunname":" ~QDeepinFileDialogHelper()","Funname":"~QDeepinFileDialogHelper","Returntype":"","Args":""}],"Records":[{"Name":"enum:CustomWidgetType","Fields":["ComboBoxType","LineEditType"]},{"Name":"macro","Fields":["QDEEPINFILEDIALOGHELPER_H"]}]}
{"Filepath":"platformthemeplugin/qdeepintheme.h","Functions":[{"Uniquefunname":"public QDeepinTheme()","Funname":"QDeepinTheme","Returntype":"public","Args":""},{"Uniquefunname":"QIconEngine * createIconEngine(const QString \u0026 iconName)","Funname":"createIconEngine","Returntype":"QIconEngine *","Args":"const QString \u0026 iconName"},{"Uniquefunname":"QPlatformDialogHelper * createPlatformDialogHelper(DialogType type)","Funname":"createPlatformDialogHelper","Returntype":"QPlatformDialogHelper *","Args":"DialogType type"},{"Uniquefunname":"const QFont * font(Font type)","Funname":"font","Returntype":"const QFont *","Args":"Font type"},{"Uniquefunname":"DThemeSettings * getSettings()","Funname":"getSettings","Returntype":"DThemeSettings *","Args":""},{"Uniquefunname":"const QPalette * palette(Palette type)","Funname":"palette","Returntype":"const QPalette *","Args":"Palette type"},{"Uniquefunname":"DThemeSettings * settings()","Funname":"settings","Returntype":"DThemeSettings *","Args":""},{"Uniquefunname":"QPixmap standardPixmap(StandardPixmap sp,const QSizeF \u0026 size)","Funname":"standardPixmap","Returntype":"QPixmap","Args":"StandardPixmap sp,const QSizeF \u0026 size"},{"Uniquefunname":"QVariant themeHint(ThemeHint hint)","Funname":"themeHint","Returntype":"QVariant","Args":"ThemeHint hint"},{"Uniquefunname":"bool usePlatformNativeDialog(DialogType type)","Funname":"usePlatformNativeDialog","Returntype":"bool","Args":"DialogType type"},{"Uniquefunname":" ~QDeepinTheme()","Funname":"~QDeepinTheme","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["QDEEPINTHEME_H"]}]}
{"Filepath":"platformthemeplugin/xdgiconenginecreator.h","Functions":[{"Uniquefunname":"public create(const QString \u0026 name)","Funname":"create","Returntype":"public","Args":"const QString \u0026 name"}],"Records":[{"Name":"macro","Fields":["XDGICONENGINECREATOR_H"]}]}
{"Filepath":"src/dpluginloader.h","Functions":[{"Uniquefunname":"    static FactoryInterface *load(const QString \u0026baseName)","Funname":"load","Returntype":"template\u003cclass FactoryInterface\u003e FactoryInterface *","Args":"const QString \u0026 baseName"},{"Uniquefunname":"    static QString pluginName(const QString \u0026baseName)","Funname":"pluginName","Returntype":"QString","Args":"const QString \u0026 baseName"},{"Uniquefunname":"    static QFunctionPointer resolve(const char *symbol)","Funname":"resolve","Returntype":"QFunctionPointer","Args":"const char * symbol"},{"Uniquefunname":"    static QString resolveFromPSM(const QString \u0026moduleName)","Funname":"resolveFromPSM","Returntype":"QString","Args":"const QString \u0026 moduleName"},{"Uniquefunname":"    static QString soAbsoluteFilePath()","Funname":"soAbsoluteFilePath","Returntype":"public","Args":""}],"Records":[{"Name":"macro","Fields":["DPLUGINLOADER_H","VERSION_STR_SYMBOL"]}]}
{"Filepath":"styleplugins/chameleon/chameleonstyle.h","Functions":[{"Uniquefunname":"public ChameleonStyle()","Funname":"ChameleonStyle","Returntype":"public","Args":""},{"Uniquefunname":"void _q_removeAnimation()","Funname":"_q_removeAnimation","Returntype":"void","Args":""},{"Uniquefunname":"public animation(const QObject * target)","Funname":"animation","Returntype":"public","Args":"const QObject * target"},{"Uniquefunname":"void drawBorder(QPainter * p,const QStyleOption * opt,const QWidget * w)","Funname":"drawBorder","Returntype":"void","Args":"QPainter * p,const QStyleOption * opt,const QWidget * w"},{"Uniquefunname":"void drawButtonBoxButton(const DStyleOptionButtonBoxButton * btnopt,QPainter * p,const QRect \u0026 rect,int radius)","Funname":"drawButtonBoxButton","Returntype":"void","Args":"const DStyleOptionButtonBoxButton * btnopt,QPainter * p,const QRect \u0026 rect,int radius"},{"Uniquefunname":"QRect drawButtonDownArrow(const QStyleOption * opt,QPainter * p,const QWidget * w)","Funname":"drawButtonDownArrow","Returntype":"QRect","Args":"const QStyleOption * opt,QPainter * p,const QWidget * w"},{"Uniquefunname":"void drawCalenderEllipse(QPainter * p,const QRect \u0026 rect,int offset)","Funname":"drawCalenderEllipse","Returntype":"void","Args":"QPainter * p,const QRect \u0026 rect,int offset"},{"Uniquefunname":"bool drawComboBox(QPainter * painter,const QStyleOptionComboBox * comboBox,const QWidget * widget)","Funname":"drawComboBox","Returntype":"bool","Args":"QPainter * painter,const QStyleOptionComboBox * comboBox,const QWidget * widget"},{"Uniquefunname":"bool drawComboBoxLabel(QPainter * painter,const QStyleOptionComboBox * cb,const QWidget * widget)","Funname":"drawComboBoxLabel","Returntype":"bool","Args":"QPainter * painter,const QStyleOptionComboBox * cb,const QWidget * widget"},{"Uniquefunname":"bool drawMenuBarItem(const QStyleOptionMenuItem * option,QRect \u0026 rect,QPainter * painter,const QWidget * widget)","Funname":"drawMenuBarItem","Returntype":"bool","Args":"const QStyleOptionMenuItem * option,QRect \u0026 rect,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawMenuItem(const QStyleOptionMenuItem * option,QPainter * painter,const QWidget * widget)","Funname":"drawMenuItem","Returntype":"bool","Args":"const QStyleOptionMenuItem * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"void drawMenuItemBackground(const QStyleOption * option,QPainter * painter,QStyleOptionMenuItem::MenuItemType type)","Funname":"drawMenuItemBackground","Returntype":"void","Args":"const QStyleOption * option,QPainter * painter,QStyleOptionMenuItem::MenuItemType type"},{"Uniquefunname":"protected drawMenuItemRedPoint(const QStyleOptionMenuItem * option,QPainter * painter,const QWidget * widget)","Funname":"drawMenuItemRedPoint","Returntype":"protected","Args":"const QStyleOptionMenuItem * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"void drawRoundedShadow(QPainter * p,const QRect \u0026 rect,const QColor \u0026 color,int frame_radius)","Funname":"drawRoundedShadow","Returntype":"void","Args":"QPainter * p,const QRect \u0026 rect,const QColor \u0026 color,int frame_radius"},{"Uniquefunname":"private drawShadow(QPainter * p,const QRect \u0026 rect,const QColor \u0026 color)","Funname":"drawShadow","Returntype":"private","Args":"QPainter * p,const QRect \u0026 rect,const QColor \u0026 color"},{"Uniquefunname":"void drawSliderHandle(const QStyleOptionComplex * opt,QRectF \u0026 rectHandle,QPainter * p,const QWidget * w)","Funname":"drawSliderHandle","Returntype":"void","Args":"const QStyleOptionComplex * opt,QRectF \u0026 rectHandle,QPainter * p,const QWidget * w"},{"Uniquefunname":"void drawSliderHandleFocus(const QStyleOptionComplex * opt,QRectF \u0026 rectHandle,QPainter * p,const QWidget * w)","Funname":"drawSliderHandleFocus","Returntype":"void","Args":"const QStyleOptionComplex * opt,QRectF \u0026 rectHandle,QPainter * p,const QWidget * w"},{"Uniquefunname":"bool drawSpinBox(const QStyleOptionSpinBox * opt,QPainter * painter,const QWidget * widget)","Funname":"drawSpinBox","Returntype":"bool","Args":"const QStyleOptionSpinBox * opt,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawTabBar(QPainter * painter,const QStyleOptionTab * tab,const QWidget * widget)","Funname":"drawTabBar","Returntype":"bool","Args":"QPainter * painter,const QStyleOptionTab * tab,const QWidget * widget"},{"Uniquefunname":"bool drawTabBarCloseButton(QPainter * painter,const QStyleOption * tab,const QWidget * widget)","Funname":"drawTabBarCloseButton","Returntype":"bool","Args":"QPainter * painter,const QStyleOption * tab,const QWidget * widget"},{"Uniquefunname":"bool drawTabBarLabel(QPainter * painter,const QStyleOptionTab * tab,const QWidget * widget)","Funname":"drawTabBarLabel","Returntype":"bool","Args":"QPainter * painter,const QStyleOptionTab * tab,const QWidget * widget"},{"Uniquefunname":"bool drawTabBarScrollButton(QPainter * painter,const QStyleOption * opt,const QWidget * buttonWidget)","Funname":"drawTabBarScrollButton","Returntype":"bool","Args":"QPainter * painter,const QStyleOption * opt,const QWidget * buttonWidget"},{"Uniquefunname":"QMargins frameExtentMargins()","Funname":"frameExtentMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"QBrush generatedBrush(StateFlags flags,const QBrush \u0026 base,QPalette::ColorGroup cg,QPalette::ColorRole role,const QStyleOption * option)","Funname":"generatedBrush","Returntype":"QBrush","Args":"StateFlags flags,const QBrush \u0026 base,QPalette::ColorGroup cg,QPalette::ColorRole role,const QStyleOption * option"},{"Uniquefunname":"QColor getColor(const QStyleOption * option,DPalette::ColorType type,const QWidget * widget)","Funname":"getColor","Returntype":"QColor","Args":"const QStyleOption * option,DPalette::ColorType type,const QWidget * widget"},{"Uniquefunname":"QColor getColor(const QStyleOption * option,QPalette::ColorRole role)","Funname":"getColor","Returntype":"QColor","Args":"const QStyleOption * option,QPalette::ColorRole role"},{"Uniquefunname":"bool isNoticks(const QStyleOptionSlider * slider,QPainter * p,const QWidget * w)","Funname":"isNoticks","Returntype":"bool","Args":"const QStyleOptionSlider * slider,QPainter * p,const QWidget * w"},{"Uniquefunname":"void polish(QWidget * w)","Funname":"polish","Returntype":"void","Args":"QWidget * w"},{"Uniquefunname":"void tabLayout(const QStyleOptionTab * opt,const QWidget * widget,QRect * textRect,QRect * iconRect)","Funname":"tabLayout","Returntype":"void","Args":"const QStyleOptionTab * opt,const QWidget * widget,QRect * textRect,QRect * iconRect"},{"Uniquefunname":"void unpolish(QApplication * application)","Funname":"unpolish","Returntype":"void","Args":"QApplication * application"},{"Uniquefunname":"void unpolish(QWidget * w)","Funname":"unpolish","Returntype":"void","Args":"QWidget * w"},{"Uniquefunname":"void updateSpinBoxButtonState(const QStyleOptionSpinBox * opt,QStyleOptionButton \u0026 buttonOpt,bool isActive,bool isEnabled)","Funname":"updateSpinBoxButtonState","Returntype":"void","Args":"const QStyleOptionSpinBox * opt,QStyleOptionButton \u0026 buttonOpt,bool isActive,bool isEnabled"}],"Records":[{"Name":"macro","Fields":["CHAMELEONSTYLE_H"]}]}
{"Filepath":"styleplugins/chameleon/common.h","Functions":null,"Records":[{"Name":"enum:Corner","Fields":["AllCorners","CornerBottomLeft","CornerBottomRight","CornerTopLeft","CornerTopRight","CornersBottom","CornersLeft","CornersRight","CornersTop"]},{"Name":"enum:Metrics","Fields":["Button_ItemSpacing","Button_MarginWidth","Button_MinWidth","CheckBox_FocusMarginWidth","CheckBox_FrameWidth","CheckBox_ItemSpacing","CheckBox_Size","ComboBox_ArrowButtonWidth","ComboBox_FrameWidth","Frame_BorderSpacing","Frame_FrameRadius","Frame_FrameWidth","GroupBox_TitleMarginWidth","GroupBox_TopMargin","Header_ArrowSize","Header_ItemSpacing","Header_MarginWidth","Icon_Margins","Icon_Size","ItemView_ArrowSize","ItemView_ItemMarginWidth","Layout_ChildMarginWidth","Layout_DefaultSpacing","Layout_TopLevelMarginWidth","LineEdit_FrameWidth","LineEdit_LeftMargin","MenuBarItem_MarginHeight","MenuBarItem_MarginWidth","MenuBar_ItemSpacing","MenuButton_IndicatorMargin","MenuItem_AcceleratorSpace","MenuItem_ItemSpacing","MenuItem_MarginWidth","MenuItem_TabSpacing","Menu_ArrowHMargin","Menu_CheckMarkWidth","Menu_FrameWidth","Menu_HMargin","Menu_ItemFrameWidth","Menu_ItemHMargin","Menu_ItemHTextMargin","Menu_ItemVMargin","Menu_ItemVTextMargin","Menu_PanelRightPadding","Menu_RightBorder","Menu_SeparatorItemHMargin","Menu_VMargin","Painter_PenWidth","ProgressBar_BorderWidth","ProgressBar_BusyIndicatorSize","ProgressBar_ItemSpacing","ProgressBar_MinimumStyleHeight","ProgressBar_Radius","ScrollBar_DoubleButtonHeight","ScrollBar_Extend","ScrollBar_MinSliderHeight","ScrollBar_NoButtonHeight","ScrollBar_SingleButtonHeight","ScrollBar_SliderMinWidget","ScrollBar_SliderWidth","Shadow_Overlap","Shadow_Radius","Shadow_XOffset","Shadow_YOffset","SidePanel_ItemMarginWidth","Slider_ControlThickness","Slider_GrooveThickness","Slider_TickLength","Slider_TickMarginWidth","Slider_TickmarkOffset","SpinBox_ArrowButtonWidth","SpinBox_ButtonIconWidth","SpinBox_FrameWidth","SpinBox_MiniHeight","Splitter_SplitterWidth","TabBar_BaseOverlap","TabBar_TabItemSpacing","TabBar_TabMargin","TabBar_TabMarginHeight","TabBar_TabMarginWidth","TabBar_TabMinHeight","TabBar_TabMinWidth","TabBar_TabOverlap","TabWidget_MarginWidth","TitleBar_MarginWidth","ToolBar_ExtensionWidth","ToolBar_FrameWidth","ToolBar_HandleExtent","ToolBar_HandleWidth","ToolBar_ItemSpacing","ToolBar_SeparatorWidth","ToolBox_TabItemSpacing","ToolBox_TabMarginWidth","ToolBox_TabMinWidth","ToolButton_AlignCenterPadding","ToolButton_AlignLeftMargin","ToolButton_AlignLeftPadding","ToolButton_AlignRightPadding","ToolButton_InlineIndicatorWidth","ToolButton_ItemSpacing","ToolButton_MarginWidth","ToolTip_FrameWidth"]},{"Name":"macro","Fields":["COMMON_H"]}]}
{"Filepath":"styleplugins/dstyleplugin/colorutils.h","Functions":[{"Uniquefunname":"public alphaColor(QColor color,qreal alpha)","Funname":"alphaColor","Returntype":"public","Args":"QColor color,qreal alpha"}],"Records":[{"Name":"macro","Fields":["COLORUTILS_H"]}]}
{"Filepath":"styleplugins/dstyleplugin/common.h","Functions":null,"Records":[{"Name":"enum:Corner","Fields":["AllCorners","CornerBottomLeft","CornerBottomRight","CornerTopLeft","CornerTopRight","CornersBottom","CornersLeft","CornersRight","CornersTop"]},{"Name":"enum:Metrics","Fields":["Button_ItemSpacing","Button_MarginWidth","Button_MinWidth","CheckBox_FocusMarginWidth","CheckBox_ItemSpacing","CheckBox_Size","ComboBox_FrameWidth","Frame_FrameRadius","Frame_FrameWidth","GroupBox_TitleMarginWidth","GroupBox_TopMargin","Header_ArrowSize","Header_ItemSpacing","Header_MarginWidth","ItemView_ArrowSize","ItemView_ItemMarginWidth","Layout_ChildMarginWidth","Layout_DefaultSpacing","Layout_TopLevelMarginWidth","LineEdit_FrameWidth","LineEdit_LeftMargin","MenuBarItem_MarginHeight","MenuBarItem_MarginWidth","MenuBar_ItemSpacing","MenuButton_IndicatorWidth","MenuItem_AcceleratorSpace","MenuItem_ItemSpacing","MenuItem_MarginWidth","Menu_ArrowHMargin","Menu_CheckMarkWidth","Menu_FrameWidth","Menu_HMargin","Menu_ItemFrameWidth","Menu_ItemHMargin","Menu_ItemHTextMargin","Menu_ItemVMargin","Menu_ItemVTextMargin","Menu_PanelRightPadding","Menu_RightBorder","Menu_SeparatorItemHMargin","Menu_VMargin","Painter_PenWidth","ProgressBar_BorderWidth","ProgressBar_BusyIndicatorSize","ProgressBar_ItemSpacing","ProgressBar_Radius","ScrollBar_DoubleButtonHeight","ScrollBar_Extend","ScrollBar_MinSliderHeight","ScrollBar_NoButtonHeight","ScrollBar_SingleButtonHeight","ScrollBar_SliderWidth","Shadow_Overlap","SidePanel_ItemMarginWidth","Slider_ControlThickness","Slider_GrooveThickness","Slider_TickLength","Slider_TickMarginWidth","SpinBox_ArrowButtonWidth","SpinBox_FrameWidth","Splitter_SplitterWidth","TabBar_BaseOverlap","TabBar_TabItemSpacing","TabBar_TabMarginHeight","TabBar_TabMarginWidth","TabBar_TabMinHeight","TabBar_TabMinWidth","TabBar_TabOverlap","TabWidget_MarginWidth","TitleBar_MarginWidth","ToolBar_ExtensionWidth","ToolBar_FrameWidth","ToolBar_HandleExtent","ToolBar_HandleWidth","ToolBar_ItemSpacing","ToolBar_SeparatorWidth","ToolBox_TabItemSpacing","ToolBox_TabMarginWidth","ToolBox_TabMinWidth","ToolButton_InlineIndicatorWidth","ToolButton_ItemSpacing","ToolButton_MarginWidth","ToolTip_FrameWidth"]},{"Name":"macro","Fields":["COMMON_H"]},{"Name":"enum:StyleType","Fields":["StyleDark","StyleLight","StyleSemiDark","StyleSemiLight"]}]}
{"Filepath":"styleplugins/dstyleplugin/commonhelper.h","Functions":[{"Uniquefunname":"public renderFrame(QPainter * painter,const QRect \u0026 rect,const QBrush \u0026 brush,const QBrush \u0026 outline)","Funname":"renderFrame","Returntype":"public","Args":"QPainter * painter,const QRect \u0026 rect,const QBrush \u0026 brush,const QBrush \u0026 outline"},{"Uniquefunname":"Style * widgetStyle(const QWidget * widget)","Funname":"widgetStyle","Returntype":"Style *","Args":"const QWidget * widget"}],"Records":[{"Name":"macro","Fields":["COMMONHELPER_H"]}]}
{"Filepath":"styleplugins/dstyleplugin/dstyleanimation.h","Functions":[{"Uniquefunname":" DBlendStyleAnimation(Type type,QObject * target)","Funname":"DBlendStyleAnimation","Returntype":"","Args":"Type type,QObject * target"},{"Uniquefunname":"Q_OBJECT public DNumberStyleAnimation(QObject * target)","Funname":"DNumberStyleAnimation","Returntype":"Q_OBJECT public","Args":"QObject * target"},{"Uniquefunname":"Q_OBJECT public DProgressStyleAnimation(int speed,QObject * target)","Funname":"DProgressStyleAnimation","Returntype":"Q_OBJECT public","Args":"int speed,QObject * target"},{"Uniquefunname":" DScrollbarStyleAnimation(Mode mode,QObject * target)","Funname":"DScrollbarStyleAnimation","Returntype":"","Args":"Mode mode,QObject * target"},{"Uniquefunname":"Q_OBJECT public DStyleAnimation(QObject * target)","Funname":"DStyleAnimation","Returntype":"Q_OBJECT public","Args":"QObject * target"},{"Uniquefunname":"int animationStep()","Funname":"animationStep","Returntype":"int","Args":""},{"Uniquefunname":"QImage currentImage()","Funname":"currentImage","Returntype":"QImage","Args":""},{"Uniquefunname":"qreal currentValue()","Funname":"currentValue","Returntype":"qreal","Args":""},{"Uniquefunname":"int delay()","Funname":"delay","Returntype":"int","Args":""},{"Uniquefunname":"int duration()","Funname":"duration","Returntype":"int","Args":""},{"Uniquefunname":"QImage endImage()","Funname":"endImage","Returntype":"QImage","Args":""},{"Uniquefunname":"qreal endValue()","Funname":"endValue","Returntype":"qreal","Args":""},{"Uniquefunname":"FrameRate frameRate()","Funname":"frameRate","Returntype":"FrameRate","Args":""},{"Uniquefunname":"protected isUpdateNeeded()","Funname":"isUpdateNeeded","Returntype":"protected","Args":""},{"Uniquefunname":"protected isUpdateNeeded()","Funname":"isUpdateNeeded","Returntype":"protected","Args":""},{"Uniquefunname":"Mode mode()","Funname":"mode","Returntype":"Mode","Args":""},{"Uniquefunname":"int progressStep(int width)","Funname":"progressStep","Returntype":"int","Args":"int width"},{"Uniquefunname":"void setActive(bool active)","Funname":"setActive","Returntype":"void","Args":"bool active"},{"Uniquefunname":"void setDelay(int delay)","Funname":"setDelay","Returntype":"void","Args":"int delay"},{"Uniquefunname":"void setDuration(int duration)","Funname":"setDuration","Returntype":"void","Args":"int duration"},{"Uniquefunname":"void setEndImage(const QImage \u0026 image)","Funname":"setEndImage","Returntype":"void","Args":"const QImage \u0026 image"},{"Uniquefunname":"void setEndValue(qreal value)","Funname":"setEndValue","Returntype":"void","Args":"qreal value"},{"Uniquefunname":"void setFrameRate(FrameRate fps)","Funname":"setFrameRate","Returntype":"void","Args":"FrameRate fps"},{"Uniquefunname":"void setSpeed(int speed)","Funname":"setSpeed","Returntype":"void","Args":"int speed"},{"Uniquefunname":"void setStartImage(const QImage \u0026 image)","Funname":"setStartImage","Returntype":"void","Args":"const QImage \u0026 image"},{"Uniquefunname":"void setStartTime(const QTime \u0026 time)","Funname":"setStartTime","Returntype":"void","Args":"const QTime \u0026 time"},{"Uniquefunname":"void setStartValue(qreal value)","Funname":"setStartValue","Returntype":"void","Args":"qreal value"},{"Uniquefunname":"int speed()","Funname":"speed","Returntype":"int","Args":""},{"Uniquefunname":"public Q_SLOTS start()","Funname":"start","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"QImage startImage()","Funname":"startImage","Returntype":"QImage","Args":""},{"Uniquefunname":"QTime startTime()","Funname":"startTime","Returntype":"QTime","Args":""},{"Uniquefunname":"qreal startValue()","Funname":"startValue","Returntype":"qreal","Args":""},{"Uniquefunname":"QObject * target()","Funname":"target","Returntype":"QObject *","Args":""},{"Uniquefunname":"protected updateCurrentTime(int time)","Funname":"updateCurrentTime","Returntype":"protected","Args":"int time"},{"Uniquefunname":"virtual void updateCurrentTime(int time)","Funname":"updateCurrentTime","Returntype":"virtual void","Args":"int time"},{"Uniquefunname":"void updateTarget()","Funname":"updateTarget","Returntype":"void","Args":""},{"Uniquefunname":"bool wasActive()","Funname":"wasActive","Returntype":"bool","Args":""},{"Uniquefunname":"virtual ~DStyleAnimation()","Funname":"~DStyleAnimation","Returntype":"virtual","Args":""}],"Records":[{"Name":"enum:Mode","Fields":["Activating","Deactivating"]},{"Name":"enum:FrameRate","Fields":["DefaultFps","SixtyFps","ThirtyFps","TwentyFps"]},{"Name":"enum:Type","Fields":["Pulse","Transition"]},{"Name":"macro","Fields":["QSTYLEANIMATION"]}]}
{"Filepath":"styleplugins/dstyleplugin/dstyleplugin.h","Functions":[{"Uniquefunname":"QStyle * create(const QString \u0026 key)","Funname":"create","Returntype":"QStyle *","Args":"const QString \u0026 key"}],"Records":[{"Name":"macro","Fields":["DStylePlugin_H"]}]}
{"Filepath":"styleplugins/dstyleplugin/geometryutils.h","Functions":[{"Uniquefunname":"public centerRect(const QRect \u0026 rect,const QSize \u0026 size)","Funname":"centerRect","Returntype":"public","Args":"const QRect \u0026 rect,const QSize \u0026 size"},{"Uniquefunname":"QRect centerRect(const QRect \u0026 rect,int width,int height)","Funname":"centerRect","Returntype":"QRect","Args":"const QRect \u0026 rect,int width,int height"},{"Uniquefunname":"QRect insideMargin(const QRect \u0026 r,int margin)","Funname":"insideMargin","Returntype":"QRect","Args":"const QRect \u0026 r,int margin"},{"Uniquefunname":"QRect insideMargin(const QRect \u0026 r,int marginWidth,int marginHeight)","Funname":"insideMargin","Returntype":"QRect","Args":"const QRect \u0026 r,int marginWidth,int marginHeight"},{"Uniquefunname":"    static QRectF shadowRect( const QRectF\u0026 rect )","Funname":"shadowRect","Returntype":"QRectF","Args":"const QRectF \u0026 rect"}],"Records":[{"Name":"macro","Fields":["GEOMETRYUTILS_H"]}]}
{"Filepath":"styleplugins/dstyleplugin/hidpihelper.h","Functions":null,"Records":[{"Name":"macro","Fields":["HIDPIHELPER_H"]}]}
{"Filepath":"styleplugins/dstyleplugin/painterhelper.h","Functions":[{"Uniquefunname":"QColor colorBlend(const QColor \u0026 color1,const QColor \u0026 color2)","Funname":"colorBlend","Returntype":"QColor","Args":"const QColor \u0026 color1,const QColor \u0026 color2"},{"Uniquefunname":"QPainterPath roundedPath(const QRectF \u0026 rect,Corners corners,qreal radius)","Funname":"roundedPath","Returntype":"QPainterPath","Args":"const QRectF \u0026 rect,Corners corners,qreal radius"}],"Records":[{"Name":"macro","Fields":["PAINTERHELPER_H"]}]}
{"Filepath":"styleplugins/dstyleplugin/paletteextended.h","Functions":[{"Uniquefunname":"private init(StyleType type)","Funname":"init","Returntype":"private","Args":"StyleType type"},{"Uniquefunname":"Q_OBJECT public instance(StyleType type)","Funname":"instance","Returntype":"Q_OBJECT public","Args":"StyleType type"},{"Uniquefunname":"void polish(QPalette \u0026 p)","Funname":"polish","Returntype":"void","Args":"QPalette \u0026 p"},{"Uniquefunname":" ~PaletteExtended()","Funname":"~PaletteExtended","Returntype":"","Args":""}],"Records":[{"Name":"enum:BrushName","Fields":["CheckBox_BackgroundBrush","HeaderView_ArrowIndicatorDownIcon","HeaderView_ArrowIndicatorUpIcon","LineEdit_AlertBorderBrush","LineEdit_BackgroundBrush","LineEdit_BorderBrush","Menu_BackgroundBrush","Menu_BorderColor","Menu_SeparatorColor","ProgressBar_ContentBackground","ProgressBar_ContentBorder","ProgressBar_GrooveBackground","ProgressBar_GrooveBorder","PushButton_BackgroundBrush","PushButton_BorderBrush","PushButton_SuggestButtonColor","PushButton_SuggestTextColor","PushButton_TextColor","QPalette_Base","QPalette_Button","QPalette_ButtonText","QPalette_Highlight","QPalette_HighlightedText","QPalette_Text","QPalette_Window","QPalette_WindowText","RadioButton_BackgroundBrush","RubberBand_BackgroundBrush","RubberBand_BorderBrush","ScrollBar_HandleBorderBrush","ScrollBar_HandleBrush","Slider_GrooveColor","Slider_GrooveHighlightColor","Slider_HandleBorderColor","Slider_HandleBrush","Slider_TickmarkColor","Slider_VernierHandleBrush","SpinBox_BorderColor","SpinBox_DownBrush","SpinBox_MinusBrush","SpinBox_PlusBrush","SpinBox_UpBrush","TabBarAddButton_BackgroundBrush","TabBarAddButton_Icon","TabBarScrollButton_BackgroundBrush","TabBarScrollButton_DownIcon","TabBarScrollButton_UpIcon","TabBarTab_ActiveColor","TabBarTab_BackgroundBrush","TabBarTab_BorderBrush","TabBarTab_CloseIcon","TabBarTab_CloseIconBackground","TabBarTab_TextColor","TabBar_BackgroundBrush","TabBar_BorderBrush"]},{"Name":"macro","Fields":["PALETTEEXTENDED_H"]},{"Name":"enum:PseudoClassType","Fields":["PseudoClass_Active","PseudoClass_Alternate","PseudoClass_Any","PseudoClass_Bottom","PseudoClass_Checked","PseudoClass_Children","PseudoClass_Closable","PseudoClass_Closed","PseudoClass_Default","PseudoClass_Disabled","PseudoClass_EditFocus","PseudoClass_Editable","PseudoClass_Enabled","PseudoClass_Exclusive","PseudoClass_First","PseudoClass_Flat","PseudoClass_Floatable","PseudoClass_Focus","PseudoClass_Frameless","PseudoClass_Horizontal","PseudoClass_Hover","PseudoClass_Indeterminate","PseudoClass_Item","PseudoClass_Last","PseudoClass_Left","PseudoClass_Maximized","PseudoClass_Middle","PseudoClass_Minimized","PseudoClass_Movable","PseudoClass_NextSelected","PseudoClass_NonExclusive","PseudoClass_Off","PseudoClass_On","PseudoClass_OnlyOne","PseudoClass_Open","PseudoClass_Pressed","PseudoClass_PreviousSelected","PseudoClass_ReadOnly","PseudoClass_Right","PseudoClass_Selected","PseudoClass_Sibling","PseudoClass_Top","PseudoClass_Unchecked","PseudoClass_Unknown","PseudoClass_Unspecified","PseudoClass_Vertical","PseudoClass_Window"]}]}
{"Filepath":"styleplugins/dstyleplugin/style.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PUBLIC(Style)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"Style"},{"Uniquefunname":"Q_OBJECT public Style(StyleType style)","Funname":"Style","Returntype":"Q_OBJECT public","Args":"StyleType style"},{"Uniquefunname":"void _q_removeAnimation()","Funname":"_q_removeAnimation","Returntype":"void","Args":""},{"Uniquefunname":"void _q_updateAppFont()","Funname":"_q_updateAppFont","Returntype":"void","Args":""},{"Uniquefunname":"DStyleAnimation * animation(const QObject * target)","Funname":"animation","Returntype":"DStyleAnimation *","Args":"const QObject * target"},{"Uniquefunname":"QColor backgroundColor(const QPalette \u0026 pal,const QWidget * widget)","Funname":"backgroundColor","Returntype":"QColor","Args":"const QPalette \u0026 pal,const QWidget * widget"},{"Uniquefunname":"QColor buttonColor(const QPalette \u0026 pal)","Funname":"buttonColor","Returntype":"QColor","Args":"const QPalette \u0026 pal"},{"Uniquefunname":"QRect comboBoxSubControlRect(const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget)","Funname":"comboBoxSubControlRect","Returntype":"QRect","Args":"const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget"},{"Uniquefunname":"QColor darkShade()","Funname":"darkShade","Returntype":"QColor","Args":""},{"Uniquefunname":"bool drawComboBox(const QStyleOptionComplex * option,QPainter * painter,const QWidget * widget)","Funname":"drawComboBox","Returntype":"bool","Args":"const QStyleOptionComplex * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawComboBoxLabelControl(const QStyleOption * option,QPainter * painter,const QWidget *)","Funname":"drawComboBoxLabelControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget *"},{"Uniquefunname":"void drawComboBoxPopupFramePrimitive(const QStyleOption * option,QPainter * painter)","Funname":"drawComboBoxPopupFramePrimitive","Returntype":"void","Args":"const QStyleOption * option,QPainter * painter"},{"Uniquefunname":"void drawComplexControl(ComplexControl cc,const QStyleOptionComplex * opt,QPainter * p,const QWidget * w)","Funname":"drawComplexControl","Returntype":"void","Args":"ComplexControl cc,const QStyleOptionComplex * opt,QPainter * p,const QWidget * w"},{"Uniquefunname":"void drawControl(ControlElement element,const QStyleOption * opt,QPainter * p,const QWidget * w)","Funname":"drawControl","Returntype":"void","Args":"ControlElement element,const QStyleOption * opt,QPainter * p,const QWidget * w"},{"Uniquefunname":"void drawDeepinStyleIcon(const QString \u0026 name,const QStyleOption * opt,QPainter * p,const QWidget * widget)","Funname":"drawDeepinStyleIcon","Returntype":"void","Args":"const QString \u0026 name,const QStyleOption * opt,QPainter * p,const QWidget * widget"},{"Uniquefunname":"bool drawFrameFocusRectPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawFrameFocusRectPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawFrameLineEditPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawFrameLineEditPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawFramePrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawFramePrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawFrameTabBarBasePrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawFrameTabBarBasePrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawFrameTabWidgetPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawFrameTabWidgetPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawIndicatorCheckBoxPrimitive(const QStyleOption *,QPainter *,const QWidget * widget)","Funname":"drawIndicatorCheckBoxPrimitive","Returntype":"bool","Args":"const QStyleOption *,QPainter *,const QWidget * widget"},{"Uniquefunname":"bool drawIndicatorHeaderArrowPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawIndicatorHeaderArrowPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawIndicatorTabClosePrimitive(const QStyleOption * opt,QPainter * p,const QWidget * widget)","Funname":"drawIndicatorTabClosePrimitive","Returntype":"bool","Args":"const QStyleOption * opt,QPainter * p,const QWidget * widget"},{"Uniquefunname":"void drawItemPixmap(QPainter * painter,const QRect \u0026 rect,int alignment,const QPixmap \u0026 pixmap)","Funname":"drawItemPixmap","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,int alignment,const QPixmap \u0026 pixmap"},{"Uniquefunname":"bool drawMenuBarItemControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawMenuBarItemControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawMenuItemControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawMenuItemControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawPanelButtonToolPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawPanelButtonToolPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"void drawPrimitive(PrimitiveElement pe,const QStyleOption * opt,QPainter * p,const QWidget * w)","Funname":"drawPrimitive","Returntype":"void","Args":"PrimitiveElement pe,const QStyleOption * opt,QPainter * p,const QWidget * w"},{"Uniquefunname":"bool drawProgressBarContentsControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawProgressBarContentsControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawProgressBarControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawProgressBarControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawProgressBarGrooveControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawProgressBarGrooveControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawProgressBarLabelControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawProgressBarLabelControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawPushButtonBevel(const QStyleOption *,QPainter *,const QWidget *)","Funname":"drawPushButtonBevel","Returntype":"bool","Args":"const QStyleOption *,QPainter *,const QWidget *"},{"Uniquefunname":"bool drawPushButtonLabel(const QStyleOption *,QPainter *,const QWidget *)","Funname":"drawPushButtonLabel","Returntype":"bool","Args":"const QStyleOption *,QPainter *,const QWidget *"},{"Uniquefunname":"bool drawRubberBandControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawRubberBandControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawScrollBarSliderControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawScrollBarSliderControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawScrollButtonLabelControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawScrollButtonLabelControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawScrollButtonPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawScrollButtonPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawShapedFrameControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawShapedFrameControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawSlider(const QStyleOptionComplex * option,QPainter * painter,const QWidget * widget)","Funname":"drawSlider","Returntype":"bool","Args":"const QStyleOptionComplex * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"void drawSliderGroove(QPainter *,const QRect \u0026,const QBrush \u0026 brush)","Funname":"drawSliderGroove","Returntype":"void","Args":"QPainter *,const QRect \u0026,const QBrush \u0026 brush"},{"Uniquefunname":"void drawSliderHandle(QPainter * painter,const QStyleOptionSlider * option,const QRect \u0026 rect,const QString \u0026 type)","Funname":"drawSliderHandle","Returntype":"void","Args":"QPainter * painter,const QStyleOptionSlider * option,const QRect \u0026 rect,const QString \u0026 type"},{"Uniquefunname":"bool drawSliderTickmarkLabels(const QStyleOption *,QPainter *,const QWidget *)","Funname":"drawSliderTickmarkLabels","Returntype":"bool","Args":"const QStyleOption *,QPainter *,const QWidget *"},{"Uniquefunname":"bool drawSpinBoxComplexControl(const QStyleOptionComplex * option,QPainter * painter,const QWidget * widget)","Funname":"drawSpinBoxComplexControl","Returntype":"bool","Args":"const QStyleOptionComplex * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"void drawStandardIcon(QStyle::StandardPixmap sp,const QStyleOption * opt,QPainter * p,const QWidget * widget)","Funname":"drawStandardIcon","Returntype":"void","Args":"QStyle::StandardPixmap sp,const QStyleOption * opt,QPainter * p,const QWidget * widget"},{"Uniquefunname":"bool drawTabBarAddButtonControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawTabBarAddButtonControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawTabBarTabLabelControl(const QStyleOption * opt,QPainter * p,const QWidget * widget)","Funname":"drawTabBarTabLabelControl","Returntype":"bool","Args":"const QStyleOption * opt,QPainter * p,const QWidget * widget"},{"Uniquefunname":"bool drawTabBarTabShapeControl(const QStyleOption * opt,QPainter * p,const QWidget * widget)","Funname":"drawTabBarTabShapeControl","Returntype":"bool","Args":"const QStyleOption * opt,QPainter * p,const QWidget * widget"},{"Uniquefunname":"bool drawToolButtonLabelControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawToolButtonLabelControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"QRect headerArrowRect(const QStyleOption * opt,const QWidget * widget)","Funname":"headerArrowRect","Returntype":"QRect","Args":"const QStyleOption * opt,const QWidget * widget"},{"Uniquefunname":"QColor highlight(const QPalette \u0026 pal)","Funname":"highlight","Returntype":"QColor","Args":"const QPalette \u0026 pal"},{"Uniquefunname":"QColor highlightedOutline(const QPalette \u0026 pal)","Funname":"highlightedOutline","Returntype":"QColor","Args":"const QPalette \u0026 pal"},{"Uniquefunname":"QColor innerContrastLine()","Funname":"innerContrastLine","Returntype":"QColor","Args":""},{"Uniquefunname":"private isTabBarToolButton(const QWidget * button)","Funname":"isTabBarToolButton","Returntype":"private","Args":"const QWidget * button"},{"Uniquefunname":"bool isVisibleMenuCheckBox()","Funname":"isVisibleMenuCheckBox","Returntype":"bool","Args":""},{"Uniquefunname":"bool isVisibleMenuIcon()","Funname":"isVisibleMenuIcon","Returntype":"bool","Args":""},{"Uniquefunname":"bool isVisibleMenuShortText()","Funname":"isVisibleMenuShortText","Returntype":"bool","Args":""},{"Uniquefunname":"QColor lightShade()","Funname":"lightShade","Returntype":"QColor","Args":""},{"Uniquefunname":"public outline(const QPalette \u0026 pal)","Funname":"outline","Returntype":"public","Args":"const QPalette \u0026 pal"},{"Uniquefunname":"void polish(QApplication * app)","Funname":"polish","Returntype":"void","Args":"QApplication * app"},{"Uniquefunname":"void polish(QPalette \u0026 p)","Funname":"polish","Returntype":"void","Args":"QPalette \u0026 p"},{"Uniquefunname":"void polish(QWidget * w)","Funname":"polish","Returntype":"void","Args":"QWidget * w"},{"Uniquefunname":"QRect progressBarContentsRect(const QStyleOption * option,const QWidget * widget)","Funname":"progressBarContentsRect","Returntype":"QRect","Args":"const QStyleOption * option,const QWidget * widget"},{"Uniquefunname":"QRect progressBarGrooveRect(const QStyleOption * option,const QWidget * widget)","Funname":"progressBarGrooveRect","Returntype":"QRect","Args":"const QStyleOption * option,const QWidget * widget"},{"Uniquefunname":"QRect progressBarLabelRect(const QStyleOption * option,const QWidget * widget)","Funname":"progressBarLabelRect","Returntype":"QRect","Args":"const QStyleOption * option,const QWidget * widget"},{"Uniquefunname":"QWindow * qt_getWindow(const QWidget * widget)","Funname":"qt_getWindow","Returntype":"QWindow *","Args":"const QWidget * widget"},{"Uniquefunname":"QRect scrollbarSubControlRect(const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget)","Funname":"scrollbarSubControlRect","Returntype":"QRect","Args":"const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget"},{"Uniquefunname":"QSize sizeFromContents(ContentsType type,const QStyleOption * option,const QSize \u0026 size,const QWidget * widget)","Funname":"sizeFromContents","Returntype":"QSize","Args":"ContentsType type,const QStyleOption * option,const QSize \u0026 size,const QWidget * widget"},{"Uniquefunname":"QRect sliderSubControlRect(const QStyleOptionComplex * option,SubControl subControl,const QWidget * widget)","Funname":"sliderSubControlRect","Returntype":"QRect","Args":"const QStyleOptionComplex * option,SubControl subControl,const QWidget * widget"},{"Uniquefunname":"QRect spinboxSubControlRect(const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget)","Funname":"spinboxSubControlRect","Returntype":"QRect","Args":"const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget"},{"Uniquefunname":"QIcon standardIcon(StandardPixmap standardIcon,const QStyleOption * opt,const QWidget * widget)","Funname":"standardIcon","Returntype":"QIcon","Args":"StandardPixmap standardIcon,const QStyleOption * opt,const QWidget * widget"},{"Uniquefunname":"void startAnimation(DStyleAnimation * animation)","Funname":"startAnimation","Returntype":"void","Args":"DStyleAnimation * animation"},{"Uniquefunname":"void stopAnimation(const QObject * target)","Funname":"stopAnimation","Returntype":"void","Args":"const QObject * target"},{"Uniquefunname":"QRect subControlRect(ComplexControl cc,const QStyleOptionComplex * opt,SubControl sc,const QWidget * w)","Funname":"subControlRect","Returntype":"QRect","Args":"ComplexControl cc,const QStyleOptionComplex * opt,SubControl sc,const QWidget * w"},{"Uniquefunname":"QRect subElementRect(SubElement r,const QStyleOption * opt,const QWidget * widget)","Funname":"subElementRect","Returntype":"QRect","Args":"SubElement r,const QStyleOption * opt,const QWidget * widget"},{"Uniquefunname":"void unpolish(QApplication * app)","Funname":"unpolish","Returntype":"void","Args":"QApplication * app"},{"Uniquefunname":"void unpolish(QWidget * w)","Funname":"unpolish","Returntype":"void","Args":"QWidget * w"},{"Uniquefunname":"bool widgetIsComboBoxPopupFramePrimitive(const QWidget * w)","Funname":"widgetIsComboBoxPopupFramePrimitive","Returntype":"bool","Args":"const QWidget * w"},{"Uniquefunname":" ~Style()","Funname":"~Style","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["STYLE_H"]}]}
{"Filepath":"styles/norwegianwoodstyle.h","Functions":[{"Uniquefunname":"Q_OBJECT public NorwegianWoodStyle()","Funname":"NorwegianWoodStyle","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"void drawControl(ControlElement element,const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawControl","Returntype":"void","Args":"ControlElement element,const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"void drawPrimitive(PrimitiveElement element,const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawPrimitive","Returntype":"void","Args":"PrimitiveElement element,const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"int pixelMetric(PixelMetric metric,const QStyleOption * option,const QWidget * widget)","Funname":"pixelMetric","Returntype":"int","Args":"PixelMetric metric,const QStyleOption * option,const QWidget * widget"},{"Uniquefunname":"void polish(QPalette \u0026 palette)","Funname":"polish","Returntype":"void","Args":"QPalette \u0026 palette"},{"Uniquefunname":"void polish(QWidget * widget)","Funname":"polish","Returntype":"void","Args":"QWidget * widget"},{"Uniquefunname":"QPainterPath roundRectPath(const QRect \u0026 rect)","Funname":"roundRectPath","Returntype":"QPainterPath","Args":"const QRect \u0026 rect"},{"Uniquefunname":"private setTexture(QPalette \u0026 palette,QPalette::ColorRole role,const QPixmap \u0026 pixmap)","Funname":"setTexture","Returntype":"private","Args":"QPalette \u0026 palette,QPalette::ColorRole role,const QPixmap \u0026 pixmap"},{"Uniquefunname":"int styleHint(StyleHint hint,const QStyleOption * option,const QWidget * widget,QStyleHintReturn * returnData)","Funname":"styleHint","Returntype":"int","Args":"StyleHint hint,const QStyleOption * option,const QWidget * widget,QStyleHintReturn * returnData"},{"Uniquefunname":"void unpolish(QWidget * widget)","Funname":"unpolish","Returntype":"void","Args":"QWidget * widget"}],"Records":[{"Name":"macro","Fields":["NORWEGIANWOODSTYLE_H"]}]}
{"Filepath":"styles/widgetgallery.h","Functions":[{"Uniquefunname":"void advanceProgressBar()","Funname":"advanceProgressBar","Returntype":"void","Args":""},{"Uniquefunname":"void changePalette()","Funname":"changePalette","Returntype":"void","Args":""},{"Uniquefunname":"private slots changeStyle(const QString \u0026 styleName)","Funname":"changeStyle","Returntype":"private slots","Args":"const QString \u0026 styleName"},{"Uniquefunname":"void createBottomLeftTabWidget()","Funname":"createBottomLeftTabWidget","Returntype":"void","Args":""},{"Uniquefunname":"void createBottomRightGroupBox()","Funname":"createBottomRightGroupBox","Returntype":"void","Args":""},{"Uniquefunname":"void createProgressBar()","Funname":"createProgressBar","Returntype":"void","Args":""},{"Uniquefunname":"private createTopLeftGroupBox()","Funname":"createTopLeftGroupBox","Returntype":"private","Args":""},{"Uniquefunname":"void createTopRightGroupBox()","Funname":"createTopRightGroupBox","Returntype":"void","Args":""}],"Records":[{"Name":"macro","Fields":["WIDGETGALLERY_H"]}]}
=======
{"Filepath":"iconengineplugins/builtinengine/dbuiltiniconengine.h","Functions":[{"Uniquefunname":" DBuiltinIconEngine(const DBuiltinIconEngine \u0026 other)","Funname":"DBuiltinIconEngine","Returntype":"","Args":"const DBuiltinIconEngine \u0026 other"},{"Uniquefunname":" DBuiltinIconEngine(const QString \u0026 iconName)","Funname":"DBuiltinIconEngine","Returntype":"","Args":"const QString \u0026 iconName"},{"Uniquefunname":" DBuiltinIconEngine::DBuiltinIconEngine(const DBuiltinIconEngine \u0026 other)","Funname":"DBuiltinIconEngine::DBuiltinIconEngine","Returntype":"","Args":"const DBuiltinIconEngine \u0026 other"},{"Uniquefunname":" DBuiltinIconEngine::DBuiltinIconEngine(const QString \u0026 iconName)","Funname":"DBuiltinIconEngine::DBuiltinIconEngine","Returntype":"","Args":"const QString \u0026 iconName"},{"Uniquefunname":"QSize DBuiltinIconEngine::actualSize(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"DBuiltinIconEngine::actualSize","Returntype":"QSize","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QIconEngine * DBuiltinIconEngine::clone() cons)","Funname":"DBuiltinIconEngine::clone","Returntype":"QIconEngine *","Args":") cons"},{"Uniquefunname":"void DBuiltinIconEngine::ensureLoaded()","Funname":"DBuiltinIconEngine::ensureLoaded","Returntype":"void","Args":""},{"Uniquefunname":"bool DBuiltinIconEngine::hasIcon() cons)","Funname":"DBuiltinIconEngine::hasIcon","Returntype":"bool","Args":") cons"},{"Uniquefunname":"QString DBuiltinIconEngine::iconName() cons)","Funname":"DBuiltinIconEngine::iconName","Returntype":"QString","Args":") cons"},{"Uniquefunname":"QString DBuiltinIconEngine::key() cons)","Funname":"DBuiltinIconEngine::key","Returntype":"QString","Args":") cons"},{"Uniquefunname":"QThemeIconInfo DBuiltinIconEngine::loadIcon(const QString \u0026 iconName,uint key)","Funname":"DBuiltinIconEngine::loadIcon","Returntype":"QThemeIconInfo","Args":"const QString \u0026 iconName,uint key"},{"Uniquefunname":"void DBuiltinIconEngine::paint(QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state)","Funname":"DBuiltinIconEngine::paint","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QPixmap DBuiltinIconEngine::pixmap(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"DBuiltinIconEngine::pixmap","Returntype":"QPixmap","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"bool DBuiltinIconEngine::read(QDataStream \u0026 in)","Funname":"DBuiltinIconEngine::read","Returntype":"bool","Args":"QDataStream \u0026 in"},{"Uniquefunname":"void DBuiltinIconEngine::virtual_hook(int id,void * data)","Funname":"DBuiltinIconEngine::virtual_hook","Returntype":"void","Args":"int id,void * data"},{"Uniquefunname":"bool DBuiltinIconEngine::write(QDataStream \u0026 out) cons)","Funname":"DBuiltinIconEngine::write","Returntype":"bool","Args":"QDataStream \u0026 out) cons"},{"Uniquefunname":" DBuiltinIconEngine::~DBuiltinIconEngine()","Funname":"DBuiltinIconEngine::~DBuiltinIconEngine","Returntype":"","Args":""},{"Uniquefunname":"QSize actualSize(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"actualSize","Returntype":"QSize","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QIconEngine * clone() cons)","Funname":"clone","Returntype":"QIconEngine *","Args":") cons"},{"Uniquefunname":"void ensureLoaded()","Funname":"ensureLoaded","Returntype":"void","Args":""},{"Uniquefunname":"bool hasIcon() cons)","Funname":"hasIcon","Returntype":"bool","Args":") cons"},{"Uniquefunname":"QString iconName() cons)","Funname":"iconName","Returntype":"QString","Args":") cons"},{"Uniquefunname":"QString key() cons)","Funname":"key","Returntype":"QString","Args":") cons"},{"Uniquefunname":"QThemeIconInfo loadIcon(const QString \u0026 iconName,uint key)","Funname":"loadIcon","Returntype":"QThemeIconInfo","Args":"const QString \u0026 iconName,uint key"},{"Uniquefunname":"void paint(QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state)","Funname":"paint","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QPixmap pixmap(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"pixmap","Returntype":"QPixmap","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"bool read(QDataStream \u0026 in)","Funname":"read","Returntype":"bool","Args":"QDataStream \u0026 in"},{"Uniquefunname":"void virtual_hook(int id,void * data)","Funname":"virtual_hook","Returntype":"void","Args":"int id,void * data"},{"Uniquefunname":"bool write(QDataStream \u0026 out) cons)","Funname":"write","Returntype":"bool","Args":"QDataStream \u0026 out) cons"},{"Uniquefunname":" ~DBuiltinIconEngine()","Funname":"~DBuiltinIconEngine","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DBUILTINICONENGINE_H"]},{"Name":"class:DBuiltinIconEngine","Fields":["bool:1 DBuiltinIconEngine::m_followSystemTheme","QString DBuiltinIconEngine::m_iconName","QThemeIconInfo DBuiltinIconEngine::m_info","bool:1 DBuiltinIconEngine::m_initialized","uint:2 DBuiltinIconEngine::m_key"]}]}
{"Filepath":"iconengineplugins/svgiconengine/qsvgiconengine.h","Functions":[{"Uniquefunname":" QSvgIconEngine()","Funname":"QSvgIconEngine","Returntype":"","Args":""},{"Uniquefunname":" QSvgIconEngine(const QSvgIconEngine \u0026 other)","Funname":"QSvgIconEngine","Returntype":"","Args":"const QSvgIconEngine \u0026 other"},{"Uniquefunname":" QSvgIconEngine::QSvgIconEngine()","Funname":"QSvgIconEngine::QSvgIconEngine","Returntype":"","Args":""},{"Uniquefunname":" QSvgIconEngine::QSvgIconEngine(const QSvgIconEngine \u0026 other)","Funname":"QSvgIconEngine::QSvgIconEngine","Returntype":"","Args":"const QSvgIconEngine \u0026 other"},{"Uniquefunname":"QSize QSvgIconEngine::actualSize(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"QSvgIconEngine::actualSize","Returntype":"QSize","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"void QSvgIconEngine::addFile(const QString \u0026 fileName,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"QSvgIconEngine::addFile","Returntype":"void","Args":"const QString \u0026 fileName,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"void QSvgIconEngine::addPixmap(const QPixmap \u0026 pixmap,QIcon::Mode mode,QIcon::State state)","Funname":"QSvgIconEngine::addPixmap","Returntype":"void","Args":"const QPixmap \u0026 pixmap,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QIconEngine * QSvgIconEngine::clone() cons)","Funname":"QSvgIconEngine::clone","Returntype":"QIconEngine *","Args":") cons"},{"Uniquefunname":"QString QSvgIconEngine::key() cons)","Funname":"QSvgIconEngine::key","Returntype":"QString","Args":") cons"},{"Uniquefunname":"void QSvgIconEngine::paint(QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state)","Funname":"QSvgIconEngine::paint","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QPixmap QSvgIconEngine::pixmap(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"QSvgIconEngine::pixmap","Returntype":"QPixmap","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"bool QSvgIconEngine::read(QDataStream \u0026 in)","Funname":"QSvgIconEngine::read","Returntype":"bool","Args":"QDataStream \u0026 in"},{"Uniquefunname":"bool QSvgIconEngine::write(QDataStream \u0026 out) cons)","Funname":"QSvgIconEngine::write","Returntype":"bool","Args":"QDataStream \u0026 out) cons"},{"Uniquefunname":" QSvgIconEngine::~QSvgIconEngine()","Funname":"QSvgIconEngine::~QSvgIconEngine","Returntype":"","Args":""},{"Uniquefunname":"QSize actualSize(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"actualSize","Returntype":"QSize","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"void addFile(const QString \u0026 fileName,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"addFile","Returntype":"void","Args":"const QString \u0026 fileName,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"void addPixmap(const QPixmap \u0026 pixmap,QIcon::Mode mode,QIcon::State state)","Funname":"addPixmap","Returntype":"void","Args":"const QPixmap \u0026 pixmap,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QIconEngine * clone() cons)","Funname":"clone","Returntype":"QIconEngine *","Args":") cons"},{"Uniquefunname":"QString key() cons)","Funname":"key","Returntype":"QString","Args":") cons"},{"Uniquefunname":"void paint(QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state)","Funname":"paint","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QPixmap pixmap(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"pixmap","Returntype":"QPixmap","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"bool read(QDataStream \u0026 in)","Funname":"read","Returntype":"bool","Args":"QDataStream \u0026 in"},{"Uniquefunname":"bool write(QDataStream \u0026 out) cons)","Funname":"write","Returntype":"bool","Args":"QDataStream \u0026 out) cons"},{"Uniquefunname":" ~QSvgIconEngine()","Funname":"~QSvgIconEngine","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["QSVGICONENGINE_H"]},{"Name":"class:QSvgIconEngine","Fields":["QSharedDataPointer\u003cQSvgIconEnginePrivate\u003e QSvgIconEngine::d"]}]}
{"Filepath":"iconengineplugins/xdgiconproxyengine/xdgiconproxyengine.h","Functions":[{"Uniquefunname":" XdgIconProxyEngine(XdgIconLoaderEngine * proxy)","Funname":"XdgIconProxyEngine","Returntype":"","Args":"XdgIconLoaderEngine * proxy"},{"Uniquefunname":" XdgIconProxyEngine::XdgIconProxyEngine(XdgIconLoaderEngine * proxy)","Funname":"XdgIconProxyEngine::XdgIconProxyEngine","Returntype":"","Args":"XdgIconLoaderEngine * proxy"},{"Uniquefunname":"QSize XdgIconProxyEngine::actualSize(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"XdgIconProxyEngine::actualSize","Returntype":"QSize","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"void XdgIconProxyEngine::addFile(const QString \u0026 fileName,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"XdgIconProxyEngine::addFile","Returntype":"void","Args":"const QString \u0026 fileName,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"void XdgIconProxyEngine::addPixmap(const QPixmap \u0026 pixmap,QIcon::Mode mode,QIcon::State state)","Funname":"XdgIconProxyEngine::addPixmap","Returntype":"void","Args":"const QPixmap \u0026 pixmap,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QIconEngine * XdgIconProxyEngine::clone() cons)","Funname":"XdgIconProxyEngine::clone","Returntype":"QIconEngine *","Args":") cons"},{"Uniquefunname":"quint64 XdgIconProxyEngine::entryCacheKey(const ScalableEntry * color_entry,const QIcon::Mode mode,const QIcon::State state)","Funname":"XdgIconProxyEngine::entryCacheKey","Returntype":"quint64","Args":"const ScalableEntry * color_entry,const QIcon::Mode mode,const QIcon::State state"},{"Uniquefunname":"QPixmap XdgIconProxyEngine::followColorPixmap(ScalableEntry * color_entry,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"XdgIconProxyEngine::followColorPixmap","Returntype":"QPixmap","Args":"ScalableEntry * color_entry,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QString XdgIconProxyEngine::key() cons)","Funname":"XdgIconProxyEngine::key","Returntype":"QString","Args":") cons"},{"Uniquefunname":"void XdgIconProxyEngine::paint(QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state)","Funname":"XdgIconProxyEngine::paint","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QPixmap XdgIconProxyEngine::pixmap(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"XdgIconProxyEngine::pixmap","Returntype":"QPixmap","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QPixmap XdgIconProxyEngine::pixmapByEntry(QIconLoaderEngineEntry * entry,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"XdgIconProxyEngine::pixmapByEntry","Returntype":"QPixmap","Args":"QIconLoaderEngineEntry * entry,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"bool XdgIconProxyEngine::read(QDataStream \u0026 in)","Funname":"XdgIconProxyEngine::read","Returntype":"bool","Args":"QDataStream \u0026 in"},{"Uniquefunname":"void XdgIconProxyEngine::virtual_hook(int id,void * data)","Funname":"XdgIconProxyEngine::virtual_hook","Returntype":"void","Args":"int id,void * data"},{"Uniquefunname":"bool XdgIconProxyEngine::write(QDataStream \u0026 out) cons)","Funname":"XdgIconProxyEngine::write","Returntype":"bool","Args":"QDataStream \u0026 out) cons"},{"Uniquefunname":"QSize actualSize(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"actualSize","Returntype":"QSize","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"void addFile(const QString \u0026 fileName,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"addFile","Returntype":"void","Args":"const QString \u0026 fileName,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"void addPixmap(const QPixmap \u0026 pixmap,QIcon::Mode mode,QIcon::State state)","Funname":"addPixmap","Returntype":"void","Args":"const QPixmap \u0026 pixmap,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QIconEngine * clone() cons)","Funname":"clone","Returntype":"QIconEngine *","Args":") cons"},{"Uniquefunname":"quint64 entryCacheKey(const ScalableEntry * color_entry,const QIcon::Mode mode,const QIcon::State state)","Funname":"entryCacheKey","Returntype":"quint64","Args":"const ScalableEntry * color_entry,const QIcon::Mode mode,const QIcon::State state"},{"Uniquefunname":"QPixmap followColorPixmap(ScalableEntry * color_entry,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"followColorPixmap","Returntype":"QPixmap","Args":"ScalableEntry * color_entry,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QString key() cons)","Funname":"key","Returntype":"QString","Args":") cons"},{"Uniquefunname":"void paint(QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state)","Funname":"paint","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QPixmap pixmap(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"pixmap","Returntype":"QPixmap","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QPixmap pixmapByEntry(QIconLoaderEngineEntry * entry,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"pixmapByEntry","Returntype":"QPixmap","Args":"QIconLoaderEngineEntry * entry,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"bool read(QDataStream \u0026 in)","Funname":"read","Returntype":"bool","Args":"QDataStream \u0026 in"},{"Uniquefunname":"void virtual_hook(int id,void * data)","Funname":"virtual_hook","Returntype":"void","Args":"int id,void * data"},{"Uniquefunname":"bool write(QDataStream \u0026 out) cons)","Funname":"write","Returntype":"bool","Args":"QDataStream \u0026 out) cons"}],"Records":[{"Name":"macro","Fields":["XDGICONPROXYENGINE_H","private"]},{"Name":"class:XdgIconProxyEngine","Fields":["XdgIconLoaderEngine * XdgIconProxyEngine::engine","QHash\u003cquint64,QString\u003e XdgIconProxyEngine::entryToColorScheme","QIcon::Mode XdgIconProxyEngine::lastMode"]}]}
{"Filepath":"imageformatplugins/svg/qsvgiohandler.h","Functions":[{"Uniquefunname":" QSvgIOHandler()","Funname":"QSvgIOHandler","Returntype":"","Args":""},{"Uniquefunname":" QSvgIOHandler::QSvgIOHandler()","Funname":"QSvgIOHandler::QSvgIOHandler","Returntype":"","Args":""},{"Uniquefunname":"bool QSvgIOHandler::canRead(QIODevice * device)","Funname":"QSvgIOHandler::canRead","Returntype":"bool","Args":"QIODevice * device"},{"Uniquefunname":"bool QSvgIOHandler::canRead() cons)","Funname":"QSvgIOHandler::canRead","Returntype":"bool","Args":") cons"},{"Uniquefunname":"QByteArray QSvgIOHandler::name() cons)","Funname":"QSvgIOHandler::name","Returntype":"QByteArray","Args":") cons"},{"Uniquefunname":"QVariant QSvgIOHandler::option(ImageOption option) cons)","Funname":"QSvgIOHandler::option","Returntype":"QVariant","Args":"ImageOption option) cons"},{"Uniquefunname":"bool QSvgIOHandler::read(QImage * image)","Funname":"QSvgIOHandler::read","Returntype":"bool","Args":"QImage * image"},{"Uniquefunname":"void QSvgIOHandler::setOption(ImageOption option,const QVariant \u0026 value)","Funname":"QSvgIOHandler::setOption","Returntype":"void","Args":"ImageOption option,const QVariant \u0026 value"},{"Uniquefunname":"bool QSvgIOHandler::supportsOption(ImageOption option) cons)","Funname":"QSvgIOHandler::supportsOption","Returntype":"bool","Args":"ImageOption option) cons"},{"Uniquefunname":" QSvgIOHandler::~QSvgIOHandler()","Funname":"QSvgIOHandler::~QSvgIOHandler","Returntype":"","Args":""},{"Uniquefunname":"bool canRead(QIODevice * device)","Funname":"canRead","Returntype":"bool","Args":"QIODevice * device"},{"Uniquefunname":"bool canRead() cons)","Funname":"canRead","Returntype":"bool","Args":") cons"},{"Uniquefunname":"QByteArray name() cons)","Funname":"name","Returntype":"QByteArray","Args":") cons"},{"Uniquefunname":"QVariant option(ImageOption option) cons)","Funname":"option","Returntype":"QVariant","Args":"ImageOption option) cons"},{"Uniquefunname":"bool read(QImage * image)","Funname":"read","Returntype":"bool","Args":"QImage * image"},{"Uniquefunname":"void setOption(ImageOption option,const QVariant \u0026 value)","Funname":"setOption","Returntype":"void","Args":"ImageOption option,const QVariant \u0026 value"},{"Uniquefunname":"bool supportsOption(ImageOption option) cons)","Funname":"supportsOption","Returntype":"bool","Args":"ImageOption option) cons"},{"Uniquefunname":" ~QSvgIOHandler()","Funname":"~QSvgIOHandler","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["QSVGIOHANDLER_H"]},{"Name":"class:QSvgIOHandler","Fields":["QSvgIOHandlerPrivate * QSvgIOHandler::d"]}]}
{"Filepath":"platformthemeplugin/diconengine.h","Functions":[{"Uniquefunname":" DIconEngine(const QString \u0026 iconName)","Funname":"DIconEngine","Returntype":"","Args":"const QString \u0026 iconName"},{"Uniquefunname":" DIconEngine::DIconEngine(const QString \u0026 iconName)","Funname":"DIconEngine::DIconEngine","Returntype":"","Args":"const QString \u0026 iconName"},{"Uniquefunname":"QSize DIconEngine::actualSize(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"DIconEngine::actualSize","Returntype":"QSize","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QList\u003cQSize\u003e DIconEngine::availableSizes(QIcon::Mode mode=QIcon::Normal,QIcon::State state=QIcon::Off) cons)","Funname":"DIconEngine::availableSizes","Returntype":"QList\u003cQSize\u003e","Args":"QIcon::Mode mode=QIcon::Normal,QIcon::State state=QIcon::Off) cons"},{"Uniquefunname":"QIconEngine * DIconEngine::clone() cons)","Funname":"DIconEngine::clone","Returntype":"QIconEngine *","Args":") cons"},{"Uniquefunname":"QString DIconEngine::iconName() cons)","Funname":"DIconEngine::iconName","Returntype":"QString","Args":") cons"},{"Uniquefunname":"QString DIconEngine::key() cons)","Funname":"DIconEngine::key","Returntype":"QString","Args":") cons"},{"Uniquefunname":"void DIconEngine::paint(QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state)","Funname":"DIconEngine::paint","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QPixmap DIconEngine::pixmap(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"DIconEngine::pixmap","Returntype":"QPixmap","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":" DIconEngine::~DIconEngine()","Funname":"DIconEngine::~DIconEngine","Returntype":"","Args":""},{"Uniquefunname":"QSize actualSize(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"actualSize","Returntype":"QSize","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QList\u003cQSize\u003e availableSizes(QIcon::Mode mode=QIcon::Normal,QIcon::State state=QIcon::Off) cons)","Funname":"availableSizes","Returntype":"QList\u003cQSize\u003e","Args":"QIcon::Mode mode=QIcon::Normal,QIcon::State state=QIcon::Off) cons"},{"Uniquefunname":"QIconEngine * clone() cons)","Funname":"clone","Returntype":"QIconEngine *","Args":") cons"},{"Uniquefunname":"QString iconName() cons)","Funname":"iconName","Returntype":"QString","Args":") cons"},{"Uniquefunname":"QString key() cons)","Funname":"key","Returntype":"QString","Args":") cons"},{"Uniquefunname":"void paint(QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state)","Funname":"paint","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QPixmap pixmap(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"pixmap","Returntype":"QPixmap","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":" ~DIconEngine()","Funname":"~DIconEngine","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DICONENGINE_H"]},{"Name":"class:DIconEngine","Fields":["const QString DIconEngine::m_iconName"]}]}
{"Filepath":"platformthemeplugin/diconproxyengine.h","Functions":[{"Uniquefunname":" DIconProxyEngine(const QIcon \u0026 proxyIcon)","Funname":"DIconProxyEngine","Returntype":"","Args":"const QIcon \u0026 proxyIcon"},{"Uniquefunname":" DIconProxyEngine::DIconProxyEngine(const QIcon \u0026 proxyIcon)","Funname":"DIconProxyEngine::DIconProxyEngine","Returntype":"","Args":"const QIcon \u0026 proxyIcon"},{"Uniquefunname":"QSize DIconProxyEngine::actualSize(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"DIconProxyEngine::actualSize","Returntype":"QSize","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QIconEngine * DIconProxyEngine::clone() cons)","Funname":"DIconProxyEngine::clone","Returntype":"QIconEngine *","Args":") cons"},{"Uniquefunname":"void DIconProxyEngine::paint(QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state)","Funname":"DIconProxyEngine::paint","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QPixmap DIconProxyEngine::pixmap(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"DIconProxyEngine::pixmap","Returntype":"QPixmap","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"bool DIconProxyEngine::read(QDataStream \u0026 in)","Funname":"DIconProxyEngine::read","Returntype":"bool","Args":"QDataStream \u0026 in"},{"Uniquefunname":"bool DIconProxyEngine::write(QDataStream \u0026 out) cons)","Funname":"DIconProxyEngine::write","Returntype":"bool","Args":"QDataStream \u0026 out) cons"},{"Uniquefunname":"QSize actualSize(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"actualSize","Returntype":"QSize","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QIconEngine * clone() cons)","Funname":"clone","Returntype":"QIconEngine *","Args":") cons"},{"Uniquefunname":"void paint(QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state)","Funname":"paint","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QPixmap pixmap(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"pixmap","Returntype":"QPixmap","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"bool read(QDataStream \u0026 in)","Funname":"read","Returntype":"bool","Args":"QDataStream \u0026 in"},{"Uniquefunname":"bool write(QDataStream \u0026 out) cons)","Funname":"write","Returntype":"bool","Args":"QDataStream \u0026 out) cons"}],"Records":[{"Name":"macro","Fields":["DICONPROXYENGINE_H"]},{"Name":"class:DIconProxyEngine","Fields":["QIcon DIconProxyEngine::m_proxyIcon"]}]}
{"Filepath":"platformthemeplugin/dthemesettings.h","Functions":[{"Uniquefunname":" DThemeSettings(bool watchFile=true,QObject * parent=0)","Funname":"DThemeSettings","Returntype":"","Args":"bool watchFile=true,QObject * parent=0"},{"Uniquefunname":" DThemeSettings::DThemeSettings(bool watchFile=true,QObject * parent=0)","Funname":"DThemeSettings::DThemeSettings","Returntype":"","Args":"bool watchFile=true,QObject * parent=0"},{"Uniquefunname":"bool DThemeSettings::autoScaleWindow() cons)","Funname":"DThemeSettings::autoScaleWindow","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void DThemeSettings::autoScaleWindowChanged(bool autoScaleWindow)","Funname":"DThemeSettings::autoScaleWindowChanged","Returntype":"void","Args":"bool autoScaleWindow"},{"Uniquefunname":"bool DThemeSettings::contains(const QString \u0026 key) cons)","Funname":"DThemeSettings::contains","Returntype":"bool","Args":"const QString \u0026 key) cons"},{"Uniquefunname":"QString DThemeSettings::fallbackIconThemeName() cons)","Funname":"DThemeSettings::fallbackIconThemeName","Returntype":"QString","Args":") cons"},{"Uniquefunname":"void DThemeSettings::fallbackIconThemeNameChanged(QString fallbackIconThemeName)","Funname":"DThemeSettings::fallbackIconThemeNameChanged","Returntype":"void","Args":"QString fallbackIconThemeName"},{"Uniquefunname":"QString DThemeSettings::iconThemeName() cons)","Funname":"DThemeSettings::iconThemeName","Returntype":"QString","Args":") cons"},{"Uniquefunname":"void DThemeSettings::iconThemeNameChanged(QString iconThemeName)","Funname":"DThemeSettings::iconThemeNameChanged","Returntype":"void","Args":"QString iconThemeName"},{"Uniquefunname":"bool DThemeSettings::isSetFallbackIconThemeName() cons)","Funname":"DThemeSettings::isSetFallbackIconThemeName","Returntype":"bool","Args":") cons"},{"Uniquefunname":"bool DThemeSettings::isSetIconThemeName() cons)","Funname":"DThemeSettings::isSetIconThemeName","Returntype":"bool","Args":") cons"},{"Uniquefunname":"bool DThemeSettings::isSetStyleNames() cons)","Funname":"DThemeSettings::isSetStyleNames","Returntype":"bool","Args":") cons"},{"Uniquefunname":"bool DThemeSettings::isSetSystemFixedFont() cons)","Funname":"DThemeSettings::isSetSystemFixedFont","Returntype":"bool","Args":") cons"},{"Uniquefunname":"bool DThemeSettings::isSetSystemFont() cons)","Funname":"DThemeSettings::isSetSystemFont","Returntype":"bool","Args":") cons"},{"Uniquefunname":"bool DThemeSettings::isSetSystemFontPixelSize() cons)","Funname":"DThemeSettings::isSetSystemFontPixelSize","Returntype":"bool","Args":") cons"},{"Uniquefunname":"QSettings * DThemeSettings::makeSettings()","Funname":"DThemeSettings::makeSettings","Returntype":"QSettings *","Args":""},{"Uniquefunname":"void DThemeSettings::onConfigChanged()","Funname":"DThemeSettings::onConfigChanged","Returntype":"void","Args":""},{"Uniquefunname":"qreal DThemeSettings::scaleFactor() cons)","Funname":"DThemeSettings::scaleFactor","Returntype":"qreal","Args":") cons"},{"Uniquefunname":"void DThemeSettings::scaleFactorChanged(const qreal \u0026 scaleFactor)","Funname":"DThemeSettings::scaleFactorChanged","Returntype":"void","Args":"const qreal \u0026 scaleFactor"},{"Uniquefunname":"QPair\u003cqreal,qreal\u003e DThemeSettings::scaleLogicalDpi() cons)","Funname":"DThemeSettings::scaleLogicalDpi","Returntype":"QPair\u003cqreal,qreal\u003e","Args":") cons"},{"Uniquefunname":"void DThemeSettings::scaleLogicalDpiChanged(const QPair\u003cqreal,qreal\u003e scaleLogicalDpi)","Funname":"DThemeSettings::scaleLogicalDpiChanged","Returntype":"void","Args":"const QPair\u003cqreal,qreal\u003e scaleLogicalDpi"},{"Uniquefunname":"QByteArray DThemeSettings::screenScaleFactors() cons)","Funname":"DThemeSettings::screenScaleFactors","Returntype":"QByteArray","Args":") cons"},{"Uniquefunname":"void DThemeSettings::screenScaleFactorsChanged(const QByteArray \u0026 screenScaleFactors)","Funname":"DThemeSettings::screenScaleFactorsChanged","Returntype":"void","Args":"const QByteArray \u0026 screenScaleFactors"},{"Uniquefunname":"QStringList DThemeSettings::styleNames() cons)","Funname":"DThemeSettings::styleNames","Returntype":"QStringList","Args":") cons"},{"Uniquefunname":"void DThemeSettings::styleNamesChanged(QStringList styleNames)","Funname":"DThemeSettings::styleNamesChanged","Returntype":"void","Args":"QStringList styleNames"},{"Uniquefunname":"QString DThemeSettings::systemFixedFont() cons)","Funname":"DThemeSettings::systemFixedFont","Returntype":"QString","Args":") cons"},{"Uniquefunname":"void DThemeSettings::systemFixedFontChanged(QString systemFixedFont)","Funname":"DThemeSettings::systemFixedFontChanged","Returntype":"void","Args":"QString systemFixedFont"},{"Uniquefunname":"QString DThemeSettings::systemFont() cons)","Funname":"DThemeSettings::systemFont","Returntype":"QString","Args":") cons"},{"Uniquefunname":"void DThemeSettings::systemFontChanged(QString systemFont)","Funname":"DThemeSettings::systemFontChanged","Returntype":"void","Args":"QString systemFont"},{"Uniquefunname":"qreal DThemeSettings::systemFontPointSize() cons)","Funname":"DThemeSettings::systemFontPointSize","Returntype":"qreal","Args":") cons"},{"Uniquefunname":"void DThemeSettings::systemFontPointSizeChanged(qreal systemFontPointSize)","Funname":"DThemeSettings::systemFontPointSizeChanged","Returntype":"void","Args":"qreal systemFontPointSize"},{"Uniquefunname":"int DThemeSettings::touchFlickBeginMoveDelay() cons)","Funname":"DThemeSettings::touchFlickBeginMoveDelay","Returntype":"int","Args":") cons"},{"Uniquefunname":"void DThemeSettings::touchFlickBeginMoveDelayChanged(int touchFlickBeginMoveDelay)","Funname":"DThemeSettings::touchFlickBeginMoveDelayChanged","Returntype":"void","Args":"int touchFlickBeginMoveDelay"},{"Uniquefunname":"QVariant DThemeSettings::value(const QString \u0026 key,const QVariant \u0026 defaultValue=QVariant ()) cons)","Funname":"DThemeSettings::value","Returntype":"QVariant","Args":"const QString \u0026 key,const QVariant \u0026 defaultValue=QVariant ()) cons"},{"Uniquefunname":"bool autoScaleWindow() cons)","Funname":"autoScaleWindow","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void autoScaleWindowChanged(bool autoScaleWindow)","Funname":"autoScaleWindowChanged","Returntype":"void","Args":"bool autoScaleWindow"},{"Uniquefunname":"bool contains(const QString \u0026 key) cons)","Funname":"contains","Returntype":"bool","Args":"const QString \u0026 key) cons"},{"Uniquefunname":"QString fallbackIconThemeName() cons)","Funname":"fallbackIconThemeName","Returntype":"QString","Args":") cons"},{"Uniquefunname":"void fallbackIconThemeNameChanged(QString fallbackIconThemeName)","Funname":"fallbackIconThemeNameChanged","Returntype":"void","Args":"QString fallbackIconThemeName"},{"Uniquefunname":"QString iconThemeName() cons)","Funname":"iconThemeName","Returntype":"QString","Args":") cons"},{"Uniquefunname":"void iconThemeNameChanged(QString iconThemeName)","Funname":"iconThemeNameChanged","Returntype":"void","Args":"QString iconThemeName"},{"Uniquefunname":"bool isSetFallbackIconThemeName() cons)","Funname":"isSetFallbackIconThemeName","Returntype":"bool","Args":") cons"},{"Uniquefunname":"bool isSetIconThemeName() cons)","Funname":"isSetIconThemeName","Returntype":"bool","Args":") cons"},{"Uniquefunname":"bool isSetStyleNames() cons)","Funname":"isSetStyleNames","Returntype":"bool","Args":") cons"},{"Uniquefunname":"bool isSetSystemFixedFont() cons)","Funname":"isSetSystemFixedFont","Returntype":"bool","Args":") cons"},{"Uniquefunname":"bool isSetSystemFont() cons)","Funname":"isSetSystemFont","Returntype":"bool","Args":") cons"},{"Uniquefunname":"bool isSetSystemFontPixelSize() cons)","Funname":"isSetSystemFontPixelSize","Returntype":"bool","Args":") cons"},{"Uniquefunname":"QSettings * makeSettings()","Funname":"makeSettings","Returntype":"QSettings *","Args":""},{"Uniquefunname":"void onConfigChanged()","Funname":"onConfigChanged","Returntype":"void","Args":""},{"Uniquefunname":"qreal scaleFactor() cons)","Funname":"scaleFactor","Returntype":"qreal","Args":") cons"},{"Uniquefunname":"void scaleFactorChanged(const qreal \u0026 scaleFactor)","Funname":"scaleFactorChanged","Returntype":"void","Args":"const qreal \u0026 scaleFactor"},{"Uniquefunname":"QPair\u003cqreal,qreal\u003e scaleLogicalDpi() cons)","Funname":"scaleLogicalDpi","Returntype":"QPair\u003cqreal,qreal\u003e","Args":") cons"},{"Uniquefunname":"void scaleLogicalDpiChanged(const QPair\u003cqreal,qreal\u003e scaleLogicalDpi)","Funname":"scaleLogicalDpiChanged","Returntype":"void","Args":"const QPair\u003cqreal,qreal\u003e scaleLogicalDpi"},{"Uniquefunname":"QByteArray screenScaleFactors() cons)","Funname":"screenScaleFactors","Returntype":"QByteArray","Args":") cons"},{"Uniquefunname":"void screenScaleFactorsChanged(const QByteArray \u0026 screenScaleFactors)","Funname":"screenScaleFactorsChanged","Returntype":"void","Args":"const QByteArray \u0026 screenScaleFactors"},{"Uniquefunname":"QStringList styleNames() cons)","Funname":"styleNames","Returntype":"QStringList","Args":") cons"},{"Uniquefunname":"void styleNamesChanged(QStringList styleNames)","Funname":"styleNamesChanged","Returntype":"void","Args":"QStringList styleNames"},{"Uniquefunname":"QString systemFixedFont() cons)","Funname":"systemFixedFont","Returntype":"QString","Args":") cons"},{"Uniquefunname":"void systemFixedFontChanged(QString systemFixedFont)","Funname":"systemFixedFontChanged","Returntype":"void","Args":"QString systemFixedFont"},{"Uniquefunname":"QString systemFont() cons)","Funname":"systemFont","Returntype":"QString","Args":") cons"},{"Uniquefunname":"void systemFontChanged(QString systemFont)","Funname":"systemFontChanged","Returntype":"void","Args":"QString systemFont"},{"Uniquefunname":"qreal systemFontPointSize() cons)","Funname":"systemFontPointSize","Returntype":"qreal","Args":") cons"},{"Uniquefunname":"void systemFontPointSizeChanged(qreal systemFontPointSize)","Funname":"systemFontPointSizeChanged","Returntype":"void","Args":"qreal systemFontPointSize"},{"Uniquefunname":"int touchFlickBeginMoveDelay() cons)","Funname":"touchFlickBeginMoveDelay","Returntype":"int","Args":") cons"},{"Uniquefunname":"void touchFlickBeginMoveDelayChanged(int touchFlickBeginMoveDelay)","Funname":"touchFlickBeginMoveDelayChanged","Returntype":"void","Args":"int touchFlickBeginMoveDelay"},{"Uniquefunname":"QVariant value(const QString \u0026 key,const QVariant \u0026 defaultValue=QVariant ()) cons)","Funname":"value","Returntype":"QVariant","Args":"const QString \u0026 key,const QVariant \u0026 defaultValue=QVariant ()) cons"}],"Records":[{"Name":"macro","Fields":["DTHEMESETTINGS_H"]},{"Name":"class:DThemeSettings","Fields":["QSettings * DThemeSettings::settings"]}]}
{"Filepath":"platformthemeplugin/qdeepinfiledialoghelper.h","Functions":[{"Uniquefunname":" QDeepinFileDialogHelper()","Funname":"QDeepinFileDialogHelper","Returntype":"","Args":""},{"Uniquefunname":" QDeepinFileDialogHelper::QDeepinFileDialogHelper()","Funname":"QDeepinFileDialogHelper::QDeepinFileDialogHelper","Returntype":"","Args":""},{"Uniquefunname":"void QDeepinFileDialogHelper::applyOptions()","Funname":"QDeepinFileDialogHelper::applyOptions","Returntype":"void","Args":""},{"Uniquefunname":"bool QDeepinFileDialogHelper::defaultNameFilterDisables() cons)","Funname":"QDeepinFileDialogHelper::defaultNameFilterDisables","Returntype":"bool","Args":") cons"},{"Uniquefunname":"QUrl QDeepinFileDialogHelper::directory() cons)","Funname":"QDeepinFileDialogHelper::directory","Returntype":"QUrl","Args":") cons"},{"Uniquefunname":"void QDeepinFileDialogHelper::ensureDialog() cons)","Funname":"QDeepinFileDialogHelper::ensureDialog","Returntype":"void","Args":") cons"},{"Uniquefunname":"void QDeepinFileDialogHelper::exec()","Funname":"QDeepinFileDialogHelper::exec","Returntype":"void","Args":""},{"Uniquefunname":"void QDeepinFileDialogHelper::hide()","Funname":"QDeepinFileDialogHelper::hide","Returntype":"void","Args":""},{"Uniquefunname":"bool QDeepinFileDialogHelper::iAmFileDialogDBusServer()","Funname":"QDeepinFileDialogHelper::iAmFileDialogDBusServer","Returntype":"bool","Args":""},{"Uniquefunname":"void QDeepinFileDialogHelper::initDBusFileDialogManager()","Funname":"QDeepinFileDialogHelper::initDBusFileDialogManager","Returntype":"void","Args":""},{"Uniquefunname":"void QDeepinFileDialogHelper::selectFile(const QUrl \u0026 filename)","Funname":"QDeepinFileDialogHelper::selectFile","Returntype":"void","Args":"const QUrl \u0026 filename"},{"Uniquefunname":"void QDeepinFileDialogHelper::selectNameFilter(const QString \u0026 filter)","Funname":"QDeepinFileDialogHelper::selectNameFilter","Returntype":"void","Args":"const QString \u0026 filter"},{"Uniquefunname":"QList\u003cQUrl\u003e QDeepinFileDialogHelper::selectedFiles() cons)","Funname":"QDeepinFileDialogHelper::selectedFiles","Returntype":"QList\u003cQUrl\u003e","Args":") cons"},{"Uniquefunname":"QString QDeepinFileDialogHelper::selectedNameFilter() cons)","Funname":"QDeepinFileDialogHelper::selectedNameFilter","Returntype":"QString","Args":") cons"},{"Uniquefunname":"void QDeepinFileDialogHelper::setDirectory(const QUrl \u0026 directory)","Funname":"QDeepinFileDialogHelper::setDirectory","Returntype":"void","Args":"const QUrl \u0026 directory"},{"Uniquefunname":"void QDeepinFileDialogHelper::setFilter()","Funname":"QDeepinFileDialogHelper::setFilter","Returntype":"void","Args":""},{"Uniquefunname":"bool QDeepinFileDialogHelper::show(Qt::WindowFlags flags,Qt::WindowModality modality,QWindow * parent)","Funname":"QDeepinFileDialogHelper::show","Returntype":"bool","Args":"Qt::WindowFlags flags,Qt::WindowModality modality,QWindow * parent"},{"Uniquefunname":" QDeepinFileDialogHelper::~QDeepinFileDialogHelper()","Funname":"QDeepinFileDialogHelper::~QDeepinFileDialogHelper","Returntype":"","Args":""},{"Uniquefunname":"void applyOptions()","Funname":"applyOptions","Returntype":"void","Args":""},{"Uniquefunname":"bool defaultNameFilterDisables() cons)","Funname":"defaultNameFilterDisables","Returntype":"bool","Args":") cons"},{"Uniquefunname":"QUrl directory() cons)","Funname":"directory","Returntype":"QUrl","Args":") cons"},{"Uniquefunname":"void ensureDialog() cons)","Funname":"ensureDialog","Returntype":"void","Args":") cons"},{"Uniquefunname":"void exec()","Funname":"exec","Returntype":"void","Args":""},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"bool iAmFileDialogDBusServer()","Funname":"iAmFileDialogDBusServer","Returntype":"bool","Args":""},{"Uniquefunname":"void initDBusFileDialogManager()","Funname":"initDBusFileDialogManager","Returntype":"void","Args":""},{"Uniquefunname":"void selectFile(const QUrl \u0026 filename)","Funname":"selectFile","Returntype":"void","Args":"const QUrl \u0026 filename"},{"Uniquefunname":"void selectNameFilter(const QString \u0026 filter)","Funname":"selectNameFilter","Returntype":"void","Args":"const QString \u0026 filter"},{"Uniquefunname":"QList\u003cQUrl\u003e selectedFiles() cons)","Funname":"selectedFiles","Returntype":"QList\u003cQUrl\u003e","Args":") cons"},{"Uniquefunname":"QString selectedNameFilter() cons)","Funname":"selectedNameFilter","Returntype":"QString","Args":") cons"},{"Uniquefunname":"void setDirectory(const QUrl \u0026 directory)","Funname":"setDirectory","Returntype":"void","Args":"const QUrl \u0026 directory"},{"Uniquefunname":"void setFilter()","Funname":"setFilter","Returntype":"void","Args":""},{"Uniquefunname":"bool show(Qt::WindowFlags flags,Qt::WindowModality modality,QWindow * parent)","Funname":"show","Returntype":"bool","Args":"Qt::WindowFlags flags,Qt::WindowModality modality,QWindow * parent"},{"Uniquefunname":" ~QDeepinFileDialogHelper()","Funname":"~QDeepinFileDialogHelper","Returntype":"","Args":""}],"Records":[{"Name":"enum:QDeepinFileDialogHelper::CustomWidgetType","Fields":["ComboBoxType","LineEditType","QDeepinFileDialogHelper::ComboBoxType","QDeepinFileDialogHelper::LineEditType"]},{"Name":"macro","Fields":["QDEEPINFILEDIALOGHELPER_H"]},{"Name":"class:QDeepinFileDialogHelper","Fields":["QPointer\u003cQWindow\u003e QDeepinFileDialogHelper::activeWindow","QPointer\u003cQWindow\u003e QDeepinFileDialogHelper::auxiliaryWindow","DFileDialogManager * QDeepinFileDialogHelper::manager","QPointer\u003cDFileDialogHandle\u003e QDeepinFileDialogHelper::nativeDialog","QPointer\u003cQFileDialog\u003e QDeepinFileDialogHelper::qtDialog","QPointer\u003cQFileDialog\u003e QDeepinFileDialogHelper::sourceDialog"]}]}
{"Filepath":"platformthemeplugin/qdeepintheme.h","Functions":[{"Uniquefunname":" QDeepinTheme()","Funname":"QDeepinTheme","Returntype":"","Args":""},{"Uniquefunname":" QDeepinTheme::QDeepinTheme()","Funname":"QDeepinTheme::QDeepinTheme","Returntype":"","Args":""},{"Uniquefunname":"QIconEngine * QDeepinTheme::createIconEngine(const QString \u0026 iconName) cons)","Funname":"QDeepinTheme::createIconEngine","Returntype":"QIconEngine *","Args":"const QString \u0026 iconName) cons"},{"Uniquefunname":"QPlatformDialogHelper * QDeepinTheme::createPlatformDialogHelper(DialogType type) cons)","Funname":"QDeepinTheme::createPlatformDialogHelper","Returntype":"QPlatformDialogHelper *","Args":"DialogType type) cons"},{"Uniquefunname":"QIcon QDeepinTheme::fileIcon(const QFileInfo \u0026 fileInfo,QPlatformTheme::IconOptions iconOptions=0) cons)","Funname":"QDeepinTheme::fileIcon","Returntype":"QIcon","Args":"const QFileInfo \u0026 fileInfo,QPlatformTheme::IconOptions iconOptions=0) cons"},{"Uniquefunname":"QPixmap QDeepinTheme::fileIconPixmap(const QFileInfo \u0026 fileInfo,const QSizeF \u0026 size,QPlatformTheme::IconOptions iconOptions=0) cons)","Funname":"QDeepinTheme::fileIconPixmap","Returntype":"QPixmap","Args":"const QFileInfo \u0026 fileInfo,const QSizeF \u0026 size,QPlatformTheme::IconOptions iconOptions=0) cons"},{"Uniquefunname":"const QFont * QDeepinTheme::font(Font type) cons)","Funname":"QDeepinTheme::font","Returntype":"const QFont *","Args":"Font type) cons"},{"Uniquefunname":"DThemeSettings * QDeepinTheme::getSettings()","Funname":"QDeepinTheme::getSettings","Returntype":"DThemeSettings *","Args":""},{"Uniquefunname":"const QPalette * QDeepinTheme::palette(Palette type) cons)","Funname":"QDeepinTheme::palette","Returntype":"const QPalette *","Args":"Palette type) cons"},{"Uniquefunname":"DThemeSettings * QDeepinTheme::settings() cons)","Funname":"QDeepinTheme::settings","Returntype":"DThemeSettings *","Args":") cons"},{"Uniquefunname":"QPixmap QDeepinTheme::standardPixmap(StandardPixmap sp,const QSizeF \u0026 size) cons)","Funname":"QDeepinTheme::standardPixmap","Returntype":"QPixmap","Args":"StandardPixmap sp,const QSizeF \u0026 size) cons"},{"Uniquefunname":"QVariant QDeepinTheme::themeHint(ThemeHint hint) cons)","Funname":"QDeepinTheme::themeHint","Returntype":"QVariant","Args":"ThemeHint hint) cons"},{"Uniquefunname":"bool QDeepinTheme::usePlatformNativeDialog(DialogType type) cons)","Funname":"QDeepinTheme::usePlatformNativeDialog","Returntype":"bool","Args":"DialogType type) cons"},{"Uniquefunname":" QDeepinTheme::~QDeepinTheme()","Funname":"QDeepinTheme::~QDeepinTheme","Returntype":"","Args":""},{"Uniquefunname":"QIconEngine * createIconEngine(const QString \u0026 iconName) cons)","Funname":"createIconEngine","Returntype":"QIconEngine *","Args":"const QString \u0026 iconName) cons"},{"Uniquefunname":"QPlatformDialogHelper * createPlatformDialogHelper(DialogType type) cons)","Funname":"createPlatformDialogHelper","Returntype":"QPlatformDialogHelper *","Args":"DialogType type) cons"},{"Uniquefunname":"QIcon fileIcon(const QFileInfo \u0026 fileInfo,QPlatformTheme::IconOptions iconOptions=0) cons)","Funname":"fileIcon","Returntype":"QIcon","Args":"const QFileInfo \u0026 fileInfo,QPlatformTheme::IconOptions iconOptions=0) cons"},{"Uniquefunname":"QPixmap fileIconPixmap(const QFileInfo \u0026 fileInfo,const QSizeF \u0026 size,QPlatformTheme::IconOptions iconOptions=0) cons)","Funname":"fileIconPixmap","Returntype":"QPixmap","Args":"const QFileInfo \u0026 fileInfo,const QSizeF \u0026 size,QPlatformTheme::IconOptions iconOptions=0) cons"},{"Uniquefunname":"const QFont * font(Font type) cons)","Funname":"font","Returntype":"const QFont *","Args":"Font type) cons"},{"Uniquefunname":"DThemeSettings * getSettings()","Funname":"getSettings","Returntype":"DThemeSettings *","Args":""},{"Uniquefunname":"const QPalette * palette(Palette type) cons)","Funname":"palette","Returntype":"const QPalette *","Args":"Palette type) cons"},{"Uniquefunname":"DThemeSettings * settings() cons)","Funname":"settings","Returntype":"DThemeSettings *","Args":") cons"},{"Uniquefunname":"QPixmap standardPixmap(StandardPixmap sp,const QSizeF \u0026 size) cons)","Funname":"standardPixmap","Returntype":"QPixmap","Args":"StandardPixmap sp,const QSizeF \u0026 size) cons"},{"Uniquefunname":"QVariant themeHint(ThemeHint hint) cons)","Funname":"themeHint","Returntype":"QVariant","Args":"ThemeHint hint) cons"},{"Uniquefunname":"bool usePlatformNativeDialog(DialogType type) cons)","Funname":"usePlatformNativeDialog","Returntype":"bool","Args":"DialogType type) cons"},{"Uniquefunname":" ~QDeepinTheme()","Funname":"~QDeepinTheme","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["QDEEPINTHEME_H"]},{"Name":"class:QDeepinTheme","Fields":["QMimeDatabase QDeepinTheme::m_mimeDatabase","DThemeSettings * QDeepinTheme::m_settings","bool QDeepinTheme::m_usePlatformNativeDialog","const char * QDeepinTheme::name"]}]}
{"Filepath":"platformthemeplugin/xdgiconenginecreator.h","Functions":[{"Uniquefunname":"QIconEngine * XdgIconEngineCreator::create(const QString \u0026 name)","Funname":"XdgIconEngineCreator::create","Returntype":"QIconEngine *","Args":"const QString \u0026 name"},{"Uniquefunname":"QIconEngine * create(const QString \u0026 name)","Funname":"create","Returntype":"QIconEngine *","Args":"const QString \u0026 name"}],"Records":[{"Name":"macro","Fields":["XDGICONENGINECREATOR_H"]}]}
{"Filepath":"src/dpluginloader.h","Functions":[{"Uniquefunname":"    static FactoryInterface *load(const QString \u0026baseName)","Funname":"DPluginLoader::load","Returntype":"FactoryInterface *","Args":"const QString \u0026 baseName"},{"Uniquefunname":"    static QString pluginName(const QString \u0026baseName)","Funname":"DPluginLoader::pluginName","Returntype":"QString","Args":"const QString \u0026 baseName"},{"Uniquefunname":"    static QFunctionPointer resolve(const char *symbol)","Funname":"DPluginLoader::resolve","Returntype":"QFunctionPointer","Args":"const char * symbol"},{"Uniquefunname":"    static QString resolveFromPSM(const QString \u0026moduleName)","Funname":"DPluginLoader::resolveFromPSM","Returntype":"QString","Args":"const QString \u0026 moduleName"},{"Uniquefunname":"    static QString soAbsoluteFilePath()","Funname":"DPluginLoader::soAbsoluteFilePath","Returntype":"QString","Args":""},{"Uniquefunname":"    static FactoryInterface *load(const QString \u0026baseName)","Funname":"load","Returntype":"FactoryInterface *","Args":"const QString \u0026 baseName"},{"Uniquefunname":"    static QString pluginName(const QString \u0026baseName)","Funname":"pluginName","Returntype":"QString","Args":"const QString \u0026 baseName"},{"Uniquefunname":"    static QFunctionPointer resolve(const char *symbol)","Funname":"resolve","Returntype":"QFunctionPointer","Args":"const char * symbol"},{"Uniquefunname":"    static QString resolveFromPSM(const QString \u0026moduleName)","Funname":"resolveFromPSM","Returntype":"QString","Args":"const QString \u0026 moduleName"},{"Uniquefunname":"    static QString soAbsoluteFilePath()","Funname":"soAbsoluteFilePath","Returntype":"QString","Args":""}],"Records":[{"Name":"macro","Fields":["DPLUGINLOADER_H","VERSION_STR_SYMBOL"]}]}
{"Filepath":"styleplugins/chameleon/chameleonstyle.h","Functions":[{"Uniquefunname":" ChameleonStyle()","Funname":"ChameleonStyle","Returntype":"","Args":""},{"Uniquefunname":"void _q_removeAnimation()","Funname":"_q_removeAnimation","Returntype":"void","Args":""},{"Uniquefunname":"dstyle animation(const QObject * target) cons)","Funname":"animation","Returntype":"dstyle","Args":"const QObject * target) cons"},{"Uniquefunname":" chameleon::ChameleonStyle::ChameleonStyle()","Funname":"chameleon::ChameleonStyle::ChameleonStyle","Returntype":"","Args":""},{"Uniquefunname":"void chameleon::ChameleonStyle::_q_removeAnimation()","Funname":"chameleon::ChameleonStyle::_q_removeAnimation","Returntype":"void","Args":""},{"Uniquefunname":"dstyle chameleon::ChameleonStyle::animation(const QObject * target) cons)","Funname":"chameleon::ChameleonStyle::animation","Returntype":"dstyle","Args":"const QObject * target) cons"},{"Uniquefunname":"void chameleon::ChameleonStyle::drawBorder(QPainter * p,const QStyleOption * opt,const QWidget * w) cons)","Funname":"chameleon::ChameleonStyle::drawBorder","Returntype":"void","Args":"QPainter * p,const QStyleOption * opt,const QWidget * w) cons"},{"Uniquefunname":"void chameleon::ChameleonStyle::drawButtonBoxButton(const DStyleOptionButtonBoxButton * btnopt,QPainter * p,const QRect \u0026 rect,int radius) cons)","Funname":"chameleon::ChameleonStyle::drawButtonBoxButton","Returntype":"void","Args":"const DStyleOptionButtonBoxButton * btnopt,QPainter * p,const QRect \u0026 rect,int radius) cons"},{"Uniquefunname":"QRect chameleon::ChameleonStyle::drawButtonDownArrow(const QStyleOption * opt,QPainter * p,const QWidget * w) cons)","Funname":"chameleon::ChameleonStyle::drawButtonDownArrow","Returntype":"QRect","Args":"const QStyleOption * opt,QPainter * p,const QWidget * w) cons"},{"Uniquefunname":"void chameleon::ChameleonStyle::drawCalenderEllipse(QPainter * p,const QRect \u0026 rect,int offset) cons)","Funname":"chameleon::ChameleonStyle::drawCalenderEllipse","Returntype":"void","Args":"QPainter * p,const QRect \u0026 rect,int offset) cons"},{"Uniquefunname":"bool chameleon::ChameleonStyle::drawComboBox(QPainter * painter,const QStyleOptionComboBox * comboBox,const QWidget * widget) cons)","Funname":"chameleon::ChameleonStyle::drawComboBox","Returntype":"bool","Args":"QPainter * painter,const QStyleOptionComboBox * comboBox,const QWidget * widget) cons"},{"Uniquefunname":"bool chameleon::ChameleonStyle::drawComboBoxLabel(QPainter * painter,const QStyleOptionComboBox * comboBox,const QWidget * widget) cons)","Funname":"chameleon::ChameleonStyle::drawComboBoxLabel","Returntype":"bool","Args":"QPainter * painter,const QStyleOptionComboBox * comboBox,const QWidget * widget) cons"},{"Uniquefunname":"void chameleon::ChameleonStyle::drawComplexControl(ComplexControl cc,const QStyleOptionComplex * opt,QPainter * p,const QWidget * w=nullptr) cons)","Funname":"chameleon::ChameleonStyle::drawComplexControl","Returntype":"void","Args":"ComplexControl cc,const QStyleOptionComplex * opt,QPainter * p,const QWidget * w=nullptr) cons"},{"Uniquefunname":"void chameleon::ChameleonStyle::drawControl(QStyle::ControlElement element,const QStyleOption * opt,QPainter * p,const QWidget * w=nullptr) cons)","Funname":"chameleon::ChameleonStyle::drawControl","Returntype":"void","Args":"QStyle::ControlElement element,const QStyleOption * opt,QPainter * p,const QWidget * w=nullptr) cons"},{"Uniquefunname":"void chameleon::ChameleonStyle::drawIcon(const QStyleOption * opt,QPainter * p,QRect \u0026 rect,const QIcon \u0026 icon,bool checked=false) cons)","Funname":"chameleon::ChameleonStyle::drawIcon","Returntype":"void","Args":"const QStyleOption * opt,QPainter * p,QRect \u0026 rect,const QIcon \u0026 icon,bool checked=false) cons"},{"Uniquefunname":"bool chameleon::ChameleonStyle::drawMenuBarItem(const QStyleOptionMenuItem * option,QRect \u0026 rect,QPainter * painter,const QWidget * widget) cons)","Funname":"chameleon::ChameleonStyle::drawMenuBarItem","Returntype":"bool","Args":"const QStyleOptionMenuItem * option,QRect \u0026 rect,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool chameleon::ChameleonStyle::drawMenuItem(const QStyleOptionMenuItem * option,QPainter * painter,const QWidget * widget) cons)","Funname":"chameleon::ChameleonStyle::drawMenuItem","Returntype":"bool","Args":"const QStyleOptionMenuItem * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"void chameleon::ChameleonStyle::drawMenuItemBackground(const QStyleOption * option,QPainter * painter,QStyleOptionMenuItem::MenuItemType type) cons)","Funname":"chameleon::ChameleonStyle::drawMenuItemBackground","Returntype":"void","Args":"const QStyleOption * option,QPainter * painter,QStyleOptionMenuItem::MenuItemType type) cons"},{"Uniquefunname":"void chameleon::ChameleonStyle::drawMenuItemRedPoint(const QStyleOptionMenuItem * option,QPainter * painter,const QWidget * widget) cons)","Funname":"chameleon::ChameleonStyle::drawMenuItemRedPoint","Returntype":"void","Args":"const QStyleOptionMenuItem * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"void chameleon::ChameleonStyle::drawPrimitive(QStyle::PrimitiveElement pe,const QStyleOption * opt,QPainter * p,const QWidget * w=nullptr) cons)","Funname":"chameleon::ChameleonStyle::drawPrimitive","Returntype":"void","Args":"QStyle::PrimitiveElement pe,const QStyleOption * opt,QPainter * p,const QWidget * w=nullptr) cons"},{"Uniquefunname":"void chameleon::ChameleonStyle::drawRoundedShadow(QPainter * p,const QRect \u0026 rect,const QColor \u0026 color,int frame_radius) cons)","Funname":"chameleon::ChameleonStyle::drawRoundedShadow","Returntype":"void","Args":"QPainter * p,const QRect \u0026 rect,const QColor \u0026 color,int frame_radius) cons"},{"Uniquefunname":"void chameleon::ChameleonStyle::drawShadow(QPainter * p,const QRect \u0026 rect,const QColor \u0026 color) cons)","Funname":"chameleon::ChameleonStyle::drawShadow","Returntype":"void","Args":"QPainter * p,const QRect \u0026 rect,const QColor \u0026 color) cons"},{"Uniquefunname":"void chameleon::ChameleonStyle::drawSliderHandle(const QStyleOptionComplex * opt,QRectF \u0026 rectHandle,QPainter * p,const QWidget * w) cons)","Funname":"chameleon::ChameleonStyle::drawSliderHandle","Returntype":"void","Args":"const QStyleOptionComplex * opt,QRectF \u0026 rectHandle,QPainter * p,const QWidget * w) cons"},{"Uniquefunname":"void chameleon::ChameleonStyle::drawSliderHandleFocus(const QStyleOptionComplex * opt,QRectF \u0026 rectHandle,QPainter * p,const QWidget * w) cons)","Funname":"chameleon::ChameleonStyle::drawSliderHandleFocus","Returntype":"void","Args":"const QStyleOptionComplex * opt,QRectF \u0026 rectHandle,QPainter * p,const QWidget * w) cons"},{"Uniquefunname":"bool chameleon::ChameleonStyle::drawSpinBox(const QStyleOptionSpinBox * opt,QPainter * p,const QWidget * w) cons)","Funname":"chameleon::ChameleonStyle::drawSpinBox","Returntype":"bool","Args":"const QStyleOptionSpinBox * opt,QPainter * p,const QWidget * w) cons"},{"Uniquefunname":"bool chameleon::ChameleonStyle::drawTabBar(QPainter * painter,const QStyleOptionTab * tab,const QWidget * widget) cons)","Funname":"chameleon::ChameleonStyle::drawTabBar","Returntype":"bool","Args":"QPainter * painter,const QStyleOptionTab * tab,const QWidget * widget) cons"},{"Uniquefunname":"bool chameleon::ChameleonStyle::drawTabBarCloseButton(QPainter * painter,const QStyleOption * tab,const QWidget * widget) cons)","Funname":"chameleon::ChameleonStyle::drawTabBarCloseButton","Returntype":"bool","Args":"QPainter * painter,const QStyleOption * tab,const QWidget * widget) cons"},{"Uniquefunname":"bool chameleon::ChameleonStyle::drawTabBarLabel(QPainter * painter,const QStyleOptionTab * tab,const QWidget * widget) cons)","Funname":"chameleon::ChameleonStyle::drawTabBarLabel","Returntype":"bool","Args":"QPainter * painter,const QStyleOptionTab * tab,const QWidget * widget) cons"},{"Uniquefunname":"bool chameleon::ChameleonStyle::drawTabBarScrollButton(QPainter * painter,const QStyleOption * opt,const QWidget * buttonWidget) cons)","Funname":"chameleon::ChameleonStyle::drawTabBarScrollButton","Returntype":"bool","Args":"QPainter * painter,const QStyleOption * opt,const QWidget * buttonWidget) cons"},{"Uniquefunname":"bool chameleon::ChameleonStyle::drawTableViewItem(QStyle::PrimitiveElement pe,const QStyleOption * opt,QPainter * p,const QWidget * w=nullptr) cons)","Funname":"chameleon::ChameleonStyle::drawTableViewItem","Returntype":"bool","Args":"QStyle::PrimitiveElement pe,const QStyleOption * opt,QPainter * p,const QWidget * w=nullptr) cons"},{"Uniquefunname":"QMargins chameleon::ChameleonStyle::frameExtentMargins() cons)","Funname":"chameleon::ChameleonStyle::frameExtentMargins","Returntype":"QMargins","Args":") cons"},{"Uniquefunname":"QBrush chameleon::ChameleonStyle::generatedBrush(StateFlags flags,const QBrush \u0026 base,DPalette::ColorGroup cg=DPalette::Normal,DPalette::ColorType type=DPalette::ItemBackground,const QStyleOption * option=nullptr) cons)","Funname":"chameleon::ChameleonStyle::generatedBrush","Returntype":"QBrush","Args":"StateFlags flags,const QBrush \u0026 base,DPalette::ColorGroup cg=DPalette::Normal,DPalette::ColorType type=DPalette::ItemBackground,const QStyleOption * option=nullptr) cons"},{"Uniquefunname":"QBrush chameleon::ChameleonStyle::generatedBrush(StateFlags flags,const QBrush \u0026 base,QPalette::ColorGroup cg,QPalette::ColorRole role,const QStyleOption * option) cons)","Funname":"chameleon::ChameleonStyle::generatedBrush","Returntype":"QBrush","Args":"StateFlags flags,const QBrush \u0026 base,QPalette::ColorGroup cg,QPalette::ColorRole role,const QStyleOption * option) cons"},{"Uniquefunname":"QColor chameleon::ChameleonStyle::getColor(const QStyleOption * option,DPalette::ColorType type,const QWidget * widget) cons)","Funname":"chameleon::ChameleonStyle::getColor","Returntype":"QColor","Args":"const QStyleOption * option,DPalette::ColorType type,const QWidget * widget) cons"},{"Uniquefunname":"QColor chameleon::ChameleonStyle::getColor(const QStyleOption * option,QPalette::ColorRole role) cons)","Funname":"chameleon::ChameleonStyle::getColor","Returntype":"QColor","Args":"const QStyleOption * option,QPalette::ColorRole role) cons"},{"Uniquefunname":"SubControl chameleon::ChameleonStyle::hitTestComplexControl(ComplexControl cc,const QStyleOptionComplex * opt,const QPoint \u0026 pt,const QWidget * w=nullptr) cons)","Funname":"chameleon::ChameleonStyle::hitTestComplexControl","Returntype":"SubControl","Args":"ComplexControl cc,const QStyleOptionComplex * opt,const QPoint \u0026 pt,const QWidget * w=nullptr) cons"},{"Uniquefunname":"bool chameleon::ChameleonStyle::isNoticks(const QStyleOptionSlider * slider,QPainter * p,const QWidget * w) cons)","Funname":"chameleon::ChameleonStyle::isNoticks","Returntype":"bool","Args":"const QStyleOptionSlider * slider,QPainter * p,const QWidget * w) cons"},{"Uniquefunname":"int chameleon::ChameleonStyle::pixelMetric(QStyle::PixelMetric m,const QStyleOption * opt=nullptr,const QWidget * widget=nullptr) cons)","Funname":"chameleon::ChameleonStyle::pixelMetric","Returntype":"int","Args":"QStyle::PixelMetric m,const QStyleOption * opt=nullptr,const QWidget * widget=nullptr) cons"},{"Uniquefunname":"void chameleon::ChameleonStyle::polish(QWidget * w)","Funname":"chameleon::ChameleonStyle::polish","Returntype":"void","Args":"QWidget * w"},{"Uniquefunname":"QSize chameleon::ChameleonStyle::sizeFromContents(QStyle::ContentsType ct,const QStyleOption * opt,const QSize \u0026 contentsSize,const QWidget * widget=nullptr) cons)","Funname":"chameleon::ChameleonStyle::sizeFromContents","Returntype":"QSize","Args":"QStyle::ContentsType ct,const QStyleOption * opt,const QSize \u0026 contentsSize,const QWidget * widget=nullptr) cons"},{"Uniquefunname":"void chameleon::ChameleonStyle::startAnimation(dstyle::DStyleAnimation * animation,int delay=0) cons)","Funname":"chameleon::ChameleonStyle::startAnimation","Returntype":"void","Args":"dstyle::DStyleAnimation * animation,int delay=0) cons"},{"Uniquefunname":"int chameleon::ChameleonStyle::styleHint(StyleHint sh,const QStyleOption * opt=nullptr,const QWidget * w=nullptr,QStyleHintReturn * shret=nullptr) cons)","Funname":"chameleon::ChameleonStyle::styleHint","Returntype":"int","Args":"StyleHint sh,const QStyleOption * opt=nullptr,const QWidget * w=nullptr,QStyleHintReturn * shret=nullptr) cons"},{"Uniquefunname":"QRect chameleon::ChameleonStyle::subControlRect(ComplexControl cc,const QStyleOptionComplex * opt,SubControl sc,const QWidget * w=nullptr) cons)","Funname":"chameleon::ChameleonStyle::subControlRect","Returntype":"QRect","Args":"ComplexControl cc,const QStyleOptionComplex * opt,SubControl sc,const QWidget * w=nullptr) cons"},{"Uniquefunname":"QRect chameleon::ChameleonStyle::subElementRect(QStyle::SubElement r,const QStyleOption * opt,const QWidget * widget=nullptr) cons)","Funname":"chameleon::ChameleonStyle::subElementRect","Returntype":"QRect","Args":"QStyle::SubElement r,const QStyleOption * opt,const QWidget * widget=nullptr) cons"},{"Uniquefunname":"void chameleon::ChameleonStyle::tabLayout(const QStyleOptionTab * opt,const QWidget * widget,QRect * textRect,QRect * iconRect) cons)","Funname":"chameleon::ChameleonStyle::tabLayout","Returntype":"void","Args":"const QStyleOptionTab * opt,const QWidget * widget,QRect * textRect,QRect * iconRect) cons"},{"Uniquefunname":"void chameleon::ChameleonStyle::unpolish(QApplication * application)","Funname":"chameleon::ChameleonStyle::unpolish","Returntype":"void","Args":"QApplication * application"},{"Uniquefunname":"void chameleon::ChameleonStyle::unpolish(QWidget * w)","Funname":"chameleon::ChameleonStyle::unpolish","Returntype":"void","Args":"QWidget * w"},{"Uniquefunname":"void chameleon::ChameleonStyle::updateSpinBoxButtonState(const QStyleOptionSpinBox * opt,QStyleOptionButton \u0026 button,bool isActive,bool isEnabled) cons)","Funname":"chameleon::ChameleonStyle::updateSpinBoxButtonState","Returntype":"void","Args":"const QStyleOptionSpinBox * opt,QStyleOptionButton \u0026 button,bool isActive,bool isEnabled) cons"},{"Uniquefunname":"void drawBorder(QPainter * p,const QStyleOption * opt,const QWidget * w) cons)","Funname":"drawBorder","Returntype":"void","Args":"QPainter * p,const QStyleOption * opt,const QWidget * w) cons"},{"Uniquefunname":"void drawButtonBoxButton(const DStyleOptionButtonBoxButton * btnopt,QPainter * p,const QRect \u0026 rect,int radius) cons)","Funname":"drawButtonBoxButton","Returntype":"void","Args":"const DStyleOptionButtonBoxButton * btnopt,QPainter * p,const QRect \u0026 rect,int radius) cons"},{"Uniquefunname":"QRect drawButtonDownArrow(const QStyleOption * opt,QPainter * p,const QWidget * w) cons)","Funname":"drawButtonDownArrow","Returntype":"QRect","Args":"const QStyleOption * opt,QPainter * p,const QWidget * w) cons"},{"Uniquefunname":"void drawCalenderEllipse(QPainter * p,const QRect \u0026 rect,int offset) cons)","Funname":"drawCalenderEllipse","Returntype":"void","Args":"QPainter * p,const QRect \u0026 rect,int offset) cons"},{"Uniquefunname":"bool drawComboBox(QPainter * painter,const QStyleOptionComboBox * comboBox,const QWidget * widget) cons)","Funname":"drawComboBox","Returntype":"bool","Args":"QPainter * painter,const QStyleOptionComboBox * comboBox,const QWidget * widget) cons"},{"Uniquefunname":"bool drawComboBoxLabel(QPainter * painter,const QStyleOptionComboBox * comboBox,const QWidget * widget) cons)","Funname":"drawComboBoxLabel","Returntype":"bool","Args":"QPainter * painter,const QStyleOptionComboBox * comboBox,const QWidget * widget) cons"},{"Uniquefunname":"void drawComplexControl(ComplexControl cc,const QStyleOptionComplex * opt,QPainter * p,const QWidget * w=nullptr) cons)","Funname":"drawComplexControl","Returntype":"void","Args":"ComplexControl cc,const QStyleOptionComplex * opt,QPainter * p,const QWidget * w=nullptr) cons"},{"Uniquefunname":"void drawControl(QStyle::ControlElement element,const QStyleOption * opt,QPainter * p,const QWidget * w=nullptr) cons)","Funname":"drawControl","Returntype":"void","Args":"QStyle::ControlElement element,const QStyleOption * opt,QPainter * p,const QWidget * w=nullptr) cons"},{"Uniquefunname":"void drawIcon(const QStyleOption * opt,QPainter * p,QRect \u0026 rect,const QIcon \u0026 icon,bool checked=false) cons)","Funname":"drawIcon","Returntype":"void","Args":"const QStyleOption * opt,QPainter * p,QRect \u0026 rect,const QIcon \u0026 icon,bool checked=false) cons"},{"Uniquefunname":"bool drawMenuBarItem(const QStyleOptionMenuItem * option,QRect \u0026 rect,QPainter * painter,const QWidget * widget) cons)","Funname":"drawMenuBarItem","Returntype":"bool","Args":"const QStyleOptionMenuItem * option,QRect \u0026 rect,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool drawMenuItem(const QStyleOptionMenuItem * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawMenuItem","Returntype":"bool","Args":"const QStyleOptionMenuItem * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"void drawMenuItemBackground(const QStyleOption * option,QPainter * painter,QStyleOptionMenuItem::MenuItemType type) cons)","Funname":"drawMenuItemBackground","Returntype":"void","Args":"const QStyleOption * option,QPainter * painter,QStyleOptionMenuItem::MenuItemType type) cons"},{"Uniquefunname":"void drawMenuItemRedPoint(const QStyleOptionMenuItem * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawMenuItemRedPoint","Returntype":"void","Args":"const QStyleOptionMenuItem * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"void drawPrimitive(QStyle::PrimitiveElement pe,const QStyleOption * opt,QPainter * p,const QWidget * w=nullptr) cons)","Funname":"drawPrimitive","Returntype":"void","Args":"QStyle::PrimitiveElement pe,const QStyleOption * opt,QPainter * p,const QWidget * w=nullptr) cons"},{"Uniquefunname":"void drawRoundedShadow(QPainter * p,const QRect \u0026 rect,const QColor \u0026 color,int frame_radius) cons)","Funname":"drawRoundedShadow","Returntype":"void","Args":"QPainter * p,const QRect \u0026 rect,const QColor \u0026 color,int frame_radius) cons"},{"Uniquefunname":"void drawShadow(QPainter * p,const QRect \u0026 rect,const QColor \u0026 color) cons)","Funname":"drawShadow","Returntype":"void","Args":"QPainter * p,const QRect \u0026 rect,const QColor \u0026 color) cons"},{"Uniquefunname":"void drawSliderHandle(const QStyleOptionComplex * opt,QRectF \u0026 rectHandle,QPainter * p,const QWidget * w) cons)","Funname":"drawSliderHandle","Returntype":"void","Args":"const QStyleOptionComplex * opt,QRectF \u0026 rectHandle,QPainter * p,const QWidget * w) cons"},{"Uniquefunname":"void drawSliderHandleFocus(const QStyleOptionComplex * opt,QRectF \u0026 rectHandle,QPainter * p,const QWidget * w) cons)","Funname":"drawSliderHandleFocus","Returntype":"void","Args":"const QStyleOptionComplex * opt,QRectF \u0026 rectHandle,QPainter * p,const QWidget * w) cons"},{"Uniquefunname":"bool drawSpinBox(const QStyleOptionSpinBox * opt,QPainter * p,const QWidget * w) cons)","Funname":"drawSpinBox","Returntype":"bool","Args":"const QStyleOptionSpinBox * opt,QPainter * p,const QWidget * w) cons"},{"Uniquefunname":"bool drawTabBar(QPainter * painter,const QStyleOptionTab * tab,const QWidget * widget) cons)","Funname":"drawTabBar","Returntype":"bool","Args":"QPainter * painter,const QStyleOptionTab * tab,const QWidget * widget) cons"},{"Uniquefunname":"bool drawTabBarCloseButton(QPainter * painter,const QStyleOption * tab,const QWidget * widget) cons)","Funname":"drawTabBarCloseButton","Returntype":"bool","Args":"QPainter * painter,const QStyleOption * tab,const QWidget * widget) cons"},{"Uniquefunname":"bool drawTabBarLabel(QPainter * painter,const QStyleOptionTab * tab,const QWidget * widget) cons)","Funname":"drawTabBarLabel","Returntype":"bool","Args":"QPainter * painter,const QStyleOptionTab * tab,const QWidget * widget) cons"},{"Uniquefunname":"bool drawTabBarScrollButton(QPainter * painter,const QStyleOption * opt,const QWidget * buttonWidget) cons)","Funname":"drawTabBarScrollButton","Returntype":"bool","Args":"QPainter * painter,const QStyleOption * opt,const QWidget * buttonWidget) cons"},{"Uniquefunname":"bool drawTableViewItem(QStyle::PrimitiveElement pe,const QStyleOption * opt,QPainter * p,const QWidget * w=nullptr) cons)","Funname":"drawTableViewItem","Returntype":"bool","Args":"QStyle::PrimitiveElement pe,const QStyleOption * opt,QPainter * p,const QWidget * w=nullptr) cons"},{"Uniquefunname":"QMargins frameExtentMargins() cons)","Funname":"frameExtentMargins","Returntype":"QMargins","Args":") cons"},{"Uniquefunname":"QBrush generatedBrush(StateFlags flags,const QBrush \u0026 base,DPalette::ColorGroup cg=DPalette::Normal,DPalette::ColorType type=DPalette::ItemBackground,const QStyleOption * option=nullptr) cons)","Funname":"generatedBrush","Returntype":"QBrush","Args":"StateFlags flags,const QBrush \u0026 base,DPalette::ColorGroup cg=DPalette::Normal,DPalette::ColorType type=DPalette::ItemBackground,const QStyleOption * option=nullptr) cons"},{"Uniquefunname":"QBrush generatedBrush(StateFlags flags,const QBrush \u0026 base,QPalette::ColorGroup cg,QPalette::ColorRole role,const QStyleOption * option) cons)","Funname":"generatedBrush","Returntype":"QBrush","Args":"StateFlags flags,const QBrush \u0026 base,QPalette::ColorGroup cg,QPalette::ColorRole role,const QStyleOption * option) cons"},{"Uniquefunname":"QColor getColor(const QStyleOption * option,DPalette::ColorType type,const QWidget * widget) cons)","Funname":"getColor","Returntype":"QColor","Args":"const QStyleOption * option,DPalette::ColorType type,const QWidget * widget) cons"},{"Uniquefunname":"QColor getColor(const QStyleOption * option,QPalette::ColorRole role) cons)","Funname":"getColor","Returntype":"QColor","Args":"const QStyleOption * option,QPalette::ColorRole role) cons"},{"Uniquefunname":"SubControl hitTestComplexControl(ComplexControl cc,const QStyleOptionComplex * opt,const QPoint \u0026 pt,const QWidget * w=nullptr) cons)","Funname":"hitTestComplexControl","Returntype":"SubControl","Args":"ComplexControl cc,const QStyleOptionComplex * opt,const QPoint \u0026 pt,const QWidget * w=nullptr) cons"},{"Uniquefunname":"bool isNoticks(const QStyleOptionSlider * slider,QPainter * p,const QWidget * w) cons)","Funname":"isNoticks","Returntype":"bool","Args":"const QStyleOptionSlider * slider,QPainter * p,const QWidget * w) cons"},{"Uniquefunname":"int pixelMetric(QStyle::PixelMetric m,const QStyleOption * opt=nullptr,const QWidget * widget=nullptr) cons)","Funname":"pixelMetric","Returntype":"int","Args":"QStyle::PixelMetric m,const QStyleOption * opt=nullptr,const QWidget * widget=nullptr) cons"},{"Uniquefunname":"void polish(QWidget * w)","Funname":"polish","Returntype":"void","Args":"QWidget * w"},{"Uniquefunname":"QSize sizeFromContents(QStyle::ContentsType ct,const QStyleOption * opt,const QSize \u0026 contentsSize,const QWidget * widget=nullptr) cons)","Funname":"sizeFromContents","Returntype":"QSize","Args":"QStyle::ContentsType ct,const QStyleOption * opt,const QSize \u0026 contentsSize,const QWidget * widget=nullptr) cons"},{"Uniquefunname":"void startAnimation(dstyle::DStyleAnimation * animation,int delay=0) cons)","Funname":"startAnimation","Returntype":"void","Args":"dstyle::DStyleAnimation * animation,int delay=0) cons"},{"Uniquefunname":"int styleHint(StyleHint sh,const QStyleOption * opt=nullptr,const QWidget * w=nullptr,QStyleHintReturn * shret=nullptr) cons)","Funname":"styleHint","Returntype":"int","Args":"StyleHint sh,const QStyleOption * opt=nullptr,const QWidget * w=nullptr,QStyleHintReturn * shret=nullptr) cons"},{"Uniquefunname":"QRect subControlRect(ComplexControl cc,const QStyleOptionComplex * opt,SubControl sc,const QWidget * w=nullptr) cons)","Funname":"subControlRect","Returntype":"QRect","Args":"ComplexControl cc,const QStyleOptionComplex * opt,SubControl sc,const QWidget * w=nullptr) cons"},{"Uniquefunname":"QRect subElementRect(QStyle::SubElement r,const QStyleOption * opt,const QWidget * widget=nullptr) cons)","Funname":"subElementRect","Returntype":"QRect","Args":"QStyle::SubElement r,const QStyleOption * opt,const QWidget * widget=nullptr) cons"},{"Uniquefunname":"void tabLayout(const QStyleOptionTab * opt,const QWidget * widget,QRect * textRect,QRect * iconRect) cons)","Funname":"tabLayout","Returntype":"void","Args":"const QStyleOptionTab * opt,const QWidget * widget,QRect * textRect,QRect * iconRect) cons"},{"Uniquefunname":"void unpolish(QApplication * application)","Funname":"unpolish","Returntype":"void","Args":"QApplication * application"},{"Uniquefunname":"void unpolish(QWidget * w)","Funname":"unpolish","Returntype":"void","Args":"QWidget * w"},{"Uniquefunname":"void updateSpinBoxButtonState(const QStyleOptionSpinBox * opt,QStyleOptionButton \u0026 button,bool isActive,bool isEnabled) cons)","Funname":"updateSpinBoxButtonState","Returntype":"void","Args":"const QStyleOptionSpinBox * opt,QStyleOptionButton \u0026 button,bool isActive,bool isEnabled) cons"}],"Records":[{"Name":"macro","Fields":["CHAMELEONSTYLE_H"]},{"Name":"namespace","Fields":["chameleon","dstyle"]},{"Name":"class:chameleon::ChameleonStyle","Fields":["QHash\u003cconst QObject *,dstyle::DStyleAnimation * \u003e chameleon::ChameleonStyle::animations"]}]}
{"Filepath":"styleplugins/chameleon/common.h","Functions":null,"Records":[{"Name":"enum:chameleon::Corner","Fields":["AllCorners","CornerBottomLeft","CornerBottomRight","CornerTopLeft","CornerTopRight","CornersBottom","CornersLeft","CornersRight","CornersTop","chameleon::AllCorners","chameleon::CornerBottomLeft","chameleon::CornerBottomRight","chameleon::CornerTopLeft","chameleon::CornerTopRight","chameleon::CornersBottom","chameleon::CornersLeft","chameleon::CornersRight","chameleon::CornersTop"]},{"Name":"enum:chameleon::Metrics","Fields":["Button_ItemSpacing","Button_MarginWidth","Button_MinWidth","CheckBox_FocusMarginWidth","CheckBox_FrameWidth","CheckBox_ItemSpacing","CheckBox_Size","ComboBox_ArrowButtonWidth","ComboBox_FrameWidth","Frame_BorderSpacing","Frame_FrameRadius","Frame_FrameWidth","GroupBox_TitleMarginWidth","GroupBox_TopMargin","Header_ArrowSize","Header_ItemSpacing","Header_MarginWidth","Icon_Margins","Icon_Size","ItemView_ArrowSize","ItemView_ItemMarginWidth","Layout_ChildMarginWidth","Layout_DefaultSpacing","Layout_TopLevelMarginWidth","LineEdit_FrameWidth","LineEdit_LeftMargin","MenuBarItem_MarginHeight","MenuBarItem_MarginWidth","MenuBar_ItemSpacing","MenuButton_IndicatorMargin","MenuItem_AcceleratorSpace","MenuItem_ItemSpacing","MenuItem_MarginWidth","MenuItem_TabSpacing","Menu_ArrowHMargin","Menu_CheckMarkWidth","Menu_FrameWidth","Menu_HMargin","Menu_ItemFrameWidth","Menu_ItemHMargin","Menu_ItemHTextMargin","Menu_ItemVMargin","Menu_ItemVTextMargin","Menu_PanelRightPadding","Menu_RightBorder","Menu_SeparatorItemHMargin","Menu_VMargin","Painter_PenWidth","ProgressBar_BorderWidth","ProgressBar_BusyIndicatorSize","ProgressBar_ItemSpacing","ProgressBar_MinimumStyleHeight","ProgressBar_Radius","ScrollBar_DoubleButtonHeight","ScrollBar_Extend","ScrollBar_MinSliderHeight","ScrollBar_NoButtonHeight","ScrollBar_SingleButtonHeight","ScrollBar_SliderMinWidget","ScrollBar_SliderWidth","Shadow_Overlap","Shadow_Radius","Shadow_XOffset","Shadow_YOffset","SidePanel_ItemMarginWidth","Slider_ControlThickness","Slider_GrooveThickness","Slider_TickLength","Slider_TickMarginWidth","Slider_TickmarkOffset","SpinBox_ArrowButtonWidth","SpinBox_ButtonIconWidth","SpinBox_FrameWidth","SpinBox_MiniHeight","Splitter_SplitterWidth","TabBar_BaseOverlap","TabBar_TabButtonSize","TabBar_TabItemSpacing","TabBar_TabMargin","TabBar_TabMarginHeight","TabBar_TabMarginWidth","TabBar_TabMinHeight","TabBar_TabMinWidth","TabBar_TabOverlap","TabWidget_MarginWidth","TabletTabBar_TabButtonSize","TitleBar_MarginWidth","ToolBar_ExtensionWidth","ToolBar_FrameWidth","ToolBar_HandleExtent","ToolBar_HandleWidth","ToolBar_ItemSpacing","ToolBar_SeparatorWidth","ToolBox_TabItemSpacing","ToolBox_TabMarginWidth","ToolBox_TabMinWidth","ToolButton_AlignCenterPadding","ToolButton_AlignLeftMargin","ToolButton_AlignLeftPadding","ToolButton_AlignRightPadding","ToolButton_InlineIndicatorWidth","ToolButton_ItemSpacing","ToolButton_MarginWidth","ToolTip_FrameWidth","chameleon::Button_ItemSpacing","chameleon::Button_MarginWidth","chameleon::Button_MinWidth","chameleon::CheckBox_FocusMarginWidth","chameleon::CheckBox_FrameWidth","chameleon::CheckBox_ItemSpacing","chameleon::CheckBox_Size","chameleon::ComboBox_ArrowButtonWidth","chameleon::ComboBox_FrameWidth","chameleon::Frame_BorderSpacing","chameleon::Frame_FrameRadius","chameleon::Frame_FrameWidth","chameleon::GroupBox_TitleMarginWidth","chameleon::GroupBox_TopMargin","chameleon::Header_ArrowSize","chameleon::Header_ItemSpacing","chameleon::Header_MarginWidth","chameleon::Icon_Margins","chameleon::Icon_Size","chameleon::ItemView_ArrowSize","chameleon::ItemView_ItemMarginWidth","chameleon::Layout_ChildMarginWidth","chameleon::Layout_DefaultSpacing","chameleon::Layout_TopLevelMarginWidth","chameleon::LineEdit_FrameWidth","chameleon::LineEdit_LeftMargin","chameleon::MenuBarItem_MarginHeight","chameleon::MenuBarItem_MarginWidth","chameleon::MenuBar_ItemSpacing","chameleon::MenuButton_IndicatorMargin","chameleon::MenuItem_AcceleratorSpace","chameleon::MenuItem_ItemSpacing","chameleon::MenuItem_MarginWidth","chameleon::MenuItem_TabSpacing","chameleon::Menu_ArrowHMargin","chameleon::Menu_CheckMarkWidth","chameleon::Menu_FrameWidth","chameleon::Menu_HMargin","chameleon::Menu_ItemFrameWidth","chameleon::Menu_ItemHMargin","chameleon::Menu_ItemHTextMargin","chameleon::Menu_ItemVMargin","chameleon::Menu_ItemVTextMargin","chameleon::Menu_PanelRightPadding","chameleon::Menu_RightBorder","chameleon::Menu_SeparatorItemHMargin","chameleon::Menu_VMargin","chameleon::Painter_PenWidth","chameleon::ProgressBar_BorderWidth","chameleon::ProgressBar_BusyIndicatorSize","chameleon::ProgressBar_ItemSpacing","chameleon::ProgressBar_MinimumStyleHeight","chameleon::ProgressBar_Radius","chameleon::ScrollBar_DoubleButtonHeight","chameleon::ScrollBar_Extend","chameleon::ScrollBar_MinSliderHeight","chameleon::ScrollBar_NoButtonHeight","chameleon::ScrollBar_SingleButtonHeight","chameleon::ScrollBar_SliderMinWidget","chameleon::ScrollBar_SliderWidth","chameleon::Shadow_Overlap","chameleon::Shadow_Radius","chameleon::Shadow_XOffset","chameleon::Shadow_YOffset","chameleon::SidePanel_ItemMarginWidth","chameleon::Slider_ControlThickness","chameleon::Slider_GrooveThickness","chameleon::Slider_TickLength","chameleon::Slider_TickMarginWidth","chameleon::Slider_TickmarkOffset","chameleon::SpinBox_ArrowButtonWidth","chameleon::SpinBox_ButtonIconWidth","chameleon::SpinBox_FrameWidth","chameleon::SpinBox_MiniHeight","chameleon::Splitter_SplitterWidth","chameleon::TabBar_BaseOverlap","chameleon::TabBar_TabButtonSize","chameleon::TabBar_TabItemSpacing","chameleon::TabBar_TabMargin","chameleon::TabBar_TabMarginHeight","chameleon::TabBar_TabMarginWidth","chameleon::TabBar_TabMinHeight","chameleon::TabBar_TabMinWidth","chameleon::TabBar_TabOverlap","chameleon::TabWidget_MarginWidth","chameleon::TabletTabBar_TabButtonSize","chameleon::TitleBar_MarginWidth","chameleon::ToolBar_ExtensionWidth","chameleon::ToolBar_FrameWidth","chameleon::ToolBar_HandleExtent","chameleon::ToolBar_HandleWidth","chameleon::ToolBar_ItemSpacing","chameleon::ToolBar_SeparatorWidth","chameleon::ToolBox_TabItemSpacing","chameleon::ToolBox_TabMarginWidth","chameleon::ToolBox_TabMinWidth","chameleon::ToolButton_AlignCenterPadding","chameleon::ToolButton_AlignLeftMargin","chameleon::ToolButton_AlignLeftPadding","chameleon::ToolButton_AlignRightPadding","chameleon::ToolButton_InlineIndicatorWidth","chameleon::ToolButton_ItemSpacing","chameleon::ToolButton_MarginWidth","chameleon::ToolTip_FrameWidth"]},{"Name":"macro","Fields":["COMMON_H"]},{"Name":"namespace","Fields":["chameleon"]}]}
{"Filepath":"styleplugins/dstyleplugin/colorutils.h","Functions":[{"Uniquefunname":"QColor alphaColor(QColor color,qreal alpha)","Funname":"alphaColor","Returntype":"QColor","Args":"QColor color,qreal alpha"},{"Uniquefunname":"QColor dstyle::ColorUtils::alphaColor(QColor color,qreal alpha)","Funname":"dstyle::ColorUtils::alphaColor","Returntype":"QColor","Args":"QColor color,qreal alpha"}],"Records":[{"Name":"macro","Fields":["COLORUTILS_H"]},{"Name":"namespace","Fields":["dstyle"]}]}
{"Filepath":"styleplugins/dstyleplugin/common.h","Functions":null,"Records":[{"Name":"enum:dstyle::Corner","Fields":["AllCorners","CornerBottomLeft","CornerBottomRight","CornerTopLeft","CornerTopRight","CornersBottom","CornersLeft","CornersRight","CornersTop","dstyle::AllCorners","dstyle::CornerBottomLeft","dstyle::CornerBottomRight","dstyle::CornerTopLeft","dstyle::CornerTopRight","dstyle::CornersBottom","dstyle::CornersLeft","dstyle::CornersRight","dstyle::CornersTop"]},{"Name":"enum:dstyle::Metrics","Fields":["Button_ItemSpacing","Button_MarginWidth","Button_MinWidth","CheckBox_FocusMarginWidth","CheckBox_ItemSpacing","CheckBox_Size","ComboBox_FrameWidth","Frame_FrameRadius","Frame_FrameWidth","GroupBox_TitleMarginWidth","GroupBox_TopMargin","Header_ArrowSize","Header_ItemSpacing","Header_MarginWidth","ItemView_ArrowSize","ItemView_ItemMarginWidth","Layout_ChildMarginWidth","Layout_DefaultSpacing","Layout_TopLevelMarginWidth","LineEdit_FrameWidth","LineEdit_LeftMargin","MenuBarItem_MarginHeight","MenuBarItem_MarginWidth","MenuBar_ItemSpacing","MenuButton_IndicatorWidth","MenuItem_AcceleratorSpace","MenuItem_ItemSpacing","MenuItem_MarginWidth","Menu_ArrowHMargin","Menu_CheckMarkWidth","Menu_FrameWidth","Menu_HMargin","Menu_ItemFrameWidth","Menu_ItemHMargin","Menu_ItemHTextMargin","Menu_ItemVMargin","Menu_ItemVTextMargin","Menu_PanelRightPadding","Menu_RightBorder","Menu_SeparatorItemHMargin","Menu_VMargin","Painter_PenWidth","ProgressBar_BorderWidth","ProgressBar_BusyIndicatorSize","ProgressBar_ItemSpacing","ProgressBar_Radius","ScrollBar_DoubleButtonHeight","ScrollBar_Extend","ScrollBar_MinSliderHeight","ScrollBar_NoButtonHeight","ScrollBar_SingleButtonHeight","ScrollBar_SliderWidth","Shadow_Overlap","SidePanel_ItemMarginWidth","Slider_ControlThickness","Slider_GrooveThickness","Slider_TickLength","Slider_TickMarginWidth","SpinBox_ArrowButtonWidth","SpinBox_FrameWidth","Splitter_SplitterWidth","TabBar_BaseOverlap","TabBar_TabItemSpacing","TabBar_TabMarginHeight","TabBar_TabMarginWidth","TabBar_TabMinHeight","TabBar_TabMinWidth","TabBar_TabOverlap","TabWidget_MarginWidth","TitleBar_MarginWidth","ToolBar_ExtensionWidth","ToolBar_FrameWidth","ToolBar_HandleExtent","ToolBar_HandleWidth","ToolBar_ItemSpacing","ToolBar_SeparatorWidth","ToolBox_TabItemSpacing","ToolBox_TabMarginWidth","ToolBox_TabMinWidth","ToolButton_InlineIndicatorWidth","ToolButton_ItemSpacing","ToolButton_MarginWidth","ToolTip_FrameWidth","dstyle::Button_ItemSpacing","dstyle::Button_MarginWidth","dstyle::Button_MinWidth","dstyle::CheckBox_FocusMarginWidth","dstyle::CheckBox_ItemSpacing","dstyle::CheckBox_Size","dstyle::ComboBox_FrameWidth","dstyle::Frame_FrameRadius","dstyle::Frame_FrameWidth","dstyle::GroupBox_TitleMarginWidth","dstyle::GroupBox_TopMargin","dstyle::Header_ArrowSize","dstyle::Header_ItemSpacing","dstyle::Header_MarginWidth","dstyle::ItemView_ArrowSize","dstyle::ItemView_ItemMarginWidth","dstyle::Layout_ChildMarginWidth","dstyle::Layout_DefaultSpacing","dstyle::Layout_TopLevelMarginWidth","dstyle::LineEdit_FrameWidth","dstyle::LineEdit_LeftMargin","dstyle::MenuBarItem_MarginHeight","dstyle::MenuBarItem_MarginWidth","dstyle::MenuBar_ItemSpacing","dstyle::MenuButton_IndicatorWidth","dstyle::MenuItem_AcceleratorSpace","dstyle::MenuItem_ItemSpacing","dstyle::MenuItem_MarginWidth","dstyle::Menu_ArrowHMargin","dstyle::Menu_CheckMarkWidth","dstyle::Menu_FrameWidth","dstyle::Menu_HMargin","dstyle::Menu_ItemFrameWidth","dstyle::Menu_ItemHMargin","dstyle::Menu_ItemHTextMargin","dstyle::Menu_ItemVMargin","dstyle::Menu_ItemVTextMargin","dstyle::Menu_PanelRightPadding","dstyle::Menu_RightBorder","dstyle::Menu_SeparatorItemHMargin","dstyle::Menu_VMargin","dstyle::Painter_PenWidth","dstyle::ProgressBar_BorderWidth","dstyle::ProgressBar_BusyIndicatorSize","dstyle::ProgressBar_ItemSpacing","dstyle::ProgressBar_Radius","dstyle::ScrollBar_DoubleButtonHeight","dstyle::ScrollBar_Extend","dstyle::ScrollBar_MinSliderHeight","dstyle::ScrollBar_NoButtonHeight","dstyle::ScrollBar_SingleButtonHeight","dstyle::ScrollBar_SliderWidth","dstyle::Shadow_Overlap","dstyle::SidePanel_ItemMarginWidth","dstyle::Slider_ControlThickness","dstyle::Slider_GrooveThickness","dstyle::Slider_TickLength","dstyle::Slider_TickMarginWidth","dstyle::SpinBox_ArrowButtonWidth","dstyle::SpinBox_FrameWidth","dstyle::Splitter_SplitterWidth","dstyle::TabBar_BaseOverlap","dstyle::TabBar_TabItemSpacing","dstyle::TabBar_TabMarginHeight","dstyle::TabBar_TabMarginWidth","dstyle::TabBar_TabMinHeight","dstyle::TabBar_TabMinWidth","dstyle::TabBar_TabOverlap","dstyle::TabWidget_MarginWidth","dstyle::TitleBar_MarginWidth","dstyle::ToolBar_ExtensionWidth","dstyle::ToolBar_FrameWidth","dstyle::ToolBar_HandleExtent","dstyle::ToolBar_HandleWidth","dstyle::ToolBar_ItemSpacing","dstyle::ToolBar_SeparatorWidth","dstyle::ToolBox_TabItemSpacing","dstyle::ToolBox_TabMarginWidth","dstyle::ToolBox_TabMinWidth","dstyle::ToolButton_InlineIndicatorWidth","dstyle::ToolButton_ItemSpacing","dstyle::ToolButton_MarginWidth","dstyle::ToolTip_FrameWidth"]},{"Name":"macro","Fields":["COMMON_H"]},{"Name":"enum:dstyle::StyleType","Fields":["StyleDark","StyleLight","StyleSemiDark","StyleSemiLight","dstyle::StyleDark","dstyle::StyleLight","dstyle::StyleSemiDark","dstyle::StyleSemiLight"]},{"Name":"namespace","Fields":["dstyle"]}]}
{"Filepath":"styleplugins/dstyleplugin/commonhelper.h","Functions":[{"Uniquefunname":"void dstyle::CommonHelper::renderFrame(QPainter * painter,const QRect \u0026 rect,const QBrush \u0026 brush,const QBrush \u0026 outline)","Funname":"dstyle::CommonHelper::renderFrame","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,const QBrush \u0026 brush,const QBrush \u0026 outline"},{"Uniquefunname":"Style * dstyle::CommonHelper::widgetStyle(const QWidget * widget)","Funname":"dstyle::CommonHelper::widgetStyle","Returntype":"Style *","Args":"const QWidget * widget"},{"Uniquefunname":"void renderFrame(QPainter * painter,const QRect \u0026 rect,const QBrush \u0026 brush,const QBrush \u0026 outline)","Funname":"renderFrame","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,const QBrush \u0026 brush,const QBrush \u0026 outline"},{"Uniquefunname":"Style * widgetStyle(const QWidget * widget)","Funname":"widgetStyle","Returntype":"Style *","Args":"const QWidget * widget"}],"Records":[{"Name":"macro","Fields":["COMMONHELPER_H"]},{"Name":"namespace","Fields":["dstyle"]}]}
{"Filepath":"styleplugins/dstyleplugin/dstyleanimation.h","Functions":[{"Uniquefunname":" DBlendStyleAnimation(Type type,QObject * target)","Funname":"DBlendStyleAnimation","Returntype":"","Args":"Type type,QObject * target"},{"Uniquefunname":" DNumberStyleAnimation(QObject * target)","Funname":"DNumberStyleAnimation","Returntype":"","Args":"QObject * target"},{"Uniquefunname":" DProgressStyleAnimation(int speed,QObject * target)","Funname":"DProgressStyleAnimation","Returntype":"","Args":"int speed,QObject * target"},{"Uniquefunname":" DScrollbarStyleAnimation(Mode mode,QObject * target)","Funname":"DScrollbarStyleAnimation","Returntype":"","Args":"Mode mode,QObject * target"},{"Uniquefunname":" DStyleAnimation(QObject * target)","Funname":"DStyleAnimation","Returntype":"","Args":"QObject * target"},{"Uniquefunname":"int animationStep() cons)","Funname":"animationStep","Returntype":"int","Args":") cons"},{"Uniquefunname":"QImage currentImage() cons)","Funname":"currentImage","Returntype":"QImage","Args":") cons"},{"Uniquefunname":"qreal currentValue() cons)","Funname":"currentValue","Returntype":"qreal","Args":") cons"},{"Uniquefunname":"int delay() cons)","Funname":"delay","Returntype":"int","Args":") cons"},{"Uniquefunname":" dstyle::DBlendStyleAnimation::DBlendStyleAnimation(Type type,QObject * target)","Funname":"dstyle::DBlendStyleAnimation::DBlendStyleAnimation","Returntype":"","Args":"Type type,QObject * target"},{"Uniquefunname":"QImage dstyle::DBlendStyleAnimation::currentImage() cons)","Funname":"dstyle::DBlendStyleAnimation::currentImage","Returntype":"QImage","Args":") cons"},{"Uniquefunname":"QImage dstyle::DBlendStyleAnimation::endImage() cons)","Funname":"dstyle::DBlendStyleAnimation::endImage","Returntype":"QImage","Args":") cons"},{"Uniquefunname":"void dstyle::DBlendStyleAnimation::setEndImage(const QImage \u0026 image)","Funname":"dstyle::DBlendStyleAnimation::setEndImage","Returntype":"void","Args":"const QImage \u0026 image"},{"Uniquefunname":"void dstyle::DBlendStyleAnimation::setStartImage(const QImage \u0026 image)","Funname":"dstyle::DBlendStyleAnimation::setStartImage","Returntype":"void","Args":"const QImage \u0026 image"},{"Uniquefunname":"QImage dstyle::DBlendStyleAnimation::startImage() cons)","Funname":"dstyle::DBlendStyleAnimation::startImage","Returntype":"QImage","Args":") cons"},{"Uniquefunname":"void dstyle::DBlendStyleAnimation::updateCurrentTime(int time)","Funname":"dstyle::DBlendStyleAnimation::updateCurrentTime","Returntype":"void","Args":"int time"},{"Uniquefunname":" dstyle::DNumberStyleAnimation::DNumberStyleAnimation(QObject * target)","Funname":"dstyle::DNumberStyleAnimation::DNumberStyleAnimation","Returntype":"","Args":"QObject * target"},{"Uniquefunname":"qreal dstyle::DNumberStyleAnimation::currentValue() cons)","Funname":"dstyle::DNumberStyleAnimation::currentValue","Returntype":"qreal","Args":") cons"},{"Uniquefunname":"qreal dstyle::DNumberStyleAnimation::endValue() cons)","Funname":"dstyle::DNumberStyleAnimation::endValue","Returntype":"qreal","Args":") cons"},{"Uniquefunname":"bool dstyle::DNumberStyleAnimation::isUpdateNeeded() cons)","Funname":"dstyle::DNumberStyleAnimation::isUpdateNeeded","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void dstyle::DNumberStyleAnimation::setEndValue(qreal value)","Funname":"dstyle::DNumberStyleAnimation::setEndValue","Returntype":"void","Args":"qreal value"},{"Uniquefunname":"void dstyle::DNumberStyleAnimation::setStartValue(qreal value)","Funname":"dstyle::DNumberStyleAnimation::setStartValue","Returntype":"void","Args":"qreal value"},{"Uniquefunname":"qreal dstyle::DNumberStyleAnimation::startValue() cons)","Funname":"dstyle::DNumberStyleAnimation::startValue","Returntype":"qreal","Args":") cons"},{"Uniquefunname":" dstyle::DProgressStyleAnimation::DProgressStyleAnimation(int speed,QObject * target)","Funname":"dstyle::DProgressStyleAnimation::DProgressStyleAnimation","Returntype":"","Args":"int speed,QObject * target"},{"Uniquefunname":"int dstyle::DProgressStyleAnimation::animationStep() cons)","Funname":"dstyle::DProgressStyleAnimation::animationStep","Returntype":"int","Args":") cons"},{"Uniquefunname":"bool dstyle::DProgressStyleAnimation::isUpdateNeeded() cons)","Funname":"dstyle::DProgressStyleAnimation::isUpdateNeeded","Returntype":"bool","Args":") cons"},{"Uniquefunname":"int dstyle::DProgressStyleAnimation::progressStep(int width) cons)","Funname":"dstyle::DProgressStyleAnimation::progressStep","Returntype":"int","Args":"int width) cons"},{"Uniquefunname":"void dstyle::DProgressStyleAnimation::setSpeed(int speed)","Funname":"dstyle::DProgressStyleAnimation::setSpeed","Returntype":"void","Args":"int speed"},{"Uniquefunname":"int dstyle::DProgressStyleAnimation::speed() cons)","Funname":"dstyle::DProgressStyleAnimation::speed","Returntype":"int","Args":") cons"},{"Uniquefunname":" dstyle::DScrollbarStyleAnimation::DScrollbarStyleAnimation(Mode mode,QObject * target)","Funname":"dstyle::DScrollbarStyleAnimation::DScrollbarStyleAnimation","Returntype":"","Args":"Mode mode,QObject * target"},{"Uniquefunname":"Mode dstyle::DScrollbarStyleAnimation::mode() cons)","Funname":"dstyle::DScrollbarStyleAnimation::mode","Returntype":"Mode","Args":") cons"},{"Uniquefunname":"void dstyle::DScrollbarStyleAnimation::setActive(bool active)","Funname":"dstyle::DScrollbarStyleAnimation::setActive","Returntype":"void","Args":"bool active"},{"Uniquefunname":"bool dstyle::DScrollbarStyleAnimation::wasActive() cons)","Funname":"dstyle::DScrollbarStyleAnimation::wasActive","Returntype":"bool","Args":") cons"},{"Uniquefunname":" dstyle::DStyleAnimation::DStyleAnimation(QObject * target)","Funname":"dstyle::DStyleAnimation::DStyleAnimation","Returntype":"","Args":"QObject * target"},{"Uniquefunname":"int dstyle::DStyleAnimation::delay() cons)","Funname":"dstyle::DStyleAnimation::delay","Returntype":"int","Args":") cons"},{"Uniquefunname":"int dstyle::DStyleAnimation::duration() cons)","Funname":"dstyle::DStyleAnimation::duration","Returntype":"int","Args":") cons"},{"Uniquefunname":"FrameRate dstyle::DStyleAnimation::frameRate() cons)","Funname":"dstyle::DStyleAnimation::frameRate","Returntype":"FrameRate","Args":") cons"},{"Uniquefunname":"bool dstyle::DStyleAnimation::isUpdateNeeded() cons)","Funname":"dstyle::DStyleAnimation::isUpdateNeeded","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void dstyle::DStyleAnimation::setDelay(int delay)","Funname":"dstyle::DStyleAnimation::setDelay","Returntype":"void","Args":"int delay"},{"Uniquefunname":"void dstyle::DStyleAnimation::setDuration(int duration)","Funname":"dstyle::DStyleAnimation::setDuration","Returntype":"void","Args":"int duration"},{"Uniquefunname":"void dstyle::DStyleAnimation::setFrameRate(FrameRate fps)","Funname":"dstyle::DStyleAnimation::setFrameRate","Returntype":"void","Args":"FrameRate fps"},{"Uniquefunname":"void dstyle::DStyleAnimation::setStartTime(const QTime \u0026 time)","Funname":"dstyle::DStyleAnimation::setStartTime","Returntype":"void","Args":"const QTime \u0026 time"},{"Uniquefunname":"void dstyle::DStyleAnimation::start()","Funname":"dstyle::DStyleAnimation::start","Returntype":"void","Args":""},{"Uniquefunname":"QTime dstyle::DStyleAnimation::startTime() cons)","Funname":"dstyle::DStyleAnimation::startTime","Returntype":"QTime","Args":") cons"},{"Uniquefunname":"QObject * dstyle::DStyleAnimation::target() cons)","Funname":"dstyle::DStyleAnimation::target","Returntype":"QObject *","Args":") cons"},{"Uniquefunname":"void dstyle::DStyleAnimation::updateCurrentTime(int time)","Funname":"dstyle::DStyleAnimation::updateCurrentTime","Returntype":"void","Args":"int time"},{"Uniquefunname":"void dstyle::DStyleAnimation::updateTarget()","Funname":"dstyle::DStyleAnimation::updateTarget","Returntype":"void","Args":""},{"Uniquefunname":" dstyle::DStyleAnimation::~DStyleAnimation()","Funname":"dstyle::DStyleAnimation::~DStyleAnimation","Returntype":"","Args":""},{"Uniquefunname":"int duration() cons)","Funname":"duration","Returntype":"int","Args":") cons"},{"Uniquefunname":"QImage endImage() cons)","Funname":"endImage","Returntype":"QImage","Args":") cons"},{"Uniquefunname":"qreal endValue() cons)","Funname":"endValue","Returntype":"qreal","Args":") cons"},{"Uniquefunname":"FrameRate frameRate() cons)","Funname":"frameRate","Returntype":"FrameRate","Args":") cons"},{"Uniquefunname":"bool isUpdateNeeded() cons)","Funname":"isUpdateNeeded","Returntype":"bool","Args":") cons"},{"Uniquefunname":"bool isUpdateNeeded() cons)","Funname":"isUpdateNeeded","Returntype":"bool","Args":") cons"},{"Uniquefunname":"bool isUpdateNeeded() cons)","Funname":"isUpdateNeeded","Returntype":"bool","Args":") cons"},{"Uniquefunname":"Mode mode() cons)","Funname":"mode","Returntype":"Mode","Args":") cons"},{"Uniquefunname":"int progressStep(int width) cons)","Funname":"progressStep","Returntype":"int","Args":"int width) cons"},{"Uniquefunname":"void setActive(bool active)","Funname":"setActive","Returntype":"void","Args":"bool active"},{"Uniquefunname":"void setDelay(int delay)","Funname":"setDelay","Returntype":"void","Args":"int delay"},{"Uniquefunname":"void setDuration(int duration)","Funname":"setDuration","Returntype":"void","Args":"int duration"},{"Uniquefunname":"void setEndImage(const QImage \u0026 image)","Funname":"setEndImage","Returntype":"void","Args":"const QImage \u0026 image"},{"Uniquefunname":"void setEndValue(qreal value)","Funname":"setEndValue","Returntype":"void","Args":"qreal value"},{"Uniquefunname":"void setFrameRate(FrameRate fps)","Funname":"setFrameRate","Returntype":"void","Args":"FrameRate fps"},{"Uniquefunname":"void setSpeed(int speed)","Funname":"setSpeed","Returntype":"void","Args":"int speed"},{"Uniquefunname":"void setStartImage(const QImage \u0026 image)","Funname":"setStartImage","Returntype":"void","Args":"const QImage \u0026 image"},{"Uniquefunname":"void setStartTime(const QTime \u0026 time)","Funname":"setStartTime","Returntype":"void","Args":"const QTime \u0026 time"},{"Uniquefunname":"void setStartValue(qreal value)","Funname":"setStartValue","Returntype":"void","Args":"qreal value"},{"Uniquefunname":"int speed() cons)","Funname":"speed","Returntype":"int","Args":") cons"},{"Uniquefunname":"void start()","Funname":"start","Returntype":"void","Args":""},{"Uniquefunname":"QImage startImage() cons)","Funname":"startImage","Returntype":"QImage","Args":") cons"},{"Uniquefunname":"QTime startTime() cons)","Funname":"startTime","Returntype":"QTime","Args":") cons"},{"Uniquefunname":"qreal startValue() cons)","Funname":"startValue","Returntype":"qreal","Args":") cons"},{"Uniquefunname":"QObject * target() cons)","Funname":"target","Returntype":"QObject *","Args":") cons"},{"Uniquefunname":"void updateCurrentTime(int time)","Funname":"updateCurrentTime","Returntype":"void","Args":"int time"},{"Uniquefunname":"void updateCurrentTime(int time)","Funname":"updateCurrentTime","Returntype":"void","Args":"int time"},{"Uniquefunname":"void updateTarget()","Funname":"updateTarget","Returntype":"void","Args":""},{"Uniquefunname":"bool wasActive() cons)","Funname":"wasActive","Returntype":"bool","Args":") cons"},{"Uniquefunname":" ~DStyleAnimation()","Funname":"~DStyleAnimation","Returntype":"","Args":""}],"Records":[{"Name":"enum:dstyle::DScrollbarStyleAnimation::Mode","Fields":["Activating","Deactivating","dstyle::DScrollbarStyleAnimation::Activating","dstyle::DScrollbarStyleAnimation::Deactivating"]},{"Name":"enum:dstyle::DStyleAnimation::FrameRate","Fields":["DefaultFps","SixtyFps","ThirtyFps","TwentyFps","dstyle::DStyleAnimation::DefaultFps","dstyle::DStyleAnimation::SixtyFps","dstyle::DStyleAnimation::ThirtyFps","dstyle::DStyleAnimation::TwentyFps"]},{"Name":"enum:dstyle::DBlendStyleAnimation::Type","Fields":["Pulse","Transition","dstyle::DBlendStyleAnimation::Pulse","dstyle::DBlendStyleAnimation::Transition"]},{"Name":"macro","Fields":["QSTYLEANIMATION"]},{"Name":"namespace","Fields":["dstyle"]},{"Name":"class:dstyle::DBlendStyleAnimation","Fields":["QImage dstyle::DBlendStyleAnimation::_current","QImage dstyle::DBlendStyleAnimation::_end","QImage dstyle::DBlendStyleAnimation::_start","Type dstyle::DBlendStyleAnimation::_type"]},{"Name":"class:dstyle::DNumberStyleAnimation","Fields":["qreal dstyle::DNumberStyleAnimation::_end","qreal dstyle::DNumberStyleAnimation::_prev","qreal dstyle::DNumberStyleAnimation::_start"]},{"Name":"class:dstyle::DProgressStyleAnimation","Fields":["int dstyle::DProgressStyleAnimation::_speed","int dstyle::DProgressStyleAnimation::_step"]},{"Name":"class:dstyle::DScrollbarStyleAnimation","Fields":["bool dstyle::DScrollbarStyleAnimation::_active","Mode dstyle::DScrollbarStyleAnimation::_mode"]},{"Name":"class:dstyle::DStyleAnimation","Fields":["int dstyle::DStyleAnimation::_delay","int dstyle::DStyleAnimation::_duration","FrameRate dstyle::DStyleAnimation::_fps","int dstyle::DStyleAnimation::_skip","QTime dstyle::DStyleAnimation::_startTime"]}]}
{"Filepath":"styleplugins/dstyleplugin/dstyleplugin.h","Functions":[{"Uniquefunname":" DStylePlugin(QObject * parent=0)","Funname":"DStylePlugin","Returntype":"","Args":"QObject * parent=0"},{"Uniquefunname":" DStylePlugin::DStylePlugin(QObject * parent=0)","Funname":"DStylePlugin::DStylePlugin","Returntype":"","Args":"QObject * parent=0"},{"Uniquefunname":"QStyle * DStylePlugin::create(const QString \u0026 key)","Funname":"DStylePlugin::create","Returntype":"QStyle *","Args":"const QString \u0026 key"},{"Uniquefunname":"QStyle * create(const QString \u0026 key)","Funname":"create","Returntype":"QStyle *","Args":"const QString \u0026 key"}],"Records":[{"Name":"macro","Fields":["DStylePlugin_H"]}]}
{"Filepath":"styleplugins/dstyleplugin/geometryutils.h","Functions":[{"Uniquefunname":"QRect centerRect(const QRect \u0026 rect,const QSize \u0026 size)","Funname":"centerRect","Returntype":"QRect","Args":"const QRect \u0026 rect,const QSize \u0026 size"},{"Uniquefunname":"QRect centerRect(const QRect \u0026 rect,int width,int height)","Funname":"centerRect","Returntype":"QRect","Args":"const QRect \u0026 rect,int width,int height"},{"Uniquefunname":"QRect dstyle::GeometryUtils::centerRect(const QRect \u0026 rect,const QSize \u0026 size)","Funname":"dstyle::GeometryUtils::centerRect","Returntype":"QRect","Args":"const QRect \u0026 rect,const QSize \u0026 size"},{"Uniquefunname":"QRect dstyle::GeometryUtils::centerRect(const QRect \u0026 rect,int width,int height)","Funname":"dstyle::GeometryUtils::centerRect","Returntype":"QRect","Args":"const QRect \u0026 rect,int width,int height"},{"Uniquefunname":"    static qreal frameRadius( qreal bias = 0 )","Funname":"dstyle::GeometryUtils::frameRadius","Returntype":"qreal","Args":"qreal bias=0"},{"Uniquefunname":"QRect dstyle::GeometryUtils::insideMargin(const QRect \u0026 r,int margin)","Funname":"dstyle::GeometryUtils::insideMargin","Returntype":"QRect","Args":"const QRect \u0026 r,int margin"},{"Uniquefunname":"QRect dstyle::GeometryUtils::insideMargin(const QRect \u0026 r,int marginWidth,int marginHeight)","Funname":"dstyle::GeometryUtils::insideMargin","Returntype":"QRect","Args":"const QRect \u0026 r,int marginWidth,int marginHeight"},{"Uniquefunname":"    static QRectF shadowRect( const QRectF\u0026 rect )","Funname":"dstyle::GeometryUtils::shadowRect","Returntype":"QRectF","Args":"const QRectF \u0026 rect"},{"Uniquefunname":"    static qreal frameRadius( qreal bias = 0 )","Funname":"frameRadius","Returntype":"qreal","Args":"qreal bias=0"},{"Uniquefunname":"QRect insideMargin(const QRect \u0026 r,int margin)","Funname":"insideMargin","Returntype":"QRect","Args":"const QRect \u0026 r,int margin"},{"Uniquefunname":"QRect insideMargin(const QRect \u0026 r,int marginWidth,int marginHeight)","Funname":"insideMargin","Returntype":"QRect","Args":"const QRect \u0026 r,int marginWidth,int marginHeight"},{"Uniquefunname":"    static QRectF shadowRect( const QRectF\u0026 rect )","Funname":"shadowRect","Returntype":"QRectF","Args":"const QRectF \u0026 rect"}],"Records":[{"Name":"macro","Fields":["GEOMETRYUTILS_H"]},{"Name":"namespace","Fields":["dstyle"]}]}
{"Filepath":"styleplugins/dstyleplugin/hidpihelper.h","Functions":[{"Uniquefunname":"QPixmap dstyle::HiDPIHelper::loadPixmap(const QString \u0026 fileName,qreal devicePixelRatio=0)","Funname":"dstyle::HiDPIHelper::loadPixmap","Returntype":"QPixmap","Args":"const QString \u0026 fileName,qreal devicePixelRatio=0"},{"Uniquefunname":"QPixmap loadPixmap(const QString \u0026 fileName,qreal devicePixelRatio=0)","Funname":"loadPixmap","Returntype":"QPixmap","Args":"const QString \u0026 fileName,qreal devicePixelRatio=0"}],"Records":[{"Name":"macro","Fields":["HIDPIHELPER_H"]},{"Name":"namespace","Fields":["dstyle"]}]}
{"Filepath":"styleplugins/dstyleplugin/painterhelper.h","Functions":[{"Uniquefunname":"QColor colorBlend(const QColor \u0026 color1,const QColor \u0026 color2)","Funname":"colorBlend","Returntype":"QColor","Args":"const QColor \u0026 color1,const QColor \u0026 color2"},{"Uniquefunname":"void drawEllipse(QPainter * painter,const QRectF \u0026 rect,const QBrush \u0026 background,qreal borderWidth=0,const QBrush \u0026 border=Qt::NoBrush)","Funname":"drawEllipse","Returntype":"void","Args":"QPainter * painter,const QRectF \u0026 rect,const QBrush \u0026 background,qreal borderWidth=0,const QBrush \u0026 border=Qt::NoBrush"},{"Uniquefunname":"void drawPath(QPainter * painter,const QPainterPath \u0026 path,const QBrush \u0026 background,qreal borderWidth=0,const QBrush \u0026 border=Qt::NoBrush)","Funname":"drawPath","Returntype":"void","Args":"QPainter * painter,const QPainterPath \u0026 path,const QBrush \u0026 background,qreal borderWidth=0,const QBrush \u0026 border=Qt::NoBrush"},{"Uniquefunname":"void drawRect(QPainter * painter,const QRectF \u0026 rect,const QBrush \u0026 background,qreal borderWidth=0,const QBrush \u0026 border=Qt::NoBrush)","Funname":"drawRect","Returntype":"void","Args":"QPainter * painter,const QRectF \u0026 rect,const QBrush \u0026 background,qreal borderWidth=0,const QBrush \u0026 border=Qt::NoBrush"},{"Uniquefunname":"void drawRoundedRect(QPainter * painter,const QRectF \u0026 rect,qreal xRadius,qreal yRadius,Qt::SizeMode mode,const QBrush \u0026 background,qreal borderWidth=0,const QBrush \u0026 border=Qt::NoBrush)","Funname":"drawRoundedRect","Returntype":"void","Args":"QPainter * painter,const QRectF \u0026 rect,qreal xRadius,qreal yRadius,Qt::SizeMode mode,const QBrush \u0026 background,qreal borderWidth=0,const QBrush \u0026 border=Qt::NoBrush"},{"Uniquefunname":"QColor dstyle::PainterHelper::colorBlend(const QColor \u0026 color1,const QColor \u0026 color2)","Funname":"dstyle::PainterHelper::colorBlend","Returntype":"QColor","Args":"const QColor \u0026 color1,const QColor \u0026 color2"},{"Uniquefunname":"void dstyle::PainterHelper::drawEllipse(QPainter * painter,const QRectF \u0026 rect,const QBrush \u0026 background,qreal borderWidth=0,const QBrush \u0026 border=Qt::NoBrush)","Funname":"dstyle::PainterHelper::drawEllipse","Returntype":"void","Args":"QPainter * painter,const QRectF \u0026 rect,const QBrush \u0026 background,qreal borderWidth=0,const QBrush \u0026 border=Qt::NoBrush"},{"Uniquefunname":"void dstyle::PainterHelper::drawPath(QPainter * painter,const QPainterPath \u0026 path,const QBrush \u0026 background,qreal borderWidth=0,const QBrush \u0026 border=Qt::NoBrush)","Funname":"dstyle::PainterHelper::drawPath","Returntype":"void","Args":"QPainter * painter,const QPainterPath \u0026 path,const QBrush \u0026 background,qreal borderWidth=0,const QBrush \u0026 border=Qt::NoBrush"},{"Uniquefunname":"void dstyle::PainterHelper::drawRect(QPainter * painter,const QRectF \u0026 rect,const QBrush \u0026 background,qreal borderWidth=0,const QBrush \u0026 border=Qt::NoBrush)","Funname":"dstyle::PainterHelper::drawRect","Returntype":"void","Args":"QPainter * painter,const QRectF \u0026 rect,const QBrush \u0026 background,qreal borderWidth=0,const QBrush \u0026 border=Qt::NoBrush"},{"Uniquefunname":"void dstyle::PainterHelper::drawRoundedRect(QPainter * painter,const QRectF \u0026 rect,qreal xRadius,qreal yRadius,Qt::SizeMode mode,const QBrush \u0026 background,qreal borderWidth=0,const QBrush \u0026 border=Qt::NoBrush)","Funname":"dstyle::PainterHelper::drawRoundedRect","Returntype":"void","Args":"QPainter * painter,const QRectF \u0026 rect,qreal xRadius,qreal yRadius,Qt::SizeMode mode,const QBrush \u0026 background,qreal borderWidth=0,const QBrush \u0026 border=Qt::NoBrush"},{"Uniquefunname":"QPainterPath dstyle::PainterHelper::roundedPath(const QRectF \u0026 rect,Corners corners,qreal radius)","Funname":"dstyle::PainterHelper::roundedPath","Returntype":"QPainterPath","Args":"const QRectF \u0026 rect,Corners corners,qreal radius"},{"Uniquefunname":"QPainterPath roundedPath(const QRectF \u0026 rect,Corners corners,qreal radius)","Funname":"roundedPath","Returntype":"QPainterPath","Args":"const QRectF \u0026 rect,Corners corners,qreal radius"}],"Records":[{"Name":"macro","Fields":["PAINTERHELPER_H"]},{"Name":"namespace","Fields":["PainterHelper","dstyle","dstyle::PainterHelper"]}]}
{"Filepath":"styleplugins/dstyleplugin/paletteextended.h","Functions":[{"Uniquefunname":" PaletteExtended(StyleType type,QObject * parent=0)","Funname":"PaletteExtended","Returntype":"","Args":"StyleType type,QObject * parent=0"},{"Uniquefunname":"QBrush brush(BrushName name,const QStyleOption * option,quint64 extraTypes=PseudoClass_Unknown,const QBrush \u0026 defaultBrush=Qt::NoBrush) cons)","Funname":"brush","Returntype":"QBrush","Args":"BrushName name,const QStyleOption * option,quint64 extraTypes=PseudoClass_Unknown,const QBrush \u0026 defaultBrush=Qt::NoBrush) cons"},{"Uniquefunname":"QBrush brush(BrushName name,quint64 type=PseudoClass_Unspecified,const QBrush \u0026 defaultBrush=Qt::NoBrush) cons)","Funname":"brush","Returntype":"QBrush","Args":"BrushName name,quint64 type=PseudoClass_Unspecified,const QBrush \u0026 defaultBrush=Qt::NoBrush) cons"},{"Uniquefunname":"QBrush brush(const QWidget * widget,BrushName name,const QStyleOption * option,quint64 extraTypes=PseudoClass_Unknown,const QBrush \u0026 defaultBrush=Qt::NoBrush) cons)","Funname":"brush","Returntype":"QBrush","Args":"const QWidget * widget,BrushName name,const QStyleOption * option,quint64 extraTypes=PseudoClass_Unknown,const QBrush \u0026 defaultBrush=Qt::NoBrush) cons"},{"Uniquefunname":"QBrush brush(const QWidget * widget,BrushName name,quint64 type=PseudoClass_Unspecified,const QBrush \u0026 defaultBrush=Qt::NoBrush) cons)","Funname":"brush","Returntype":"QBrush","Args":"const QWidget * widget,BrushName name,quint64 type=PseudoClass_Unspecified,const QBrush \u0026 defaultBrush=Qt::NoBrush) cons"},{"Uniquefunname":" dstyle::PaletteExtended::PaletteExtended(StyleType type,QObject * parent=0)","Funname":"dstyle::PaletteExtended::PaletteExtended","Returntype":"","Args":"StyleType type,QObject * parent=0"},{"Uniquefunname":"QBrush dstyle::PaletteExtended::brush(BrushName name,const QStyleOption * option,quint64 extraTypes=PseudoClass_Unknown,const QBrush \u0026 defaultBrush=Qt::NoBrush) cons)","Funname":"dstyle::PaletteExtended::brush","Returntype":"QBrush","Args":"BrushName name,const QStyleOption * option,quint64 extraTypes=PseudoClass_Unknown,const QBrush \u0026 defaultBrush=Qt::NoBrush) cons"},{"Uniquefunname":"QBrush dstyle::PaletteExtended::brush(BrushName name,quint64 type=PseudoClass_Unspecified,const QBrush \u0026 defaultBrush=Qt::NoBrush) cons)","Funname":"dstyle::PaletteExtended::brush","Returntype":"QBrush","Args":"BrushName name,quint64 type=PseudoClass_Unspecified,const QBrush \u0026 defaultBrush=Qt::NoBrush) cons"},{"Uniquefunname":"QBrush dstyle::PaletteExtended::brush(const QWidget * widget,BrushName name,const QStyleOption * option,quint64 extraTypes=PseudoClass_Unknown,const QBrush \u0026 defaultBrush=Qt::NoBrush) cons)","Funname":"dstyle::PaletteExtended::brush","Returntype":"QBrush","Args":"const QWidget * widget,BrushName name,const QStyleOption * option,quint64 extraTypes=PseudoClass_Unknown,const QBrush \u0026 defaultBrush=Qt::NoBrush) cons"},{"Uniquefunname":"QBrush dstyle::PaletteExtended::brush(const QWidget * widget,BrushName name,quint64 type=PseudoClass_Unspecified,const QBrush \u0026 defaultBrush=Qt::NoBrush) cons)","Funname":"dstyle::PaletteExtended::brush","Returntype":"QBrush","Args":"const QWidget * widget,BrushName name,quint64 type=PseudoClass_Unspecified,const QBrush \u0026 defaultBrush=Qt::NoBrush) cons"},{"Uniquefunname":"void dstyle::PaletteExtended::init(StyleType type)","Funname":"dstyle::PaletteExtended::init","Returntype":"void","Args":"StyleType type"},{"Uniquefunname":"PaletteExtended * dstyle::PaletteExtended::instance(StyleType type)","Funname":"dstyle::PaletteExtended::instance","Returntype":"PaletteExtended *","Args":"StyleType type"},{"Uniquefunname":"void dstyle::PaletteExtended::polish(QPalette \u0026 p)","Funname":"dstyle::PaletteExtended::polish","Returntype":"void","Args":"QPalette \u0026 p"},{"Uniquefunname":" dstyle::PaletteExtended::~PaletteExtended()","Funname":"dstyle::PaletteExtended::~PaletteExtended","Returntype":"","Args":""},{"Uniquefunname":"void init(StyleType type)","Funname":"init","Returntype":"void","Args":"StyleType type"},{"Uniquefunname":"PaletteExtended * instance(StyleType type)","Funname":"instance","Returntype":"PaletteExtended *","Args":"StyleType type"},{"Uniquefunname":"void polish(QPalette \u0026 p)","Funname":"polish","Returntype":"void","Args":"QPalette \u0026 p"},{"Uniquefunname":" ~PaletteExtended()","Funname":"~PaletteExtended","Returntype":"","Args":""}],"Records":[{"Name":"enum:dstyle::PaletteExtended::BrushName","Fields":["CheckBox_BackgroundBrush","HeaderView_ArrowIndicatorDownIcon","HeaderView_ArrowIndicatorUpIcon","LineEdit_AlertBorderBrush","LineEdit_BackgroundBrush","LineEdit_BorderBrush","Menu_BackgroundBrush","Menu_BorderColor","Menu_SeparatorColor","ProgressBar_ContentBackground","ProgressBar_ContentBorder","ProgressBar_GrooveBackground","ProgressBar_GrooveBorder","PushButton_BackgroundBrush","PushButton_BorderBrush","PushButton_SuggestButtonColor","PushButton_SuggestTextColor","PushButton_TextColor","QPalette_Base","QPalette_Button","QPalette_ButtonText","QPalette_Highlight","QPalette_HighlightedText","QPalette_Text","QPalette_Window","QPalette_WindowText","RadioButton_BackgroundBrush","RubberBand_BackgroundBrush","RubberBand_BorderBrush","ScrollBar_HandleBorderBrush","ScrollBar_HandleBrush","Slider_GrooveColor","Slider_GrooveHighlightColor","Slider_HandleBorderColor","Slider_HandleBrush","Slider_TickmarkColor","Slider_VernierHandleBrush","SpinBox_BorderColor","SpinBox_DownBrush","SpinBox_MinusBrush","SpinBox_PlusBrush","SpinBox_UpBrush","TabBarAddButton_BackgroundBrush","TabBarAddButton_Icon","TabBarScrollButton_BackgroundBrush","TabBarScrollButton_DownIcon","TabBarScrollButton_UpIcon","TabBarTab_ActiveColor","TabBarTab_BackgroundBrush","TabBarTab_BorderBrush","TabBarTab_CloseIcon","TabBarTab_CloseIconBackground","TabBarTab_TextColor","TabBar_BackgroundBrush","TabBar_BorderBrush","dstyle::PaletteExtended::CheckBox_BackgroundBrush","dstyle::PaletteExtended::HeaderView_ArrowIndicatorDownIcon","dstyle::PaletteExtended::HeaderView_ArrowIndicatorUpIcon","dstyle::PaletteExtended::LineEdit_AlertBorderBrush","dstyle::PaletteExtended::LineEdit_BackgroundBrush","dstyle::PaletteExtended::LineEdit_BorderBrush","dstyle::PaletteExtended::Menu_BackgroundBrush","dstyle::PaletteExtended::Menu_BorderColor","dstyle::PaletteExtended::Menu_SeparatorColor","dstyle::PaletteExtended::ProgressBar_ContentBackground","dstyle::PaletteExtended::ProgressBar_ContentBorder","dstyle::PaletteExtended::ProgressBar_GrooveBackground","dstyle::PaletteExtended::ProgressBar_GrooveBorder","dstyle::PaletteExtended::PushButton_BackgroundBrush","dstyle::PaletteExtended::PushButton_BorderBrush","dstyle::PaletteExtended::PushButton_SuggestButtonColor","dstyle::PaletteExtended::PushButton_SuggestTextColor","dstyle::PaletteExtended::PushButton_TextColor","dstyle::PaletteExtended::QPalette_Base","dstyle::PaletteExtended::QPalette_Button","dstyle::PaletteExtended::QPalette_ButtonText","dstyle::PaletteExtended::QPalette_Highlight","dstyle::PaletteExtended::QPalette_HighlightedText","dstyle::PaletteExtended::QPalette_Text","dstyle::PaletteExtended::QPalette_Window","dstyle::PaletteExtended::QPalette_WindowText","dstyle::PaletteExtended::RadioButton_BackgroundBrush","dstyle::PaletteExtended::RubberBand_BackgroundBrush","dstyle::PaletteExtended::RubberBand_BorderBrush","dstyle::PaletteExtended::ScrollBar_HandleBorderBrush","dstyle::PaletteExtended::ScrollBar_HandleBrush","dstyle::PaletteExtended::Slider_GrooveColor","dstyle::PaletteExtended::Slider_GrooveHighlightColor","dstyle::PaletteExtended::Slider_HandleBorderColor","dstyle::PaletteExtended::Slider_HandleBrush","dstyle::PaletteExtended::Slider_TickmarkColor","dstyle::PaletteExtended::Slider_VernierHandleBrush","dstyle::PaletteExtended::SpinBox_BorderColor","dstyle::PaletteExtended::SpinBox_DownBrush","dstyle::PaletteExtended::SpinBox_MinusBrush","dstyle::PaletteExtended::SpinBox_PlusBrush","dstyle::PaletteExtended::SpinBox_UpBrush","dstyle::PaletteExtended::TabBarAddButton_BackgroundBrush","dstyle::PaletteExtended::TabBarAddButton_Icon","dstyle::PaletteExtended::TabBarScrollButton_BackgroundBrush","dstyle::PaletteExtended::TabBarScrollButton_DownIcon","dstyle::PaletteExtended::TabBarScrollButton_UpIcon","dstyle::PaletteExtended::TabBarTab_ActiveColor","dstyle::PaletteExtended::TabBarTab_BackgroundBrush","dstyle::PaletteExtended::TabBarTab_BorderBrush","dstyle::PaletteExtended::TabBarTab_CloseIcon","dstyle::PaletteExtended::TabBarTab_CloseIconBackground","dstyle::PaletteExtended::TabBarTab_TextColor","dstyle::PaletteExtended::TabBar_BackgroundBrush","dstyle::PaletteExtended::TabBar_BorderBrush"]},{"Name":"macro","Fields":["PALETTEEXTENDED_H"]},{"Name":"enum:dstyle::PaletteExtended::PseudoClassType","Fields":["PseudoClass_Active","PseudoClass_Alternate","PseudoClass_Any","PseudoClass_Bottom","PseudoClass_Checked","PseudoClass_Children","PseudoClass_Closable","PseudoClass_Closed","PseudoClass_Default","PseudoClass_Disabled","PseudoClass_EditFocus","PseudoClass_Editable","PseudoClass_Enabled","PseudoClass_Exclusive","PseudoClass_First","PseudoClass_Flat","PseudoClass_Floatable","PseudoClass_Focus","PseudoClass_Frameless","PseudoClass_Horizontal","PseudoClass_Hover","PseudoClass_Indeterminate","PseudoClass_Item","PseudoClass_Last","PseudoClass_Left","PseudoClass_Maximized","PseudoClass_Middle","PseudoClass_Minimized","PseudoClass_Movable","PseudoClass_NextSelected","PseudoClass_NonExclusive","PseudoClass_Off","PseudoClass_On","PseudoClass_OnlyOne","PseudoClass_Open","PseudoClass_Pressed","PseudoClass_PreviousSelected","PseudoClass_ReadOnly","PseudoClass_Right","PseudoClass_Selected","PseudoClass_Sibling","PseudoClass_Top","PseudoClass_Unchecked","PseudoClass_Unknown","PseudoClass_Unspecified","PseudoClass_Vertical","PseudoClass_Window","dstyle::PaletteExtended::PseudoClass_Active","dstyle::PaletteExtended::PseudoClass_Alternate","dstyle::PaletteExtended::PseudoClass_Any","dstyle::PaletteExtended::PseudoClass_Bottom","dstyle::PaletteExtended::PseudoClass_Checked","dstyle::PaletteExtended::PseudoClass_Children","dstyle::PaletteExtended::PseudoClass_Closable","dstyle::PaletteExtended::PseudoClass_Closed","dstyle::PaletteExtended::PseudoClass_Default","dstyle::PaletteExtended::PseudoClass_Disabled","dstyle::PaletteExtended::PseudoClass_EditFocus","dstyle::PaletteExtended::PseudoClass_Editable","dstyle::PaletteExtended::PseudoClass_Enabled","dstyle::PaletteExtended::PseudoClass_Exclusive","dstyle::PaletteExtended::PseudoClass_First","dstyle::PaletteExtended::PseudoClass_Flat","dstyle::PaletteExtended::PseudoClass_Floatable","dstyle::PaletteExtended::PseudoClass_Focus","dstyle::PaletteExtended::PseudoClass_Frameless","dstyle::PaletteExtended::PseudoClass_Horizontal","dstyle::PaletteExtended::PseudoClass_Hover","dstyle::PaletteExtended::PseudoClass_Indeterminate","dstyle::PaletteExtended::PseudoClass_Item","dstyle::PaletteExtended::PseudoClass_Last","dstyle::PaletteExtended::PseudoClass_Left","dstyle::PaletteExtended::PseudoClass_Maximized","dstyle::PaletteExtended::PseudoClass_Middle","dstyle::PaletteExtended::PseudoClass_Minimized","dstyle::PaletteExtended::PseudoClass_Movable","dstyle::PaletteExtended::PseudoClass_NextSelected","dstyle::PaletteExtended::PseudoClass_NonExclusive","dstyle::PaletteExtended::PseudoClass_Off","dstyle::PaletteExtended::PseudoClass_On","dstyle::PaletteExtended::PseudoClass_OnlyOne","dstyle::PaletteExtended::PseudoClass_Open","dstyle::PaletteExtended::PseudoClass_Pressed","dstyle::PaletteExtended::PseudoClass_PreviousSelected","dstyle::PaletteExtended::PseudoClass_ReadOnly","dstyle::PaletteExtended::PseudoClass_Right","dstyle::PaletteExtended::PseudoClass_Selected","dstyle::PaletteExtended::PseudoClass_Sibling","dstyle::PaletteExtended::PseudoClass_Top","dstyle::PaletteExtended::PseudoClass_Unchecked","dstyle::PaletteExtended::PseudoClass_Unknown","dstyle::PaletteExtended::PseudoClass_Unspecified","dstyle::PaletteExtended::PseudoClass_Vertical","dstyle::PaletteExtended::PseudoClass_Window"]},{"Name":"namespace","Fields":["QCss","dstyle"]},{"Name":"class:dstyle::PaletteExtended","Fields":["QHash\u003cQPair\u003cBrushName,quint64\u003e,QBrush\u003e dstyle::PaletteExtended::m_brushCache","QCss::StyleSheet * dstyle::PaletteExtended::m_brushScheme","StyleType dstyle::PaletteExtended::m_type","QList\u003cPaletteExtended * \u003e dstyle::PaletteExtended::styleTypeToPaletteList"]}]}
{"Filepath":"styleplugins/dstyleplugin/style.h","Functions":[{"Uniquefunname":" Style(StyleType type)","Funname":"Style","Returntype":"","Args":"StyleType type"},{"Uniquefunname":"void _q_removeAnimation()","Funname":"_q_removeAnimation","Returntype":"void","Args":""},{"Uniquefunname":"void _q_updateAppFont()","Funname":"_q_updateAppFont","Returntype":"void","Args":""},{"Uniquefunname":"DStyleAnimation * animation(const QObject * target) cons)","Funname":"animation","Returntype":"DStyleAnimation *","Args":"const QObject * target) cons"},{"Uniquefunname":"QColor backgroundColor(const QPalette \u0026 pal,const QWidget * widget) cons)","Funname":"backgroundColor","Returntype":"QColor","Args":"const QPalette \u0026 pal,const QWidget * widget) cons"},{"Uniquefunname":"QColor buttonColor(const QPalette \u0026 pal) cons)","Funname":"buttonColor","Returntype":"QColor","Args":"const QPalette \u0026 pal) cons"},{"Uniquefunname":"QPixmap colorizedImage(const QString \u0026 fileName,const QColor \u0026 color,int rotation=0)","Funname":"colorizedImage","Returntype":"QPixmap","Args":"const QString \u0026 fileName,const QColor \u0026 color,int rotation=0"},{"Uniquefunname":"QRect comboBoxSubControlRect(const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget) cons)","Funname":"comboBoxSubControlRect","Returntype":"QRect","Args":"const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget) cons"},{"Uniquefunname":"QColor darkShade() cons)","Funname":"darkShade","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"bool drawComboBox(const QStyleOptionComplex * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawComboBox","Returntype":"bool","Args":"const QStyleOptionComplex * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool drawComboBoxLabelControl(const QStyleOption * option,QPainter * painter,const QWidget *) cons)","Funname":"drawComboBoxLabelControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget *) cons"},{"Uniquefunname":"void drawComboBoxPopupFramePrimitive(const QStyleOption * option,QPainter * painter) cons)","Funname":"drawComboBoxPopupFramePrimitive","Returntype":"void","Args":"const QStyleOption * option,QPainter * painter) cons"},{"Uniquefunname":"void drawComplexControl(ComplexControl cc,const QStyleOptionComplex * opt,QPainter * p,const QWidget * w) cons)","Funname":"drawComplexControl","Returntype":"void","Args":"ComplexControl cc,const QStyleOptionComplex * opt,QPainter * p,const QWidget * w) cons"},{"Uniquefunname":"void drawControl(ControlElement element,const QStyleOption * opt,QPainter * p,const QWidget * w) cons)","Funname":"drawControl","Returntype":"void","Args":"ControlElement element,const QStyleOption * opt,QPainter * p,const QWidget * w) cons"},{"Uniquefunname":"void drawDeepinStyleIcon(const QString \u0026 name,const QStyleOption * opt,QPainter * p,const QWidget * widget) cons)","Funname":"drawDeepinStyleIcon","Returntype":"void","Args":"const QString \u0026 name,const QStyleOption * opt,QPainter * p,const QWidget * widget) cons"},{"Uniquefunname":"bool drawFrameFocusRectPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawFrameFocusRectPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool drawFrameLineEditPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawFrameLineEditPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool drawFramePrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawFramePrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool drawFrameTabBarBasePrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawFrameTabBarBasePrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool drawFrameTabWidgetPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawFrameTabWidgetPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool drawIndicatorCheckBoxPrimitive(const QStyleOption *,QPainter *,const QWidget * widget) cons)","Funname":"drawIndicatorCheckBoxPrimitive","Returntype":"bool","Args":"const QStyleOption *,QPainter *,const QWidget * widget) cons"},{"Uniquefunname":"bool drawIndicatorHeaderArrowPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawIndicatorHeaderArrowPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool drawIndicatorTabClosePrimitive(const QStyleOption * opt,QPainter * p,const QWidget * widget) cons)","Funname":"drawIndicatorTabClosePrimitive","Returntype":"bool","Args":"const QStyleOption * opt,QPainter * p,const QWidget * widget) cons"},{"Uniquefunname":"void drawItemPixmap(QPainter * painter,const QRect \u0026 rect,int alignment,const QPixmap \u0026 pixmap) cons)","Funname":"drawItemPixmap","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,int alignment,const QPixmap \u0026 pixmap) cons"},{"Uniquefunname":"bool drawMenuBarItemControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawMenuBarItemControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool drawMenuItemControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawMenuItemControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool drawPanelButtonToolPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawPanelButtonToolPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"void drawPrimitive(PrimitiveElement pe,const QStyleOption * opt,QPainter * p,const QWidget * w) cons)","Funname":"drawPrimitive","Returntype":"void","Args":"PrimitiveElement pe,const QStyleOption * opt,QPainter * p,const QWidget * w) cons"},{"Uniquefunname":"bool drawProgressBarContentsControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawProgressBarContentsControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool drawProgressBarControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawProgressBarControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool drawProgressBarGrooveControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawProgressBarGrooveControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool drawProgressBarLabelControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawProgressBarLabelControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool drawPushButtonBevel(const QStyleOption *,QPainter *,const QWidget *) cons)","Funname":"drawPushButtonBevel","Returntype":"bool","Args":"const QStyleOption *,QPainter *,const QWidget *) cons"},{"Uniquefunname":"bool drawPushButtonFrame(QPainter * painter,const QRect \u0026 rect,const QBrush \u0026 color,const QBrush \u0026 outline,const QColor \u0026 shadow,const QWidget * widget=nullptr) cons)","Funname":"drawPushButtonFrame","Returntype":"bool","Args":"QPainter * painter,const QRect \u0026 rect,const QBrush \u0026 color,const QBrush \u0026 outline,const QColor \u0026 shadow,const QWidget * widget=nullptr) cons"},{"Uniquefunname":"bool drawPushButtonLabel(const QStyleOption *,QPainter *,const QWidget *) cons)","Funname":"drawPushButtonLabel","Returntype":"bool","Args":"const QStyleOption *,QPainter *,const QWidget *) cons"},{"Uniquefunname":"bool drawRubberBandControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawRubberBandControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool drawScrollBarSliderControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawScrollBarSliderControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool drawScrollButtonLabelControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawScrollButtonLabelControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool drawScrollButtonPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawScrollButtonPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool drawShapedFrameControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawShapedFrameControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool drawSlider(const QStyleOptionComplex * opt,QPainter * p,const QWidget * w) cons)","Funname":"drawSlider","Returntype":"bool","Args":"const QStyleOptionComplex * opt,QPainter * p,const QWidget * w) cons"},{"Uniquefunname":"void drawSliderGroove(QPainter *,const QRect \u0026,const QBrush \u0026 brush) cons)","Funname":"drawSliderGroove","Returntype":"void","Args":"QPainter *,const QRect \u0026,const QBrush \u0026 brush) cons"},{"Uniquefunname":"void drawSliderHandle(QPainter * painter,const QStyleOptionSlider * option,const QRect \u0026 rect,const QString \u0026 type) cons)","Funname":"drawSliderHandle","Returntype":"void","Args":"QPainter * painter,const QStyleOptionSlider * option,const QRect \u0026 rect,const QString \u0026 type) cons"},{"Uniquefunname":"bool drawSliderTickmarkLabels(const QStyleOption *,QPainter *,const QWidget *) cons)","Funname":"drawSliderTickmarkLabels","Returntype":"bool","Args":"const QStyleOption *,QPainter *,const QWidget *) cons"},{"Uniquefunname":"bool drawSpinBoxComplexControl(const QStyleOptionComplex * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawSpinBoxComplexControl","Returntype":"bool","Args":"const QStyleOptionComplex * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"void drawStandardIcon(QStyle::StandardPixmap sp,const QStyleOption * opt,QPainter * p,const QWidget * widget) cons)","Funname":"drawStandardIcon","Returntype":"void","Args":"QStyle::StandardPixmap sp,const QStyleOption * opt,QPainter * p,const QWidget * widget) cons"},{"Uniquefunname":"bool drawTabBarAddButtonControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawTabBarAddButtonControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool drawTabBarTabLabelControl(const QStyleOption * option,QPainter * p,const QWidget * widget) cons)","Funname":"drawTabBarTabLabelControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * p,const QWidget * widget) cons"},{"Uniquefunname":"bool drawTabBarTabShapeControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawTabBarTabShapeControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool drawToolButtonLabelControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawToolButtonLabelControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":" dstyle::Style::Style(StyleType type)","Funname":"dstyle::Style::Style","Returntype":"","Args":"StyleType type"},{"Uniquefunname":"QPixmap dstyle::Style::colorizedImage(const QString \u0026 fileName,const QColor \u0026 color,int rotation=0)","Funname":"dstyle::Style::colorizedImage","Returntype":"QPixmap","Args":"const QString \u0026 fileName,const QColor \u0026 color,int rotation=0"},{"Uniquefunname":"QRect dstyle::Style::comboBoxSubControlRect(const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget) cons)","Funname":"dstyle::Style::comboBoxSubControlRect","Returntype":"QRect","Args":"const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawComboBox(const QStyleOptionComplex * option,QPainter * painter,const QWidget * widget) cons)","Funname":"dstyle::Style::drawComboBox","Returntype":"bool","Args":"const QStyleOptionComplex * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawComboBoxLabelControl(const QStyleOption * option,QPainter * painter,const QWidget *) cons)","Funname":"dstyle::Style::drawComboBoxLabelControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget *) cons"},{"Uniquefunname":"void dstyle::Style::drawComboBoxPopupFramePrimitive(const QStyleOption * option,QPainter * painter) cons)","Funname":"dstyle::Style::drawComboBoxPopupFramePrimitive","Returntype":"void","Args":"const QStyleOption * option,QPainter * painter) cons"},{"Uniquefunname":"void dstyle::Style::drawComplexControl(ComplexControl cc,const QStyleOptionComplex * opt,QPainter * p,const QWidget * w) cons)","Funname":"dstyle::Style::drawComplexControl","Returntype":"void","Args":"ComplexControl cc,const QStyleOptionComplex * opt,QPainter * p,const QWidget * w) cons"},{"Uniquefunname":"void dstyle::Style::drawControl(ControlElement element,const QStyleOption * opt,QPainter * p,const QWidget * w) cons)","Funname":"dstyle::Style::drawControl","Returntype":"void","Args":"ControlElement element,const QStyleOption * opt,QPainter * p,const QWidget * w) cons"},{"Uniquefunname":"void dstyle::Style::drawDeepinStyleIcon(const QString \u0026 name,const QStyleOption * opt,QPainter * p,const QWidget * widget) cons)","Funname":"dstyle::Style::drawDeepinStyleIcon","Returntype":"void","Args":"const QString \u0026 name,const QStyleOption * opt,QPainter * p,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawFrameFocusRectPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"dstyle::Style::drawFrameFocusRectPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawFrameLineEditPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"dstyle::Style::drawFrameLineEditPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawFramePrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"dstyle::Style::drawFramePrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawFrameTabBarBasePrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"dstyle::Style::drawFrameTabBarBasePrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawFrameTabWidgetPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"dstyle::Style::drawFrameTabWidgetPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawIndicatorCheckBoxPrimitive(const QStyleOption *,QPainter *,const QWidget * widget) cons)","Funname":"dstyle::Style::drawIndicatorCheckBoxPrimitive","Returntype":"bool","Args":"const QStyleOption *,QPainter *,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawIndicatorHeaderArrowPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"dstyle::Style::drawIndicatorHeaderArrowPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawIndicatorTabClosePrimitive(const QStyleOption * opt,QPainter * p,const QWidget * widget) cons)","Funname":"dstyle::Style::drawIndicatorTabClosePrimitive","Returntype":"bool","Args":"const QStyleOption * opt,QPainter * p,const QWidget * widget) cons"},{"Uniquefunname":"void dstyle::Style::drawItemPixmap(QPainter * painter,const QRect \u0026 rect,int alignment,const QPixmap \u0026 pixmap) cons)","Funname":"dstyle::Style::drawItemPixmap","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,int alignment,const QPixmap \u0026 pixmap) cons"},{"Uniquefunname":"bool dstyle::Style::drawMenuBarItemControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"dstyle::Style::drawMenuBarItemControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawMenuItemControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"dstyle::Style::drawMenuItemControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawPanelButtonToolPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"dstyle::Style::drawPanelButtonToolPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"void dstyle::Style::drawPrimitive(PrimitiveElement pe,const QStyleOption * opt,QPainter * p,const QWidget * w) cons)","Funname":"dstyle::Style::drawPrimitive","Returntype":"void","Args":"PrimitiveElement pe,const QStyleOption * opt,QPainter * p,const QWidget * w) cons"},{"Uniquefunname":"bool dstyle::Style::drawProgressBarContentsControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"dstyle::Style::drawProgressBarContentsControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawProgressBarControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"dstyle::Style::drawProgressBarControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawProgressBarGrooveControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"dstyle::Style::drawProgressBarGrooveControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawProgressBarLabelControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"dstyle::Style::drawProgressBarLabelControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawPushButtonBevel(const QStyleOption *,QPainter *,const QWidget *) cons)","Funname":"dstyle::Style::drawPushButtonBevel","Returntype":"bool","Args":"const QStyleOption *,QPainter *,const QWidget *) cons"},{"Uniquefunname":"bool dstyle::Style::drawPushButtonFrame(QPainter * painter,const QRect \u0026 rect,const QBrush \u0026 color,const QBrush \u0026 outline,const QColor \u0026 shadow,const QWidget * widget=nullptr) cons)","Funname":"dstyle::Style::drawPushButtonFrame","Returntype":"bool","Args":"QPainter * painter,const QRect \u0026 rect,const QBrush \u0026 color,const QBrush \u0026 outline,const QColor \u0026 shadow,const QWidget * widget=nullptr) cons"},{"Uniquefunname":"bool dstyle::Style::drawPushButtonLabel(const QStyleOption *,QPainter *,const QWidget *) cons)","Funname":"dstyle::Style::drawPushButtonLabel","Returntype":"bool","Args":"const QStyleOption *,QPainter *,const QWidget *) cons"},{"Uniquefunname":"bool dstyle::Style::drawRubberBandControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"dstyle::Style::drawRubberBandControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawScrollBarSliderControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"dstyle::Style::drawScrollBarSliderControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawScrollButtonLabelControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"dstyle::Style::drawScrollButtonLabelControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawScrollButtonPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"dstyle::Style::drawScrollButtonPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawShapedFrameControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"dstyle::Style::drawShapedFrameControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawSlider(const QStyleOptionComplex * opt,QPainter * p,const QWidget * w) cons)","Funname":"dstyle::Style::drawSlider","Returntype":"bool","Args":"const QStyleOptionComplex * opt,QPainter * p,const QWidget * w) cons"},{"Uniquefunname":"void dstyle::Style::drawSliderGroove(QPainter *,const QRect \u0026,const QBrush \u0026 brush) cons)","Funname":"dstyle::Style::drawSliderGroove","Returntype":"void","Args":"QPainter *,const QRect \u0026,const QBrush \u0026 brush) cons"},{"Uniquefunname":"void dstyle::Style::drawSliderHandle(QPainter * painter,const QStyleOptionSlider * option,const QRect \u0026 rect,const QString \u0026 type) cons)","Funname":"dstyle::Style::drawSliderHandle","Returntype":"void","Args":"QPainter * painter,const QStyleOptionSlider * option,const QRect \u0026 rect,const QString \u0026 type) cons"},{"Uniquefunname":"bool dstyle::Style::drawSliderTickmarkLabels(const QStyleOption *,QPainter *,const QWidget *) cons)","Funname":"dstyle::Style::drawSliderTickmarkLabels","Returntype":"bool","Args":"const QStyleOption *,QPainter *,const QWidget *) cons"},{"Uniquefunname":"bool dstyle::Style::drawSpinBoxComplexControl(const QStyleOptionComplex * option,QPainter * painter,const QWidget * widget) cons)","Funname":"dstyle::Style::drawSpinBoxComplexControl","Returntype":"bool","Args":"const QStyleOptionComplex * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"void dstyle::Style::drawStandardIcon(QStyle::StandardPixmap sp,const QStyleOption * opt,QPainter * p,const QWidget * widget) cons)","Funname":"dstyle::Style::drawStandardIcon","Returntype":"void","Args":"QStyle::StandardPixmap sp,const QStyleOption * opt,QPainter * p,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawTabBarAddButtonControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"dstyle::Style::drawTabBarAddButtonControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawTabBarTabLabelControl(const QStyleOption * option,QPainter * p,const QWidget * widget) cons)","Funname":"dstyle::Style::drawTabBarTabLabelControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * p,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawTabBarTabShapeControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"dstyle::Style::drawTabBarTabShapeControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::drawToolButtonLabelControl(const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"dstyle::Style::drawToolButtonLabelControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"void dstyle::Style::fillBrush(QPainter * p,const QRect \u0026 rect,const QBrush \u0026 brush,qreal rotate=0)","Funname":"dstyle::Style::fillBrush","Returntype":"void","Args":"QPainter * p,const QRect \u0026 rect,const QBrush \u0026 brush,qreal rotate=0"},{"Uniquefunname":"QRect dstyle::Style::headerArrowRect(const QStyleOption * opt,const QWidget * widget) cons)","Funname":"dstyle::Style::headerArrowRect","Returntype":"QRect","Args":"const QStyleOption * opt,const QWidget * widget) cons"},{"Uniquefunname":"bool dstyle::Style::isTabBarToolButton(const QWidget * button) cons)","Funname":"dstyle::Style::isTabBarToolButton","Returntype":"bool","Args":"const QWidget * button) cons"},{"Uniquefunname":"bool dstyle::Style::isVisibleMenuCheckBox() cons)","Funname":"dstyle::Style::isVisibleMenuCheckBox","Returntype":"bool","Args":") cons"},{"Uniquefunname":"bool dstyle::Style::isVisibleMenuIcon() cons)","Funname":"dstyle::Style::isVisibleMenuIcon","Returntype":"bool","Args":") cons"},{"Uniquefunname":"bool dstyle::Style::isVisibleMenuShortText() cons)","Funname":"dstyle::Style::isVisibleMenuShortText","Returntype":"bool","Args":") cons"},{"Uniquefunname":"QColor dstyle::Style::mergedColors(const QColor \u0026 colorA,const QColor \u0026 colorB,int factor=50)","Funname":"dstyle::Style::mergedColors","Returntype":"QColor","Args":"const QColor \u0026 colorA,const QColor \u0026 colorB,int factor=50"},{"Uniquefunname":"int dstyle::Style::pixelMetric(PixelMetric m,const QStyleOption * opt=Q_NULLPTR,const QWidget * widget=Q_NULLPTR) cons)","Funname":"dstyle::Style::pixelMetric","Returntype":"int","Args":"PixelMetric m,const QStyleOption * opt=Q_NULLPTR,const QWidget * widget=Q_NULLPTR) cons"},{"Uniquefunname":"void dstyle::Style::polish(QApplication * app)","Funname":"dstyle::Style::polish","Returntype":"void","Args":"QApplication * app"},{"Uniquefunname":"void dstyle::Style::polish(QPalette \u0026 p)","Funname":"dstyle::Style::polish","Returntype":"void","Args":"QPalette \u0026 p"},{"Uniquefunname":"void dstyle::Style::polish(QWidget * w)","Funname":"dstyle::Style::polish","Returntype":"void","Args":"QWidget * w"},{"Uniquefunname":"QRect dstyle::Style::progressBarContentsRect(const QStyleOption * opt,const QWidget * widget) cons)","Funname":"dstyle::Style::progressBarContentsRect","Returntype":"QRect","Args":"const QStyleOption * opt,const QWidget * widget) cons"},{"Uniquefunname":"QRect dstyle::Style::progressBarGrooveRect(const QStyleOption * opt,const QWidget * widget) cons)","Funname":"dstyle::Style::progressBarGrooveRect","Returntype":"QRect","Args":"const QStyleOption * opt,const QWidget * widget) cons"},{"Uniquefunname":"QRect dstyle::Style::progressBarLabelRect(const QStyleOption * opt,const QWidget * widget) cons)","Funname":"dstyle::Style::progressBarLabelRect","Returntype":"QRect","Args":"const QStyleOption * opt,const QWidget * widget) cons"},{"Uniquefunname":"QWindow * dstyle::Style::qt_getWindow(const QWidget * widget)","Funname":"dstyle::Style::qt_getWindow","Returntype":"QWindow *","Args":"const QWidget * widget"},{"Uniquefunname":"QRect dstyle::Style::scrollbarSubControlRect(const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget) cons)","Funname":"dstyle::Style::scrollbarSubControlRect","Returntype":"QRect","Args":"const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget) cons"},{"Uniquefunname":"QSize dstyle::Style::sizeFromContents(ContentsType type,const QStyleOption * option,const QSize \u0026 size,const QWidget * widget) cons)","Funname":"dstyle::Style::sizeFromContents","Returntype":"QSize","Args":"ContentsType type,const QStyleOption * option,const QSize \u0026 size,const QWidget * widget) cons"},{"Uniquefunname":"QRect dstyle::Style::sliderSubControlRect(const QStyleOptionComplex * option,SubControl subControl,const QWidget * widget) cons)","Funname":"dstyle::Style::sliderSubControlRect","Returntype":"QRect","Args":"const QStyleOptionComplex * option,SubControl subControl,const QWidget * widget) cons"},{"Uniquefunname":"QRect dstyle::Style::spinboxSubControlRect(const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget) cons)","Funname":"dstyle::Style::spinboxSubControlRect","Returntype":"QRect","Args":"const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget) cons"},{"Uniquefunname":"QIcon dstyle::Style::standardIcon(StandardPixmap standardIcon,const QStyleOption * opt,const QWidget * widget) cons)","Funname":"dstyle::Style::standardIcon","Returntype":"QIcon","Args":"StandardPixmap standardIcon,const QStyleOption * opt,const QWidget * widget) cons"},{"Uniquefunname":"int dstyle::Style::styleHint(StyleHint sh,const QStyleOption * opt=Q_NULLPTR,const QWidget * w=Q_NULLPTR,QStyleHintReturn * shret=Q_NULLPTR) cons)","Funname":"dstyle::Style::styleHint","Returntype":"int","Args":"StyleHint sh,const QStyleOption * opt=Q_NULLPTR,const QWidget * w=Q_NULLPTR,QStyleHintReturn * shret=Q_NULLPTR) cons"},{"Uniquefunname":"QRect dstyle::Style::subControlRect(ComplexControl cc,const QStyleOptionComplex * opt,SubControl sc,const QWidget * w) cons)","Funname":"dstyle::Style::subControlRect","Returntype":"QRect","Args":"ComplexControl cc,const QStyleOptionComplex * opt,SubControl sc,const QWidget * w) cons"},{"Uniquefunname":"QRect dstyle::Style::subElementRect(SubElement r,const QStyleOption * opt,const QWidget * widget) cons)","Funname":"dstyle::Style::subElementRect","Returntype":"QRect","Args":"SubElement r,const QStyleOption * opt,const QWidget * widget) cons"},{"Uniquefunname":"void dstyle::Style::unpolish(QApplication * app)","Funname":"dstyle::Style::unpolish","Returntype":"void","Args":"QApplication * app"},{"Uniquefunname":"void dstyle::Style::unpolish(QWidget * w)","Funname":"dstyle::Style::unpolish","Returntype":"void","Args":"QWidget * w"},{"Uniquefunname":"bool dstyle::Style::widgetIsComboBoxPopupFramePrimitive(const QWidget * w)","Funname":"dstyle::Style::widgetIsComboBoxPopupFramePrimitive","Returntype":"bool","Args":"const QWidget * w"},{"Uniquefunname":" dstyle::Style::~Style()","Funname":"dstyle::Style::~Style","Returntype":"","Args":""},{"Uniquefunname":"void dstyle::StylePrivate::_q_removeAnimation()","Funname":"dstyle::StylePrivate::_q_removeAnimation","Returntype":"void","Args":""},{"Uniquefunname":"void dstyle::StylePrivate::_q_updateAppFont()","Funname":"dstyle::StylePrivate::_q_updateAppFont","Returntype":"void","Args":""},{"Uniquefunname":"DStyleAnimation * dstyle::StylePrivate::animation(const QObject * target) cons)","Funname":"dstyle::StylePrivate::animation","Returntype":"DStyleAnimation *","Args":"const QObject * target) cons"},{"Uniquefunname":"QColor dstyle::StylePrivate::backgroundColor(const QPalette \u0026 pal,const QWidget * widget) cons)","Funname":"dstyle::StylePrivate::backgroundColor","Returntype":"QColor","Args":"const QPalette \u0026 pal,const QWidget * widget) cons"},{"Uniquefunname":"QColor dstyle::StylePrivate::buttonColor(const QPalette \u0026 pal) cons)","Funname":"dstyle::StylePrivate::buttonColor","Returntype":"QColor","Args":"const QPalette \u0026 pal) cons"},{"Uniquefunname":"QColor dstyle::StylePrivate::darkShade() cons)","Funname":"dstyle::StylePrivate::darkShade","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"QColor dstyle::StylePrivate::highlight(const QPalette \u0026 pal) cons)","Funname":"dstyle::StylePrivate::highlight","Returntype":"QColor","Args":"const QPalette \u0026 pal) cons"},{"Uniquefunname":"QColor dstyle::StylePrivate::highlightedOutline(const QPalette \u0026 pal) cons)","Funname":"dstyle::StylePrivate::highlightedOutline","Returntype":"QColor","Args":"const QPalette \u0026 pal) cons"},{"Uniquefunname":"QColor dstyle::StylePrivate::innerContrastLine() cons)","Funname":"dstyle::StylePrivate::innerContrastLine","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"QColor dstyle::StylePrivate::lightShade() cons)","Funname":"dstyle::StylePrivate::lightShade","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"QColor dstyle::StylePrivate::outline(const QPalette \u0026 pal) cons)","Funname":"dstyle::StylePrivate::outline","Returntype":"QColor","Args":"const QPalette \u0026 pal) cons"},{"Uniquefunname":"void dstyle::StylePrivate::startAnimation(DStyleAnimation * animation) cons)","Funname":"dstyle::StylePrivate::startAnimation","Returntype":"void","Args":"DStyleAnimation * animation) cons"},{"Uniquefunname":"void dstyle::StylePrivate::stopAnimation(const QObject * target) cons)","Funname":"dstyle::StylePrivate::stopAnimation","Returntype":"void","Args":"const QObject * target) cons"},{"Uniquefunname":"void fillBrush(QPainter * p,const QRect \u0026 rect,const QBrush \u0026 brush,qreal rotate=0)","Funname":"fillBrush","Returntype":"void","Args":"QPainter * p,const QRect \u0026 rect,const QBrush \u0026 brush,qreal rotate=0"},{"Uniquefunname":"QRect headerArrowRect(const QStyleOption * opt,const QWidget * widget) cons)","Funname":"headerArrowRect","Returntype":"QRect","Args":"const QStyleOption * opt,const QWidget * widget) cons"},{"Uniquefunname":"QColor highlight(const QPalette \u0026 pal) cons)","Funname":"highlight","Returntype":"QColor","Args":"const QPalette \u0026 pal) cons"},{"Uniquefunname":"QColor highlightedOutline(const QPalette \u0026 pal) cons)","Funname":"highlightedOutline","Returntype":"QColor","Args":"const QPalette \u0026 pal) cons"},{"Uniquefunname":"QColor innerContrastLine() cons)","Funname":"innerContrastLine","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"bool isTabBarToolButton(const QWidget * button) cons)","Funname":"isTabBarToolButton","Returntype":"bool","Args":"const QWidget * button) cons"},{"Uniquefunname":"bool isVisibleMenuCheckBox() cons)","Funname":"isVisibleMenuCheckBox","Returntype":"bool","Args":") cons"},{"Uniquefunname":"bool isVisibleMenuIcon() cons)","Funname":"isVisibleMenuIcon","Returntype":"bool","Args":") cons"},{"Uniquefunname":"bool isVisibleMenuShortText() cons)","Funname":"isVisibleMenuShortText","Returntype":"bool","Args":") cons"},{"Uniquefunname":"QColor lightShade() cons)","Funname":"lightShade","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"QColor mergedColors(const QColor \u0026 colorA,const QColor \u0026 colorB,int factor=50)","Funname":"mergedColors","Returntype":"QColor","Args":"const QColor \u0026 colorA,const QColor \u0026 colorB,int factor=50"},{"Uniquefunname":"QColor outline(const QPalette \u0026 pal) cons)","Funname":"outline","Returntype":"QColor","Args":"const QPalette \u0026 pal) cons"},{"Uniquefunname":"int pixelMetric(PixelMetric m,const QStyleOption * opt=Q_NULLPTR,const QWidget * widget=Q_NULLPTR) cons)","Funname":"pixelMetric","Returntype":"int","Args":"PixelMetric m,const QStyleOption * opt=Q_NULLPTR,const QWidget * widget=Q_NULLPTR) cons"},{"Uniquefunname":"void polish(QApplication * app)","Funname":"polish","Returntype":"void","Args":"QApplication * app"},{"Uniquefunname":"void polish(QPalette \u0026 p)","Funname":"polish","Returntype":"void","Args":"QPalette \u0026 p"},{"Uniquefunname":"void polish(QWidget * w)","Funname":"polish","Returntype":"void","Args":"QWidget * w"},{"Uniquefunname":"QRect progressBarContentsRect(const QStyleOption * opt,const QWidget * widget) cons)","Funname":"progressBarContentsRect","Returntype":"QRect","Args":"const QStyleOption * opt,const QWidget * widget) cons"},{"Uniquefunname":"QRect progressBarGrooveRect(const QStyleOption * opt,const QWidget * widget) cons)","Funname":"progressBarGrooveRect","Returntype":"QRect","Args":"const QStyleOption * opt,const QWidget * widget) cons"},{"Uniquefunname":"QRect progressBarLabelRect(const QStyleOption * opt,const QWidget * widget) cons)","Funname":"progressBarLabelRect","Returntype":"QRect","Args":"const QStyleOption * opt,const QWidget * widget) cons"},{"Uniquefunname":"QWindow * qt_getWindow(const QWidget * widget)","Funname":"qt_getWindow","Returntype":"QWindow *","Args":"const QWidget * widget"},{"Uniquefunname":"QRect scrollbarSubControlRect(const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget) cons)","Funname":"scrollbarSubControlRect","Returntype":"QRect","Args":"const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget) cons"},{"Uniquefunname":"QSize sizeFromContents(ContentsType type,const QStyleOption * option,const QSize \u0026 size,const QWidget * widget) cons)","Funname":"sizeFromContents","Returntype":"QSize","Args":"ContentsType type,const QStyleOption * option,const QSize \u0026 size,const QWidget * widget) cons"},{"Uniquefunname":"QRect sliderSubControlRect(const QStyleOptionComplex * option,SubControl subControl,const QWidget * widget) cons)","Funname":"sliderSubControlRect","Returntype":"QRect","Args":"const QStyleOptionComplex * option,SubControl subControl,const QWidget * widget) cons"},{"Uniquefunname":"QRect spinboxSubControlRect(const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget) cons)","Funname":"spinboxSubControlRect","Returntype":"QRect","Args":"const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget) cons"},{"Uniquefunname":"QIcon standardIcon(StandardPixmap standardIcon,const QStyleOption * opt,const QWidget * widget) cons)","Funname":"standardIcon","Returntype":"QIcon","Args":"StandardPixmap standardIcon,const QStyleOption * opt,const QWidget * widget) cons"},{"Uniquefunname":"void startAnimation(DStyleAnimation * animation) cons)","Funname":"startAnimation","Returntype":"void","Args":"DStyleAnimation * animation) cons"},{"Uniquefunname":"void stopAnimation(const QObject * target) cons)","Funname":"stopAnimation","Returntype":"void","Args":"const QObject * target) cons"},{"Uniquefunname":"int styleHint(StyleHint sh,const QStyleOption * opt=Q_NULLPTR,const QWidget * w=Q_NULLPTR,QStyleHintReturn * shret=Q_NULLPTR) cons)","Funname":"styleHint","Returntype":"int","Args":"StyleHint sh,const QStyleOption * opt=Q_NULLPTR,const QWidget * w=Q_NULLPTR,QStyleHintReturn * shret=Q_NULLPTR) cons"},{"Uniquefunname":"QRect subControlRect(ComplexControl cc,const QStyleOptionComplex * opt,SubControl sc,const QWidget * w) cons)","Funname":"subControlRect","Returntype":"QRect","Args":"ComplexControl cc,const QStyleOptionComplex * opt,SubControl sc,const QWidget * w) cons"},{"Uniquefunname":"QRect subElementRect(SubElement r,const QStyleOption * opt,const QWidget * widget) cons)","Funname":"subElementRect","Returntype":"QRect","Args":"SubElement r,const QStyleOption * opt,const QWidget * widget) cons"},{"Uniquefunname":"void unpolish(QApplication * app)","Funname":"unpolish","Returntype":"void","Args":"QApplication * app"},{"Uniquefunname":"void unpolish(QWidget * w)","Funname":"unpolish","Returntype":"void","Args":"QWidget * w"},{"Uniquefunname":"bool widgetIsComboBoxPopupFramePrimitive(const QWidget * w)","Funname":"widgetIsComboBoxPopupFramePrimitive","Returntype":"bool","Args":"const QWidget * w"},{"Uniquefunname":" ~Style()","Funname":"~Style","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["STYLE_H"]},{"Name":"namespace","Fields":["dstyle"]},{"Name":"class:dstyle::Style","Fields":["PaletteExtended * dstyle::Style::m_palette","StyleType dstyle::Style::m_type"]},{"Name":"class:dstyle::StylePrivate","Fields":["QHash\u003cconst QObject *,DStyleAnimation * \u003e dstyle::StylePrivate::animations"]}]}
{"Filepath":"styles/norwegianwoodstyle.h","Functions":[{"Uniquefunname":" NorwegianWoodStyle()","Funname":"NorwegianWoodStyle","Returntype":"","Args":""},{"Uniquefunname":" NorwegianWoodStyle::NorwegianWoodStyle()","Funname":"NorwegianWoodStyle::NorwegianWoodStyle","Returntype":"","Args":""},{"Uniquefunname":"void NorwegianWoodStyle::drawControl(ControlElement control,const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"NorwegianWoodStyle::drawControl","Returntype":"void","Args":"ControlElement control,const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"void NorwegianWoodStyle::drawPrimitive(PrimitiveElement element,const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"NorwegianWoodStyle::drawPrimitive","Returntype":"void","Args":"PrimitiveElement element,const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"int NorwegianWoodStyle::pixelMetric(PixelMetric metric,const QStyleOption * option,const QWidget * widget) cons)","Funname":"NorwegianWoodStyle::pixelMetric","Returntype":"int","Args":"PixelMetric metric,const QStyleOption * option,const QWidget * widget) cons"},{"Uniquefunname":"void NorwegianWoodStyle::polish(QPalette \u0026 palette)","Funname":"NorwegianWoodStyle::polish","Returntype":"void","Args":"QPalette \u0026 palette"},{"Uniquefunname":"void NorwegianWoodStyle::polish(QWidget * widget)","Funname":"NorwegianWoodStyle::polish","Returntype":"void","Args":"QWidget * widget"},{"Uniquefunname":"QPainterPath NorwegianWoodStyle::roundRectPath(const QRect \u0026 rect)","Funname":"NorwegianWoodStyle::roundRectPath","Returntype":"QPainterPath","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void NorwegianWoodStyle::setTexture(QPalette \u0026 palette,QPalette::ColorRole role,const QPixmap \u0026 pixmap)","Funname":"NorwegianWoodStyle::setTexture","Returntype":"void","Args":"QPalette \u0026 palette,QPalette::ColorRole role,const QPixmap \u0026 pixmap"},{"Uniquefunname":"int NorwegianWoodStyle::styleHint(StyleHint hint,const QStyleOption * option,const QWidget * widget,QStyleHintReturn * returnData) cons)","Funname":"NorwegianWoodStyle::styleHint","Returntype":"int","Args":"StyleHint hint,const QStyleOption * option,const QWidget * widget,QStyleHintReturn * returnData) cons"},{"Uniquefunname":"void NorwegianWoodStyle::unpolish(QWidget * widget)","Funname":"NorwegianWoodStyle::unpolish","Returntype":"void","Args":"QWidget * widget"},{"Uniquefunname":"void drawControl(ControlElement control,const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawControl","Returntype":"void","Args":"ControlElement control,const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"void drawPrimitive(PrimitiveElement element,const QStyleOption * option,QPainter * painter,const QWidget * widget) cons)","Funname":"drawPrimitive","Returntype":"void","Args":"PrimitiveElement element,const QStyleOption * option,QPainter * painter,const QWidget * widget) cons"},{"Uniquefunname":"int pixelMetric(PixelMetric metric,const QStyleOption * option,const QWidget * widget) cons)","Funname":"pixelMetric","Returntype":"int","Args":"PixelMetric metric,const QStyleOption * option,const QWidget * widget) cons"},{"Uniquefunname":"void polish(QPalette \u0026 palette)","Funname":"polish","Returntype":"void","Args":"QPalette \u0026 palette"},{"Uniquefunname":"void polish(QWidget * widget)","Funname":"polish","Returntype":"void","Args":"QWidget * widget"},{"Uniquefunname":"QPainterPath roundRectPath(const QRect \u0026 rect)","Funname":"roundRectPath","Returntype":"QPainterPath","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void setTexture(QPalette \u0026 palette,QPalette::ColorRole role,const QPixmap \u0026 pixmap)","Funname":"setTexture","Returntype":"void","Args":"QPalette \u0026 palette,QPalette::ColorRole role,const QPixmap \u0026 pixmap"},{"Uniquefunname":"int styleHint(StyleHint hint,const QStyleOption * option,const QWidget * widget,QStyleHintReturn * returnData) cons)","Funname":"styleHint","Returntype":"int","Args":"StyleHint hint,const QStyleOption * option,const QWidget * widget,QStyleHintReturn * returnData) cons"},{"Uniquefunname":"void unpolish(QWidget * widget)","Funname":"unpolish","Returntype":"void","Args":"QWidget * widget"}],"Records":[{"Name":"macro","Fields":["NORWEGIANWOODSTYLE_H"]}]}
{"Filepath":"styles/widgetgallery.h","Functions":[{"Uniquefunname":" WidgetGallery(QWidget * parent=0)","Funname":"WidgetGallery","Returntype":"","Args":"QWidget * parent=0"},{"Uniquefunname":" WidgetGallery::WidgetGallery(QWidget * parent=0)","Funname":"WidgetGallery::WidgetGallery","Returntype":"","Args":"QWidget * parent=0"},{"Uniquefunname":"void WidgetGallery::advanceProgressBar()","Funname":"WidgetGallery::advanceProgressBar","Returntype":"void","Args":""},{"Uniquefunname":"void WidgetGallery::changePalette()","Funname":"WidgetGallery::changePalette","Returntype":"void","Args":""},{"Uniquefunname":"void WidgetGallery::changeStyle(const QString \u0026 styleName)","Funname":"WidgetGallery::changeStyle","Returntype":"void","Args":"const QString \u0026 styleName"},{"Uniquefunname":"void WidgetGallery::createBottomLeftTabWidget()","Funname":"WidgetGallery::createBottomLeftTabWidget","Returntype":"void","Args":""},{"Uniquefunname":"void WidgetGallery::createBottomRightGroupBox()","Funname":"WidgetGallery::createBottomRightGroupBox","Returntype":"void","Args":""},{"Uniquefunname":"void WidgetGallery::createProgressBar()","Funname":"WidgetGallery::createProgressBar","Returntype":"void","Args":""},{"Uniquefunname":"void WidgetGallery::createTopLeftGroupBox()","Funname":"WidgetGallery::createTopLeftGroupBox","Returntype":"void","Args":""},{"Uniquefunname":"void WidgetGallery::createTopRightGroupBox()","Funname":"WidgetGallery::createTopRightGroupBox","Returntype":"void","Args":""},{"Uniquefunname":"void advanceProgressBar()","Funname":"advanceProgressBar","Returntype":"void","Args":""},{"Uniquefunname":"void changePalette()","Funname":"changePalette","Returntype":"void","Args":""},{"Uniquefunname":"void changeStyle(const QString \u0026 styleName)","Funname":"changeStyle","Returntype":"void","Args":"const QString \u0026 styleName"},{"Uniquefunname":"void createBottomLeftTabWidget()","Funname":"createBottomLeftTabWidget","Returntype":"void","Args":""},{"Uniquefunname":"void createBottomRightGroupBox()","Funname":"createBottomRightGroupBox","Returntype":"void","Args":""},{"Uniquefunname":"void createProgressBar()","Funname":"createProgressBar","Returntype":"void","Args":""},{"Uniquefunname":"void createTopLeftGroupBox()","Funname":"createTopLeftGroupBox","Returntype":"void","Args":""},{"Uniquefunname":"void createTopRightGroupBox()","Funname":"createTopRightGroupBox","Returntype":"void","Args":""}],"Records":[{"Name":"macro","Fields":["WIDGETGALLERY_H"]},{"Name":"class:WidgetGallery","Fields":["QTabWidget * WidgetGallery::bottomLeftTabWidget","QGroupBox * WidgetGallery::bottomRightGroupBox","QCheckBox * WidgetGallery::checkBox","QComboBox * WidgetGallery::comboBoxEdit","QDateTimeEdit * WidgetGallery::dateTimeEdit","QPushButton * WidgetGallery::defaultPushButton","QDial * WidgetGallery::dial","QCheckBox * WidgetGallery::disableWidgetsCheckBox","QPushButton * WidgetGallery::flatPushButton","QLineEdit * WidgetGallery::lineEdit","QPalette WidgetGallery::originalPalette","QProgressBar * WidgetGallery::progressBar","QRadioButton * WidgetGallery::radioButton1","QRadioButton * WidgetGallery::radioButton2","QRadioButton * WidgetGallery::radioButton3","QScrollBar * WidgetGallery::scrollBar","QSlider * WidgetGallery::slider","QSpinBox * WidgetGallery::spinBox","QComboBox * WidgetGallery::styleComboBox","QLabel * WidgetGallery::styleLabel","QTableWidget * WidgetGallery::tableWidget","QTextEdit * WidgetGallery::textEdit","QPushButton * WidgetGallery::togglePushButton","QGroupBox * WidgetGallery::topLeftGroupBox","QGroupBox * WidgetGallery::topRightGroupBox","QCheckBox * WidgetGallery::useStylePaletteCheckBox"]}]}
>>>>>>> CHANGE (cec98d fix: 平板中增加标签页按钮的区域大小)
